# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type ActivityCountAggregate {
  id: Int!
  name: Int!
  startAt: Int!
  endAt: Int!
  descriotion: Int!
  createdAt: Int!
  updatedAt: Int!
  deletedAt: Int!
  resumeId: Int!
  _all: Int!
}

type ActivityMaxAggregate {
  id: String
  name: String
  startAt: DateTime
  endAt: DateTime
  descriotion: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  resumeId: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type ActivityMinAggregate {
  id: String
  name: String
  startAt: DateTime
  endAt: DateTime
  descriotion: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  resumeId: String
}

type Activity {
  id: ID!
  name: String!
  startAt: DateTime!
  endAt: DateTime
  descriotion: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  resumeId: String
  resume: Resume
}

type ApplicationCountAggregate {
  id: Int!
  createdAt: Int!
  status: Int!
  type: Int!
  updatedAt: Int!
  deletedAt: Int!
  resumeId: Int!
  jobId: Int!
  userId: Int!
  _all: Int!
}

type ApplicationMaxAggregate {
  id: String
  createdAt: DateTime
  status: ApplicationStatus
  type: ApplicationType
  updatedAt: DateTime
  deletedAt: DateTime
  resumeId: String
  jobId: String
  userId: String
}

enum ApplicationStatus {
  need_to_review
  save_for_later
  canceled
  contacted
}

enum ApplicationType {
  online_cv
  upload_cv
  work_profile
}

type ApplicationMinAggregate {
  id: String
  createdAt: DateTime
  status: ApplicationStatus
  type: ApplicationType
  updatedAt: DateTime
  deletedAt: DateTime
  resumeId: String
  jobId: String
  userId: String
}

type Application {
  id: ID!
  createdAt: DateTime!
  status: ApplicationStatus
  type: ApplicationType!
  updatedAt: DateTime!
  deletedAt: DateTime
  resumeId: String!
  jobId: String!
  userId: String!
  resume: Resume!
  job: Job!
  candidate: User!
}

type BookmarkPostCountAggregate {
  id: Int!
  userId: Int!
  postId: Int!
  createdAt: Int!
  updatedAt: Int!
  deletedAt: Int!
  _all: Int!
}

type BookmarkPostMaxAggregate {
  id: String
  userId: String
  postId: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type BookmarkPostMinAggregate {
  id: String
  userId: String
  postId: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type BookmarkPost {
  id: ID!
  userId: String!
  postId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  user: User!
  post: Post!
}

type CertificateCountAggregate {
  id: Int!
  name: Int!
  createdAt: Int!
  updatedAt: Int!
  deletedAt: Int!
  _all: Int!
}

type CertificateCount {
  files: Int!
}

type CertificateMaxAggregate {
  id: String
  name: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type CertificateMinAggregate {
  id: String
  name: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type Certificate {
  id: ID!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  files: [File!]
  _count: CertificateCount!
}

type CheckoutSessionAvgAggregate {
  id: Float
}

type CheckoutSessionCountAggregate {
  id: Int!
  sessionId: Int!
  paymentId: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type CheckoutSessionMaxAggregate {
  id: Int
  sessionId: String
  paymentId: String
  createdAt: DateTime
  updatedAt: DateTime
}

type CheckoutSessionMinAggregate {
  id: Int
  sessionId: String
  paymentId: String
  createdAt: DateTime
  updatedAt: DateTime
}

type CheckoutSessionSumAggregate {
  id: Int
}

type CheckoutSession {
  id: ID!
  sessionId: String!
  paymentId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  payment: Payment!
}

type CityAvgAggregate {
  id: Float
  stateId: Float
  countryId: Float
}

type CityCountAggregate {
  id: Int!
  name: Int!
  stateCode: Int!
  stateName: Int!
  countryCode: Int!
  countryName: Int!
  latitude: Int!
  longitude: Int!
  wikiDataId: Int!
  stateId: Int!
  countryId: Int!
  _all: Int!
}

type CityCount {
  users: Int!
  companies: Int!
  jobs: Int!
  resumes: Int!
  workExperiences: Int!
}

type CityMaxAggregate {
  id: Int
  name: String
  stateCode: String
  stateName: String
  countryCode: String
  countryName: String
  latitude: String
  longitude: String
  wikiDataId: String
  stateId: Int
  countryId: Int
}

type CityMinAggregate {
  id: Int
  name: String
  stateCode: String
  stateName: String
  countryCode: String
  countryName: String
  latitude: String
  longitude: String
  wikiDataId: String
  stateId: Int
  countryId: Int
}

type CitySumAggregate {
  id: Int
  stateId: Int
  countryId: Int
}

type City {
  id: ID!
  name: String!
  stateCode: String
  stateName: String
  countryCode: String
  countryName: String
  latitude: String
  longitude: String
  wikiDataId: String!
  stateId: Int
  countryId: Int
  state: State
  country: Country
  users: [UsersOnCity!]
  companies: [Company!]
  jobs: [Job!]
  resumes: [Resume!]
  workExperiences: [WorkExperience!]
  _count: CityCount!
}

type CommentCountAggregate {
  id: Int!
  userId: Int!
  conent: Int!
  createdAt: Int!
  updatedAt: Int!
  deletedAt: Int!
  postId: Int!
  isAnonymously: Int!
  parentId: Int!
  _all: Int!
}

type CommentCount {
  replies: Int!
  likes: Int!
  dislikes: Int!
}

type CommentMaxAggregate {
  id: String
  userId: String
  conent: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  postId: String
  isAnonymously: Boolean
  parentId: String
}

type CommentMinAggregate {
  id: String
  userId: String
  conent: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  postId: String
  isAnonymously: Boolean
  parentId: String
}

type Comment {
  id: ID!
  userId: String
  conent: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  postId: String!
  isAnonymously: Boolean
  parentId: String
  post: Post!
  user: User
  parent: Comment
  replies: [Comment!]
  likes: [LikePost!]
  dislikes: [DislikePost!]
  _count: CommentCount!
}

type CompanyAvgAggregate {
  cityId: Float
}

type CompanyCountAggregate {
  id: Int!
  name: Int!
  slug: Int!
  avatarId: Int!
  companyTypeId: Int!
  companySizeId: Int!
  addressDetail: Int!
  cityId: Int!
  description: Int!
  createdAt: Int!
  updatedAt: Int!
  deletedAt: Int!
  userId: Int!
  _all: Int!
}

type CompanyCount {
  photos: Int!
  industries: Int!
  social: Int!
  jobs: Int!
  workExperiences: Int!
  projects: Int!
  references: Int!
}

type CompanyMaxAggregate {
  id: String
  name: String
  slug: String
  avatarId: String
  companyTypeId: String
  companySizeId: String
  addressDetail: String
  cityId: Int
  description: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  userId: String
}

type CompanyMinAggregate {
  id: String
  name: String
  slug: String
  avatarId: String
  companyTypeId: String
  companySizeId: String
  addressDetail: String
  cityId: Int
  description: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  userId: String
}

type CompanySumAggregate {
  cityId: Int
}

type Company {
  id: ID!
  name: String!
  slug: String!
  avatarId: String
  companyTypeId: String
  companySizeId: String
  addressDetail: String!
  cityId: Int!
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  userId: String
  avatar: File
  type: CompanyType
  size: CompanySize
  photos: [File!]
  address: City!
  industries: [JobCategory!]
  social: [Social!]
  jobs: [Job!]
  workExperiences: [WorkExperience!]
  projects: [Project!]
  references: [Reference!]
  user: User
  _count: CompanyCount!
}

type CompanySizeCountAggregate {
  id: Int!
  key: Int!
  value: Int!
  isDefault: Int!
  createdAt: Int!
  updatedAt: Int!
  deletedAt: Int!
  _all: Int!
}

type CompanySizeCount {
  companies: Int!
}

type CompanySizeMaxAggregate {
  id: String
  key: String
  value: String
  isDefault: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type CompanySizeMinAggregate {
  id: String
  key: String
  value: String
  isDefault: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type CompanySize {
  id: ID!
  key: String!
  value: String!
  isDefault: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  companies: [Company!]
  _count: CompanySizeCount!
}

type CompanyTypeCountAggregate {
  id: Int!
  key: Int!
  value: Int!
  isDefault: Int!
  createdAt: Int!
  updatedAt: Int!
  deletedAt: Int!
  _all: Int!
}

type CompanyTypeCount {
  companies: Int!
}

type CompanyTypeMaxAggregate {
  id: String
  key: String
  value: String
  isDefault: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type CompanyTypeMinAggregate {
  id: String
  key: String
  value: String
  isDefault: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type CompanyType {
  id: ID!
  key: String!
  value: String!
  isDefault: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  companies: [Company!]
  _count: CompanyTypeCount!
}

type CountryAvgAggregate {
  id: Float
}

type CountryCountAggregate {
  id: Int!
  name: Int!
  iso3: Int!
  iso2: Int!
  numericCode: Int!
  phoneCode: Int!
  capital: Int!
  currency: Int!
  currencyName: Int!
  currencySymbol: Int!
  tld: Int!
  native: Int!
  region: Int!
  regionId: Int!
  subregion: Int!
  subregionId: Int!
  nationality: Int!
  timezones: Int!
  translations: Int!
  latitude: Int!
  longitude: Int!
  emoji: Int!
  emojiU: Int!
  svg: Int!
  _all: Int!
}

type CountryCount {
  states: Int!
  cities: Int!
  users: Int!
}

type CountryMaxAggregate {
  id: Int
  name: String
  iso3: String
  iso2: String
  numericCode: String
  phoneCode: String
  capital: String
  currency: String
  currencyName: String
  currencySymbol: String
  tld: String
  native: String
  region: String
  regionId: String
  subregion: String
  subregionId: String
  nationality: String
  latitude: String
  longitude: String
  emoji: String
  emojiU: String
  svg: String
}

type CountryMinAggregate {
  id: Int
  name: String
  iso3: String
  iso2: String
  numericCode: String
  phoneCode: String
  capital: String
  currency: String
  currencyName: String
  currencySymbol: String
  tld: String
  native: String
  region: String
  regionId: String
  subregion: String
  subregionId: String
  nationality: String
  latitude: String
  longitude: String
  emoji: String
  emojiU: String
  svg: String
}

type CountrySumAggregate {
  id: Int
}

type Country {
  id: ID!
  name: String!
  iso3: String!
  iso2: String!
  numericCode: String!
  phoneCode: String!
  capital: String!
  currency: String!
  currencyName: String!
  currencySymbol: String!
  tld: String!
  native: String
  region: String
  regionId: String
  subregion: String
  subregionId: String
  nationality: String!
  timezones: JSON!
  translations: JSON!
  latitude: String!
  longitude: String!
  emoji: String!
  emojiU: String!
  svg: String
  states: [State!]
  cities: [City!]
  users: [User!]
  _count: CountryCount!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type DislikePostCountAggregate {
  id: Int!
  createdAt: Int!
  updatedAt: Int!
  deletedAt: Int!
  userId: Int!
  postId: Int!
  commentId: Int!
  _all: Int!
}

type DislikePostMaxAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  userId: String
  postId: String
  commentId: String
}

type DislikePostMinAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  userId: String
  postId: String
  commentId: String
}

type DislikePost {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  userId: String
  postId: String!
  commentId: String
  user: User
  post: Post!
  comment: Comment
}

type EducationAvgAggregate {
  gpa: Float
}

type EducationCountAggregate {
  id: Int!
  type: Int!
  major: Int!
  degree: Int!
  graduationAt: Int!
  gpa: Int!
  awards: Int!
  relevantCourseworks: Int!
  createdAt: Int!
  updatedAt: Int!
  deletedAt: Int!
  resumeId: Int!
  userId: Int!
  _all: Int!
}

type EducationMaxAggregate {
  id: String
  type: EducationType
  major: String
  degree: Degree
  graduationAt: DateTime
  gpa: Int
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  resumeId: String
  userId: String
}

enum EducationType {
  school
  institution
  college
  university
  other
}

enum Degree {
  high_school_diploma
  vocational
  technical_training
  associate
  bachelor
  master
  doctoral
  other
}

type EducationMinAggregate {
  id: String
  type: EducationType
  major: String
  degree: Degree
  graduationAt: DateTime
  gpa: Int
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  resumeId: String
  userId: String
}

type EducationSumAggregate {
  gpa: Int
}

type Education {
  id: ID!
  type: EducationType!
  major: String!
  degree: Degree!
  graduationAt: DateTime
  gpa: Int
  awards: [String!]
  relevantCourseworks: [String!]
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  resumeId: String
  userId: String!
  resume: Resume
  user: User!
}

type FileCountAggregate {
  id: Int!
  url: Int!
  storageId: Int!
  provider: Int!
  metadata: Int!
  createdAt: Int!
  updatedAt: Int!
  deletedAt: Int!
  resumeTemplateId: Int!
  certificateId: Int!
  _all: Int!
}

type FileCount {
  users: Int!
  companies: Int!
  resume: Int!
  projects: Int!
  posts: Int!
  company: Int!
  resumeTemplates: Int!
}

type FileMaxAggregate {
  id: String
  url: String
  storageId: String
  provider: FileProvider
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  resumeTemplateId: String
  certificateId: String
}

enum FileProvider {
  s3
  cloudinary
}

type FileMinAggregate {
  id: String
  url: String
  storageId: String
  provider: FileProvider
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  resumeTemplateId: String
  certificateId: String
}

type File {
  id: ID!
  url: String!
  storageId: String!
  provider: FileProvider
  metadata: JSON
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  resumeTemplateId: String
  certificateId: String
  users: [User!]
  companies: [Company!]
  resume: [Resume!]
  projects: [Project!]
  posts: [Post!]
  company: [Company!]
  resumeTemplates: [ResumeTemplate!]
  certificate: Certificate
  _count: FileCount!
}

type InvoiceAvgAggregate {
  id: Float
}

type InvoiceCountAggregate {
  id: Int!
  customerId: Int!
  paymentId: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type InvoiceMaxAggregate {
  id: Int
  customerId: String
  paymentId: String
  createdAt: DateTime
  updatedAt: DateTime
}

type InvoiceMinAggregate {
  id: Int
  customerId: String
  paymentId: String
  createdAt: DateTime
  updatedAt: DateTime
}

type InvoiceSumAggregate {
  id: Int
}

type Invoice {
  id: ID!
  customerId: String!
  paymentId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  payment: Payment!
}

type JobAvgAggregate {
  cityId: Float
  numberOfRecruits: Float
}

type JobCountAggregate {
  id: Int!
  type: Int!
  level: Int!
  slug: Int!
  addressDetail: Int!
  jobTitleId: Int!
  jobCategoryId: Int!
  companyId: Int!
  cityId: Int!
  salary: Int!
  salaryMetadata: Int!
  description: Int!
  isBoot: Int!
  numberOfRecruits: Int!
  applicationDeadline: Int!
  createdAt: Int!
  updatedAt: Int!
  deletedAt: Int!
  _all: Int!
}

type JobCount {
  tags: Int!
  skills: Int!
  applications: Int!
  saveJobs: Int!
}

type JobMaxAggregate {
  id: String
  type: JobType
  level: JobLevel
  slug: String
  addressDetail: String
  jobTitleId: String
  jobCategoryId: String
  companyId: String
  cityId: Int
  salary: JobSalary
  description: String
  isBoot: Boolean
  numberOfRecruits: Int
  applicationDeadline: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

enum JobType {
  full_time
  part_time
  internship
  contract
  freelancer
  seasonal
}

enum JobLevel {
  entry
  junior
  middle
  senior
  lead
  manager
  director
  vp
}

enum JobSalary {
  discuss
  range
  peak
  begin
}

type JobMinAggregate {
  id: String
  type: JobType
  level: JobLevel
  slug: String
  addressDetail: String
  jobTitleId: String
  jobCategoryId: String
  companyId: String
  cityId: Int
  salary: JobSalary
  description: String
  isBoot: Boolean
  numberOfRecruits: Int
  applicationDeadline: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type JobSumAggregate {
  cityId: Int
  numberOfRecruits: Int
}

type Job {
  id: ID!
  type: JobType!
  level: JobLevel!
  slug: String!
  addressDetail: String
  jobTitleId: String!
  jobCategoryId: String!
  companyId: String!
  cityId: Int!
  salary: JobSalary!
  salaryMetadata: JSON
  description: String!
  isBoot: Boolean
  numberOfRecruits: Int!
  applicationDeadline: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  address: City!
  jobTitle: JobTitle!
  jobCategory: JobCategory!
  company: Company!
  tags: [Tag!]
  skills: [Skill!]
  applications: [Application!]
  saveJobs: [SaveJob!]
  _count: JobCount!
}

type JobCategoryCountAggregate {
  id: Int!
  name: Int!
  slug: Int!
  isFeature: Int!
  isTheFive: Int!
  isDefault: Int!
  createdAt: Int!
  updatedAt: Int!
  deletedAt: Int!
  _all: Int!
}

type JobCategoryCount {
  jobs: Int!
  companies: Int!
  posts: Int!
}

type JobCategoryMaxAggregate {
  id: String
  name: String
  slug: String
  isFeature: Boolean
  isTheFive: Boolean
  isDefault: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type JobCategoryMinAggregate {
  id: String
  name: String
  slug: String
  isFeature: Boolean
  isTheFive: Boolean
  isDefault: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type JobCategory {
  id: ID!
  name: String!
  slug: String!
  isFeature: Boolean
  isTheFive: Boolean
  isDefault: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  jobs: [Job!]
  companies: [Company!]
  posts: [Post!]
  _count: JobCategoryCount!
}

type JobTitleCountAggregate {
  id: Int!
  name: Int!
  isFeature: Int!
  createdAt: Int!
  updatedAt: Int!
  deletedAt: Int!
  _all: Int!
}

type JobTitleCount {
  jobs: Int!
  resumes: Int!
  workExperiences: Int!
}

type JobTitleMaxAggregate {
  id: String
  name: String
  isFeature: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type JobTitleMinAggregate {
  id: String
  name: String
  isFeature: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type JobTitle {
  id: ID!
  name: String!
  isFeature: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  jobs: [Job!]
  resumes: [Resume!]
  workExperiences: [WorkExperience!]
  _count: JobTitleCount!
}

type LanguageCountAggregate {
  id: Int!
  name: Int!
  locale: Int!
  createdAt: Int!
  updatedAt: Int!
  deletedAt: Int!
  _all: Int!
}

type LanguageCount {
  resumes: Int!
  languageSkill: Int!
}

type LanguageMaxAggregate {
  id: String
  name: String
  locale: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type LanguageMinAggregate {
  id: String
  name: String
  locale: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type Language {
  id: ID!
  name: String!
  locale: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  resumes: [Resume!]
  languageSkill: [LanguageSkill!]
  _count: LanguageCount!
}

type LanguageSkillCountAggregate {
  id: Int!
  name: Int!
  locale: Int!
  proficiencyLevel: Int!
  createdAt: Int!
  updatedAt: Int!
  deletedAt: Int!
  languageId: Int!
  resumeId: Int!
  _all: Int!
}

type LanguageSkillMaxAggregate {
  id: String
  name: String
  locale: String
  proficiencyLevel: ProficiencyLevel
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  languageId: String
  resumeId: String
}

enum ProficiencyLevel {
  beginner
  intermediate
  fluent
  professional
  native
}

type LanguageSkillMinAggregate {
  id: String
  name: String
  locale: String
  proficiencyLevel: ProficiencyLevel
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  languageId: String
  resumeId: String
}

type LanguageSkill {
  id: ID!
  name: String!
  locale: String!
  proficiencyLevel: ProficiencyLevel!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  languageId: String!
  resumeId: String
  language: Language!
  resume: Resume
}

type LikePostCountAggregate {
  id: Int!
  createdAt: Int!
  updatedAt: Int!
  deletedAt: Int!
  userId: Int!
  postId: Int!
  commentId: Int!
  _all: Int!
}

type LikePostMaxAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  userId: String
  postId: String
  commentId: String
}

type LikePostMinAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  userId: String
  postId: String
  commentId: String
}

type LikePost {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  userId: String
  postId: String!
  commentId: String
  user: User
  post: Post!
  comment: Comment
}

type PaymentAvgAggregate {
  amount: Float
}

type PaymentCountAggregate {
  id: Int!
  amount: Int!
  currency: Int!
  createdAt: Int!
  updatedAt: Int!
  deletedAt: Int!
  userId: Int!
  _all: Int!
}

type PaymentCount {
  checkouts: Int!
  invoices: Int!
}

type PaymentMaxAggregate {
  id: String
  amount: Int
  currency: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  userId: String
}

type PaymentMinAggregate {
  id: String
  amount: Int
  currency: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  userId: String
}

type PaymentSumAggregate {
  amount: Int
}

type Payment {
  id: ID!
  amount: Int!
  currency: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  userId: String!
  checkouts: [CheckoutSession!]
  invoices: [Invoice!]
  user: User!
  _count: PaymentCount!
}

type PostAvgAggregate {
  minRead: Float
}

type PostCountAggregate {
  id: Int!
  title: Int!
  content: Int!
  shareUrl: Int!
  metadata: Int!
  slug: Int!
  minRead: Int!
  jobCategoryId: Int!
  authorId: Int!
  thumbnailId: Int!
  createdAt: Int!
  updatedAt: Int!
  deletedAt: Int!
  _all: Int!
}

type PostCount {
  categories: Int!
  tags: Int!
  likes: Int!
  dislikes: Int!
  comments: Int!
  bookmarks: Int!
}

type PostMaxAggregate {
  id: String
  title: String
  content: String
  shareUrl: String
  slug: String
  minRead: Int
  jobCategoryId: String
  authorId: String
  thumbnailId: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type PostMinAggregate {
  id: String
  title: String
  content: String
  shareUrl: String
  slug: String
  minRead: Int
  jobCategoryId: String
  authorId: String
  thumbnailId: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type PostSumAggregate {
  minRead: Int
}

type Post {
  id: ID!
  title: String!
  content: String!
  shareUrl: String!
  metadata: JSON
  slug: String!
  minRead: Int
  jobCategoryId: String
  authorId: String!
  thumbnailId: String
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  jobCategory: JobCategory
  author: User!
  thumbnail: File
  categories: [PostCategory!]
  tags: [Tag!]
  likes: [LikePost!]
  dislikes: [DislikePost!]
  comments: [Comment!]
  bookmarks: [BookmarkPost!]
  _count: PostCount!
}

type PostCategoryCountAggregate {
  id: Int!
  name: Int!
  slug: Int!
  createdAt: Int!
  updatedAt: Int!
  deletedAt: Int!
  _all: Int!
}

type PostCategoryCount {
  posts: Int!
}

type PostCategoryMaxAggregate {
  id: String
  name: String
  slug: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type PostCategoryMinAggregate {
  id: String
  name: String
  slug: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type PostCategory {
  id: ID!
  name: String!
  slug: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  posts: [Post!]
  _count: PostCategoryCount!
}

type ProjectAvgAggregate {
  teamSize: Float
}

type ProjectCountAggregate {
  id: Int!
  title: Int!
  description: Int!
  teamSize: Int!
  role: Int!
  startAt: Int!
  endAt: Int!
  refeUrls: Int!
  thumbnailId: Int!
  companyId: Int!
  createdAt: Int!
  updatedAt: Int!
  deletedAt: Int!
  userId: Int!
  resumeId: Int!
  _all: Int!
}

type ProjectCount {
  techStacks: Int!
}

type ProjectMaxAggregate {
  id: String
  title: String
  description: String
  teamSize: Int
  startAt: DateTime
  endAt: DateTime
  thumbnailId: String
  companyId: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  userId: String
  resumeId: String
}

type ProjectMinAggregate {
  id: String
  title: String
  description: String
  teamSize: Int
  startAt: DateTime
  endAt: DateTime
  thumbnailId: String
  companyId: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  userId: String
  resumeId: String
}

type ProjectSumAggregate {
  teamSize: Int
}

type Project {
  id: ID!
  title: String!
  description: String!
  teamSize: Int!
  role: [String!]
  startAt: DateTime!
  endAt: DateTime
  refeUrls: [String!]
  thumbnailId: String
  companyId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  userId: String!
  resumeId: String
  techStacks: [Skill!]
  company: Company!
  thumbnail: File
  user: User!
  Resume: Resume
  _count: ProjectCount!
}

type ReferenceCountAggregate {
  id: Int!
  fullName: Int!
  email: Int!
  phoneNumber: Int!
  phoneCode: Int!
  createdAt: Int!
  updatedAt: Int!
  deletedAt: Int!
  companyId: Int!
  _all: Int!
}

type ReferenceMaxAggregate {
  id: String
  fullName: String
  email: String
  phoneNumber: String
  phoneCode: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  companyId: String
}

type ReferenceMinAggregate {
  id: String
  fullName: String
  email: String
  phoneNumber: String
  phoneCode: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  companyId: String
}

type Reference {
  id: ID!
  fullName: String!
  email: String!
  phoneNumber: String
  phoneCode: String
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  companyId: String!
  company: Company!
}

type ResumeAvgAggregate {
  cityId: Float
}

type ResumeCountAggregate {
  id: Int!
  name: Int!
  fullName: Int!
  email: Int!
  addressDetail: Int!
  description: Int!
  isSummary: Int!
  createdAt: Int!
  updatedAt: Int!
  deletedAt: Int!
  languageId: Int!
  jobTitleId: Int!
  userId: Int!
  fileId: Int!
  cityId: Int!
  _all: Int!
}

type ResumeCount {
  applications: Int!
  workExperiences: Int!
  educations: Int!
  skills: Int!
  projects: Int!
  socials: Int!
  languageSkills: Int!
  activities: Int!
}

type ResumeMaxAggregate {
  id: String
  name: String
  fullName: String
  email: String
  addressDetail: String
  description: String
  isSummary: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  languageId: String
  jobTitleId: String
  userId: String
  fileId: String
  cityId: Int
}

type ResumeMinAggregate {
  id: String
  name: String
  fullName: String
  email: String
  addressDetail: String
  description: String
  isSummary: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  languageId: String
  jobTitleId: String
  userId: String
  fileId: String
  cityId: Int
}

type ResumeSumAggregate {
  cityId: Int
}

type Resume {
  id: ID!
  name: String!
  fullName: String
  email: String
  addressDetail: String
  description: String!
  isSummary: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  languageId: String!
  jobTitleId: String!
  userId: String!
  fileId: String
  cityId: Int
  user: User!
  avatar: File
  address: City
  language: Language
  jobTitle: JobTitle!
  applications: [Application!]
  workExperiences: [WorkExperience!]
  educations: [Education!]
  skills: [Skill!]
  projects: [Project!]
  socials: [Social!]
  languageSkills: [LanguageSkill!]
  activities: [Activity!]
  _count: ResumeCount!
}

type ResumeTemplateCountAggregate {
  id: Int!
  raw: Int!
  status: Int!
  createdAt: Int!
  updatedAt: Int!
  deletedAt: Int!
  fileId: Int!
  _all: Int!
}

type ResumeTemplateMaxAggregate {
  id: String
  raw: String
  status: UserStatus
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  fileId: String
}

enum UserStatus {
  active
  inactive
}

type ResumeTemplateMinAggregate {
  id: String
  raw: String
  status: UserStatus
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  fileId: String
}

type ResumeTemplate {
  id: ID!
  raw: String!
  status: UserStatus
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  fileId: String
  file: File
}

type SaveJobCountAggregate {
  id: Int!
  userId: Int!
  createdAt: Int!
  updatedAt: Int!
  deletedAt: Int!
  jobId: Int!
  _all: Int!
}

type SaveJobMaxAggregate {
  id: String
  userId: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  jobId: String
}

type SaveJobMinAggregate {
  id: String
  userId: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  jobId: String
}

type SaveJob {
  id: ID!
  userId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  jobId: String!
  user: User!
  job: Job!
}

type SettingCountAggregate {
  key: Int!
  type: Int!
  value: Int!
  authorId: Int!
  showWith: Int!
  updatedById: Int!
  createdAt: Int!
  updatedAt: Int!
  deletedAt: Int!
  _all: Int!
}

type SettingMaxAggregate {
  key: String
  type: String
  authorId: String
  updatedById: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type SettingMinAggregate {
  key: String
  type: String
  authorId: String
  updatedById: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type Setting {
  key: String!
  type: String!
  value: JSON!
  authorId: String
  showWith: [UserRole!]
  updatedById: String
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  author: User
  updatedBy: User
}

enum UserRole {
  employee
  employer
  admin
  super_admin
}

type SkillCountAggregate {
  id: Int!
  content: Int!
  createdAt: Int!
  updatedAt: Int!
  deletedAt: Int!
  resumeId: Int!
  _all: Int!
}

type SkillCount {
  projects: Int!
  jobs: Int!
}

type SkillMaxAggregate {
  id: String
  content: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  resumeId: String
}

type SkillMinAggregate {
  id: String
  content: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  resumeId: String
}

type Skill {
  id: ID!
  content: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  resumeId: String
  resume: Resume
  projects: [Project!]
  jobs: [Job!]
  _count: SkillCount!
}

type SocialCountAggregate {
  id: Int!
  type: Int!
  url: Int!
  companyId: Int!
  userId: Int!
  createdAt: Int!
  updatedAt: Int!
  deletedAt: Int!
  resumeId: Int!
  _all: Int!
}

type SocialMaxAggregate {
  id: String
  type: SocialType
  url: String
  companyId: String
  userId: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  resumeId: String
}

enum SocialType {
  website
  linkedIn
  facebook
  github
  gitlab
  pinterest
  behance
  dribbble
  youtube
  instagram
  glosbe
  other
}

type SocialMinAggregate {
  id: String
  type: SocialType
  url: String
  companyId: String
  userId: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  resumeId: String
}

type Social {
  id: ID!
  type: SocialType
  url: String!
  companyId: String
  userId: String
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  resumeId: String
  company: Company
  user: User
  resume: Resume
}

type StateAvgAggregate {
  id: Float
  countryId: Float
}

type StateCountAggregate {
  id: Int!
  name: Int!
  countryCode: Int!
  countryName: Int!
  stateCode: Int!
  type: Int!
  latitude: Int!
  longitude: Int!
  countryId: Int!
  _all: Int!
}

type StateCount {
  cities: Int!
}

type StateMaxAggregate {
  id: Int
  name: String
  countryCode: String
  countryName: String
  stateCode: String
  type: String
  latitude: String
  longitude: String
  countryId: Int
}

type StateMinAggregate {
  id: Int
  name: String
  countryCode: String
  countryName: String
  stateCode: String
  type: String
  latitude: String
  longitude: String
  countryId: Int
}

type StateSumAggregate {
  id: Int
  countryId: Int
}

type State {
  id: ID!
  name: String!
  countryCode: String
  countryName: String
  stateCode: String
  type: String
  latitude: String
  longitude: String
  countryId: Int
  country: Country
  cities: [City!]
  _count: StateCount!
}

type TagCountAggregate {
  id: Int!
  type: Int!
  name: Int!
  color: Int!
  isPostDefault: Int!
  isJobDefault: Int!
  createdAt: Int!
  updatedAt: Int!
  deletedAt: Int!
  _all: Int!
}

type TagCount {
  jobs: Int!
  posts: Int!
}

type TagMaxAggregate {
  id: String
  type: TagType
  name: String
  color: String
  isPostDefault: Boolean
  isJobDefault: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

enum TagType {
  job
  post
  skill
}

type TagMinAggregate {
  id: String
  type: TagType
  name: String
  color: String
  isPostDefault: Boolean
  isJobDefault: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type Tag {
  id: ID!
  type: TagType
  name: String!
  color: String
  isPostDefault: Boolean
  isJobDefault: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  jobs: [Job!]
  posts: [Post!]
  _count: TagCount!
}

type UserAvgAggregate {
  countryId: Float
}

type UserCountAggregate {
  id: Int!
  avatarUrl: Int!
  avatarId: Int!
  firstName: Int!
  lastName: Int!
  email: Int!
  emailVerified: Int!
  password: Int!
  phoneNumber: Int!
  countryId: Int!
  workingPosition: Int!
  status: Int!
  signInProvider: Int!
  color: Int!
  role: Int!
  addressDetail: Int!
  verifyCode: Int!
  createdAt: Int!
  updatedAt: Int!
  deletedAt: Int!
  _all: Int!
}

type UserCount {
  social: Int!
  resumes: Int!
  workExperiences: Int!
  educations: Int!
  projects: Int!
  applications: Int!
  posts: Int!
  likes: Int!
  dislikes: Int!
  comments: Int!
  bookmarks: Int!
  saveJobs: Int!
  payments: Int!
  address: Int!
  companies: Int!
  authorSettings: Int!
  updatedBySettings: Int!
}

type UserMaxAggregate {
  id: String
  avatarUrl: String
  avatarId: String
  firstName: String
  lastName: String
  email: String
  emailVerified: Boolean
  password: String
  phoneNumber: String
  countryId: Int
  workingPosition: WorkPosition
  status: UserStatus
  signInProvider: SignInProvider
  color: String
  role: UserRole
  addressDetail: String
  verifyCode: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

enum WorkPosition {
  staff
  team_leader
  vice_of_department
  head_of_epartment
  vice_director
  director
  general_director
}

enum SignInProvider {
  google
}

type UserMinAggregate {
  id: String
  avatarUrl: String
  avatarId: String
  firstName: String
  lastName: String
  email: String
  emailVerified: Boolean
  password: String
  phoneNumber: String
  countryId: Int
  workingPosition: WorkPosition
  status: UserStatus
  signInProvider: SignInProvider
  color: String
  role: UserRole
  addressDetail: String
  verifyCode: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type UserSumAggregate {
  countryId: Int
}

type User {
  id: ID!
  avatarUrl: String
  avatarId: String
  firstName: String!
  lastName: String!
  email: String!
  emailVerified: Boolean!
  password: String!
  phoneNumber: String
  countryId: Int
  workingPosition: WorkPosition
  status: UserStatus!
  signInProvider: SignInProvider
  color: String
  role: UserRole!
  addressDetail: String
  verifyCode: String
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  avatar: File
  country: Country
  social: [Social!]
  resumes: [Resume!]
  workExperiences: [WorkExperience!]
  educations: [Education!]
  projects: [Project!]
  applications: [Application!]
  posts: [Post!]
  likes: [LikePost!]
  dislikes: [DislikePost!]
  comments: [Comment!]
  bookmarks: [BookmarkPost!]
  saveJobs: [SaveJob!]
  payments: [Payment!]
  address: [UsersOnCity!]
  companies: [Company!]
  authorSettings: [Setting!]
  updatedBySettings: [Setting!]
  _count: UserCount!
}

type UsersOnCityAvgAggregate {
  cityId: Float
}

type UsersOnCityCountAggregate {
  userId: Int!
  cityId: Int!
  createdAt: Int!
  updatedAt: Int!
  deletedAt: Int!
  _all: Int!
}

type UsersOnCityMaxAggregate {
  userId: String
  cityId: Int
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type UsersOnCityMinAggregate {
  userId: String
  cityId: Int
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

type UsersOnCitySumAggregate {
  cityId: Int
}

type UsersOnCity {
  userId: String!
  cityId: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  user: User!
  city: City!
}

type WorkExperienceAvgAggregate {
  cityId: Float
}

type WorkExperienceCountAggregate {
  id: Int!
  isFreelancer: Int!
  createdAt: Int!
  updatedAt: Int!
  deletedAt: Int!
  jobTitleId: Int!
  userId: Int!
  resumeId: Int!
  companyId: Int!
  cityId: Int!
  startAt: Int!
  endAt: Int!
  description: Int!
  _all: Int!
}

type WorkExperienceMaxAggregate {
  id: String
  isFreelancer: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  jobTitleId: String
  userId: String
  resumeId: String
  companyId: String
  cityId: Int
  startAt: DateTime
  endAt: DateTime
  description: String
}

type WorkExperienceMinAggregate {
  id: String
  isFreelancer: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  jobTitleId: String
  userId: String
  resumeId: String
  companyId: String
  cityId: Int
  startAt: DateTime
  endAt: DateTime
  description: String
}

type WorkExperienceSumAggregate {
  cityId: Int
}

type WorkExperience {
  id: ID!
  isFreelancer: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  jobTitleId: String!
  userId: String!
  resumeId: String
  companyId: String
  cityId: Int
  startAt: DateTime!
  endAt: DateTime
  description: String!
  jobTitle: JobTitle!
  user: User!
  company: Company
  resume: Resume
  address: City
}

type Metadata {
  total: Float!
  page: Float
  limit: Float
}

type Address {
  data: [City!]!
  metadata: Metadata
}

type AllCompanyResult {
  data: [Company!]!
  metadata: Metadata
}

type UserOnly {
  id: ID!
  avatarUrl: String
  avatarId: String
  firstName: String!
  lastName: String!
  email: String!
  emailVerified: Boolean!
  phoneNumber: String
  countryId: Int
  workingPosition: WorkPosition
  status: UserStatus!
  signInProvider: SignInProvider
  color: String
  role: UserRole!
  addressDetail: String
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  avatar: File
  country: Country
  social: [Social!]
  resumes: [Resume!]
  workExperiences: [WorkExperience!]
  educations: [Education!]
  projects: [Project!]
  applications: [Application!]
  posts: [Post!]
  likes: [LikePost!]
  dislikes: [DislikePost!]
  comments: [Comment!]
  bookmarks: [BookmarkPost!]
  saveJobs: [SaveJob!]
  payments: [Payment!]
  address: [UsersOnCity!]
  companies: [Company!]
  authorSettings: [Setting!]
  updatedBySettings: [Setting!]
  _count: UserCount!
}

type LoginResult {
  accessToken: String!
  expireTime: DateTime!
  refreshToken: String!
  profile: UserOnly
}

type RefreshTokenResult {
  accessToken: String!
  expireTime: DateTime!
}

type AllJobTitleResult {
  data: [JobTitle!]!
  metadata: Metadata
}

type AllPostCategoryResult {
  data: [PostCategory!]!
  metadata: Metadata
}

type AllSettingResult {
  data: [Setting!]!
  metadata: Metadata
}

type AllJobCategoryResult {
  data: [JobCategory!]!
  metadata: Metadata
}

type AllCompanySizeResult {
  data: [CompanySize!]!
  metadata: Metadata
}

type AllCompanyTypeResult {
  data: [CompanyType!]!
  metadata: Metadata
}

type AllPostResult {
  data: [Post!]!
  metadata: Metadata
}

type Query {
  upload_url(name: String!): String!
  all_address(where: CityWhereInput, orderBy: [CityOrderByWithRelationInput!], cursor: CityWhereUniqueInput, take: Int, skip: Int, distinct: [CityScalarFieldEnum!], searchValue: String, pagination: PaginationInput): Address!
  all_country(where: CountryWhereInput, orderBy: [CountryOrderByWithRelationInput!], cursor: CountryWhereUniqueInput, take: Int, skip: Int, distinct: [CountryScalarFieldEnum!]): [Country!]!
  one_country(where: CountryWhereInput, orderBy: [CountryOrderByWithRelationInput!], cursor: CountryWhereUniqueInput, take: Int, skip: Int, distinct: [CountryScalarFieldEnum!]): Country!
  all_tag(where: TagWhereInput, orderBy: [TagOrderByWithRelationInput!], cursor: TagWhereUniqueInput, take: Int, skip: Int, distinct: [TagScalarFieldEnum!]): [Tag!]!
  one_tag(where: TagWhereInput, orderBy: [TagOrderByWithRelationInput!], cursor: TagWhereUniqueInput, take: Int, skip: Int, distinct: [TagScalarFieldEnum!]): Tag!
  all_post_category(where: PostCategoryWhereInput, orderBy: [PostCategoryOrderByWithRelationInput!], cursor: PostCategoryWhereUniqueInput, take: Int, skip: Int, distinct: [PostCategoryScalarFieldEnum!], searchValue: String, pagination: PaginationInput): AllPostCategoryResult!
  one_post_category(where: PostCategoryWhereInput, orderBy: [PostCategoryOrderByWithRelationInput!], cursor: PostCategoryWhereUniqueInput, take: Int, skip: Int, distinct: [PostCategoryScalarFieldEnum!]): PostCategory!
  all_job_title(where: JobTitleWhereInput, orderBy: [JobTitleOrderByWithRelationInput!], cursor: JobTitleWhereUniqueInput, take: Int, skip: Int, distinct: [JobTitleScalarFieldEnum!], searchValue: String, pagination: PaginationInput): AllJobTitleResult!
  one_job_title(where: JobTitleWhereInput, orderBy: [JobTitleOrderByWithRelationInput!], cursor: JobTitleWhereUniqueInput, take: Int, skip: Int, distinct: [JobTitleScalarFieldEnum!]): JobTitle!
  all_job_category(where: JobCategoryWhereInput, orderBy: [JobCategoryOrderByWithRelationInput!], cursor: JobCategoryWhereUniqueInput, take: Int, skip: Int, distinct: [JobCategoryScalarFieldEnum!], searchValue: String, pagination: PaginationInput): AllJobCategoryResult!
  one_job_category(where: JobCategoryWhereInput, orderBy: [JobCategoryOrderByWithRelationInput!], cursor: JobCategoryWhereUniqueInput, take: Int, skip: Int, distinct: [JobCategoryScalarFieldEnum!]): JobCategory!
  all_user(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput!], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum!]): [UserOnly!]!
  me: UserOnly!
  one_setting(where: SettingWhereInput, orderBy: [SettingOrderByWithRelationInput!], cursor: SettingWhereUniqueInput, take: Int, skip: Int, distinct: [SettingScalarFieldEnum!]): Setting!
  setting_portal(where: SettingWhereInput, orderBy: [SettingOrderByWithRelationInput!], cursor: SettingWhereUniqueInput, take: Int, skip: Int, distinct: [SettingScalarFieldEnum!], pagination: PaginationInput, searchValue: String, isInit: Boolean): AllSettingResult!
  setting_landing_page(where: SettingWhereInput, orderBy: [SettingOrderByWithRelationInput!], cursor: SettingWhereUniqueInput, take: Int, skip: Int, distinct: [SettingScalarFieldEnum!], pagination: PaginationInput, searchValue: String): AllSettingResult!
  all_company(where: CompanyWhereInput, orderBy: [CompanyOrderByWithRelationInput!], cursor: CompanyWhereUniqueInput, take: Int, skip: Int, distinct: [CompanyScalarFieldEnum!], searchValue: String, pagination: PaginationInput): AllCompanyResult!
  one_company(where: CompanyWhereInput, orderBy: [CompanyOrderByWithRelationInput!], cursor: CompanyWhereUniqueInput, take: Int, skip: Int, distinct: [CompanyScalarFieldEnum!]): Company!
  all_post(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput!], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum!], pagination: PaginationInput): AllPostResult!
  one_post(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput!], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum!]): Post!
  all_job(where: JobWhereInput, orderBy: [JobOrderByWithRelationInput!], cursor: JobWhereUniqueInput, take: Int, skip: Int, distinct: [JobScalarFieldEnum!]): [Job!]!
  one_job(where: JobWhereInput, orderBy: [JobOrderByWithRelationInput!], cursor: JobWhereUniqueInput, take: Int, skip: Int, distinct: [JobScalarFieldEnum!]): Job!
  all_skill(where: SkillWhereInput, orderBy: [SkillOrderByWithRelationInput!], cursor: SkillWhereUniqueInput, take: Int, skip: Int, distinct: [SkillScalarFieldEnum!]): [Skill!]!
  one_skill(where: SkillWhereInput, orderBy: [SkillOrderByWithRelationInput!], cursor: SkillWhereUniqueInput, take: Int, skip: Int, distinct: [SkillScalarFieldEnum!]): Skill!
  all_company_type(where: CompanyTypeWhereInput, orderBy: [CompanyTypeOrderByWithRelationInput!], cursor: CompanyTypeWhereUniqueInput, take: Int, skip: Int, distinct: [CompanyTypeScalarFieldEnum!], searchValue: String, pagination: PaginationInput): AllCompanyTypeResult!
  one_company_type(where: CompanyTypeWhereInput, orderBy: [CompanyTypeOrderByWithRelationInput!], cursor: CompanyTypeWhereUniqueInput, take: Int, skip: Int, distinct: [CompanyTypeScalarFieldEnum!]): CompanyType!
  all_company_size(where: CompanySizeWhereInput, orderBy: [CompanySizeOrderByWithRelationInput!], cursor: CompanySizeWhereUniqueInput, take: Int, skip: Int, distinct: [CompanySizeScalarFieldEnum!], searchValue: String, pagination: PaginationInput): AllCompanySizeResult!
  one_company_size(where: CompanySizeWhereInput, orderBy: [CompanySizeOrderByWithRelationInput!], cursor: CompanySizeWhereUniqueInput, take: Int, skip: Int, distinct: [CompanySizeScalarFieldEnum!]): CompanySize!
}

input CityWhereInput {
  AND: [CityWhereInput!]
  OR: [CityWhereInput!]
  NOT: [CityWhereInput!]
  id: IntFilter
  name: StringFilter
  stateCode: StringNullableFilter
  stateName: StringNullableFilter
  countryCode: StringNullableFilter
  countryName: StringNullableFilter
  latitude: StringNullableFilter
  longitude: StringNullableFilter
  wikiDataId: StringFilter
  stateId: IntNullableFilter
  countryId: IntNullableFilter
  state: StateNullableRelationFilter
  country: CountryNullableRelationFilter
  users: UsersOnCityListRelationFilter
  companies: CompanyListRelationFilter
  jobs: JobListRelationFilter
  resumes: ResumeListRelationFilter
  workExperiences: WorkExperienceListRelationFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input NestedIntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
}

input NestedIntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
}

input StateNullableRelationFilter {
  is: StateWhereInput
  isNot: StateWhereInput
}

input StateWhereInput {
  AND: [StateWhereInput!]
  OR: [StateWhereInput!]
  NOT: [StateWhereInput!]
  id: IntFilter
  name: StringFilter
  countryCode: StringNullableFilter
  countryName: StringNullableFilter
  stateCode: StringNullableFilter
  type: StringNullableFilter
  latitude: StringNullableFilter
  longitude: StringNullableFilter
  countryId: IntNullableFilter
  country: CountryNullableRelationFilter
  cities: CityListRelationFilter
}

input CountryNullableRelationFilter {
  is: CountryWhereInput
  isNot: CountryWhereInput
}

input CountryWhereInput {
  AND: [CountryWhereInput!]
  OR: [CountryWhereInput!]
  NOT: [CountryWhereInput!]
  id: IntFilter
  name: StringFilter
  iso3: StringFilter
  iso2: StringFilter
  numericCode: StringFilter
  phoneCode: StringFilter
  capital: StringFilter
  currency: StringFilter
  currencyName: StringFilter
  currencySymbol: StringFilter
  tld: StringFilter
  native: StringNullableFilter
  region: StringNullableFilter
  regionId: StringNullableFilter
  subregion: StringNullableFilter
  subregionId: StringNullableFilter
  nationality: StringFilter
  timezones: JsonFilter
  translations: JsonFilter
  latitude: StringFilter
  longitude: StringFilter
  emoji: StringFilter
  emojiU: StringFilter
  svg: StringNullableFilter
  states: StateListRelationFilter
  cities: CityListRelationFilter
  users: UserListRelationFilter
}

input JsonFilter {
  equals: JSON
  path: [String!]
  string_contains: String
  string_starts_with: String
  string_ends_with: String
  array_contains: JSON
  array_starts_with: JSON
  array_ends_with: JSON
  lt: JSON
  lte: JSON
  gt: JSON
  gte: JSON
  not: JSON
}

input StateListRelationFilter {
  every: StateWhereInput
  some: StateWhereInput
  none: StateWhereInput
}

input CityListRelationFilter {
  every: CityWhereInput
  some: CityWhereInput
  none: CityWhereInput
}

input UserListRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: StringFilter
  avatarUrl: StringNullableFilter
  avatarId: StringNullableFilter
  firstName: StringFilter
  lastName: StringFilter
  email: StringFilter
  emailVerified: BoolFilter
  password: StringFilter
  phoneNumber: StringNullableFilter
  countryId: IntNullableFilter
  workingPosition: EnumWorkPositionNullableFilter
  status: EnumUserStatusFilter
  signInProvider: EnumSignInProviderNullableFilter
  color: StringNullableFilter
  role: EnumUserRoleFilter
  addressDetail: StringNullableFilter
  verifyCode: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  avatar: FileNullableRelationFilter
  country: CountryNullableRelationFilter
  social: SocialListRelationFilter
  resumes: ResumeListRelationFilter
  workExperiences: WorkExperienceListRelationFilter
  educations: EducationListRelationFilter
  projects: ProjectListRelationFilter
  applications: ApplicationListRelationFilter
  posts: PostListRelationFilter
  likes: LikePostListRelationFilter
  dislikes: DislikePostListRelationFilter
  comments: CommentListRelationFilter
  bookmarks: BookmarkPostListRelationFilter
  saveJobs: SaveJobListRelationFilter
  payments: PaymentListRelationFilter
  address: UsersOnCityListRelationFilter
  companies: CompanyListRelationFilter
  authorSettings: SettingListRelationFilter
  updatedBySettings: SettingListRelationFilter
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input EnumWorkPositionNullableFilter {
  equals: WorkPosition
  in: [WorkPosition!]
  notIn: [WorkPosition!]
  not: NestedEnumWorkPositionNullableFilter
}

input NestedEnumWorkPositionNullableFilter {
  equals: WorkPosition
  in: [WorkPosition!]
  notIn: [WorkPosition!]
  not: NestedEnumWorkPositionNullableFilter
}

input EnumUserStatusFilter {
  equals: UserStatus
  in: [UserStatus!]
  notIn: [UserStatus!]
  not: NestedEnumUserStatusFilter
}

input NestedEnumUserStatusFilter {
  equals: UserStatus
  in: [UserStatus!]
  notIn: [UserStatus!]
  not: NestedEnumUserStatusFilter
}

input EnumSignInProviderNullableFilter {
  equals: SignInProvider
  in: [SignInProvider!]
  notIn: [SignInProvider!]
  not: NestedEnumSignInProviderNullableFilter
}

input NestedEnumSignInProviderNullableFilter {
  equals: SignInProvider
  in: [SignInProvider!]
  notIn: [SignInProvider!]
  not: NestedEnumSignInProviderNullableFilter
}

input EnumUserRoleFilter {
  equals: UserRole
  in: [UserRole!]
  notIn: [UserRole!]
  not: NestedEnumUserRoleFilter
}

input NestedEnumUserRoleFilter {
  equals: UserRole
  in: [UserRole!]
  notIn: [UserRole!]
  not: NestedEnumUserRoleFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeNullableFilter
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeNullableFilter
}

input FileNullableRelationFilter {
  is: FileWhereInput
  isNot: FileWhereInput
}

input FileWhereInput {
  AND: [FileWhereInput!]
  OR: [FileWhereInput!]
  NOT: [FileWhereInput!]
  id: StringFilter
  url: StringFilter
  storageId: StringFilter
  provider: EnumFileProviderNullableFilter
  metadata: JsonNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  resumeTemplateId: StringNullableFilter
  certificateId: StringNullableFilter
  users: UserListRelationFilter
  companies: CompanyListRelationFilter
  resume: ResumeListRelationFilter
  projects: ProjectListRelationFilter
  posts: PostListRelationFilter
  company: CompanyListRelationFilter
  resumeTemplates: ResumeTemplateListRelationFilter
  certificate: CertificateNullableRelationFilter
}

input EnumFileProviderNullableFilter {
  equals: FileProvider
  in: [FileProvider!]
  notIn: [FileProvider!]
  not: NestedEnumFileProviderNullableFilter
}

input NestedEnumFileProviderNullableFilter {
  equals: FileProvider
  in: [FileProvider!]
  notIn: [FileProvider!]
  not: NestedEnumFileProviderNullableFilter
}

input JsonNullableFilter {
  equals: JSON
  path: [String!]
  string_contains: String
  string_starts_with: String
  string_ends_with: String
  array_contains: JSON
  array_starts_with: JSON
  array_ends_with: JSON
  lt: JSON
  lte: JSON
  gt: JSON
  gte: JSON
  not: JSON
}

input CompanyListRelationFilter {
  every: CompanyWhereInput
  some: CompanyWhereInput
  none: CompanyWhereInput
}

input CompanyWhereInput {
  AND: [CompanyWhereInput!]
  OR: [CompanyWhereInput!]
  NOT: [CompanyWhereInput!]
  id: StringFilter
  name: StringFilter
  slug: StringFilter
  avatarId: StringNullableFilter
  companyTypeId: StringNullableFilter
  companySizeId: StringNullableFilter
  addressDetail: StringFilter
  cityId: IntFilter
  description: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  userId: StringNullableFilter
  avatar: FileNullableRelationFilter
  type: CompanyTypeNullableRelationFilter
  size: CompanySizeNullableRelationFilter
  photos: FileListRelationFilter
  address: CityRelationFilter
  industries: JobCategoryListRelationFilter
  social: SocialListRelationFilter
  jobs: JobListRelationFilter
  workExperiences: WorkExperienceListRelationFilter
  projects: ProjectListRelationFilter
  references: ReferenceListRelationFilter
  user: UserNullableRelationFilter
}

input CompanyTypeNullableRelationFilter {
  is: CompanyTypeWhereInput
  isNot: CompanyTypeWhereInput
}

input CompanyTypeWhereInput {
  AND: [CompanyTypeWhereInput!]
  OR: [CompanyTypeWhereInput!]
  NOT: [CompanyTypeWhereInput!]
  id: StringFilter
  key: StringFilter
  value: StringFilter
  isDefault: BoolNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  companies: CompanyListRelationFilter
}

input BoolNullableFilter {
  equals: Boolean
  not: NestedBoolNullableFilter
}

input NestedBoolNullableFilter {
  equals: Boolean
  not: NestedBoolNullableFilter
}

input CompanySizeNullableRelationFilter {
  is: CompanySizeWhereInput
  isNot: CompanySizeWhereInput
}

input CompanySizeWhereInput {
  AND: [CompanySizeWhereInput!]
  OR: [CompanySizeWhereInput!]
  NOT: [CompanySizeWhereInput!]
  id: StringFilter
  key: StringFilter
  value: StringFilter
  isDefault: BoolNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  companies: CompanyListRelationFilter
}

input FileListRelationFilter {
  every: FileWhereInput
  some: FileWhereInput
  none: FileWhereInput
}

input CityRelationFilter {
  is: CityWhereInput
  isNot: CityWhereInput
}

input JobCategoryListRelationFilter {
  every: JobCategoryWhereInput
  some: JobCategoryWhereInput
  none: JobCategoryWhereInput
}

input JobCategoryWhereInput {
  AND: [JobCategoryWhereInput!]
  OR: [JobCategoryWhereInput!]
  NOT: [JobCategoryWhereInput!]
  id: StringFilter
  name: StringFilter
  slug: StringFilter
  isFeature: BoolNullableFilter
  isTheFive: BoolNullableFilter
  isDefault: BoolNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  jobs: JobListRelationFilter
  companies: CompanyListRelationFilter
  posts: PostListRelationFilter
}

input JobListRelationFilter {
  every: JobWhereInput
  some: JobWhereInput
  none: JobWhereInput
}

input JobWhereInput {
  AND: [JobWhereInput!]
  OR: [JobWhereInput!]
  NOT: [JobWhereInput!]
  id: StringFilter
  type: EnumJobTypeFilter
  level: EnumJobLevelFilter
  slug: StringFilter
  addressDetail: StringNullableFilter
  jobTitleId: StringFilter
  jobCategoryId: StringFilter
  companyId: StringFilter
  cityId: IntFilter
  salary: EnumJobSalaryFilter
  salaryMetadata: JsonNullableFilter
  description: StringFilter
  isBoot: BoolNullableFilter
  numberOfRecruits: IntFilter
  applicationDeadline: DateTimeFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  address: CityRelationFilter
  jobTitle: JobTitleRelationFilter
  jobCategory: JobCategoryRelationFilter
  company: CompanyRelationFilter
  tags: TagListRelationFilter
  skills: SkillListRelationFilter
  applications: ApplicationListRelationFilter
  saveJobs: SaveJobListRelationFilter
}

input EnumJobTypeFilter {
  equals: JobType
  in: [JobType!]
  notIn: [JobType!]
  not: NestedEnumJobTypeFilter
}

input NestedEnumJobTypeFilter {
  equals: JobType
  in: [JobType!]
  notIn: [JobType!]
  not: NestedEnumJobTypeFilter
}

input EnumJobLevelFilter {
  equals: JobLevel
  in: [JobLevel!]
  notIn: [JobLevel!]
  not: NestedEnumJobLevelFilter
}

input NestedEnumJobLevelFilter {
  equals: JobLevel
  in: [JobLevel!]
  notIn: [JobLevel!]
  not: NestedEnumJobLevelFilter
}

input EnumJobSalaryFilter {
  equals: JobSalary
  in: [JobSalary!]
  notIn: [JobSalary!]
  not: NestedEnumJobSalaryFilter
}

input NestedEnumJobSalaryFilter {
  equals: JobSalary
  in: [JobSalary!]
  notIn: [JobSalary!]
  not: NestedEnumJobSalaryFilter
}

input JobTitleRelationFilter {
  is: JobTitleWhereInput
  isNot: JobTitleWhereInput
}

input JobTitleWhereInput {
  AND: [JobTitleWhereInput!]
  OR: [JobTitleWhereInput!]
  NOT: [JobTitleWhereInput!]
  id: StringFilter
  name: StringFilter
  isFeature: BoolNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  jobs: JobListRelationFilter
  resumes: ResumeListRelationFilter
  workExperiences: WorkExperienceListRelationFilter
}

input ResumeListRelationFilter {
  every: ResumeWhereInput
  some: ResumeWhereInput
  none: ResumeWhereInput
}

input ResumeWhereInput {
  AND: [ResumeWhereInput!]
  OR: [ResumeWhereInput!]
  NOT: [ResumeWhereInput!]
  id: StringFilter
  name: StringFilter
  fullName: StringNullableFilter
  email: StringNullableFilter
  addressDetail: StringNullableFilter
  description: StringFilter
  isSummary: BoolNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  languageId: StringFilter
  jobTitleId: StringFilter
  userId: StringFilter
  fileId: StringNullableFilter
  cityId: IntNullableFilter
  user: UserRelationFilter
  avatar: FileNullableRelationFilter
  address: CityNullableRelationFilter
  language: LanguageNullableRelationFilter
  jobTitle: JobTitleRelationFilter
  applications: ApplicationListRelationFilter
  workExperiences: WorkExperienceListRelationFilter
  educations: EducationListRelationFilter
  skills: SkillListRelationFilter
  projects: ProjectListRelationFilter
  socials: SocialListRelationFilter
  languageSkills: LanguageSkillListRelationFilter
  activities: ActivityListRelationFilter
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input CityNullableRelationFilter {
  is: CityWhereInput
  isNot: CityWhereInput
}

input LanguageNullableRelationFilter {
  is: LanguageWhereInput
  isNot: LanguageWhereInput
}

input LanguageWhereInput {
  AND: [LanguageWhereInput!]
  OR: [LanguageWhereInput!]
  NOT: [LanguageWhereInput!]
  id: StringFilter
  name: StringFilter
  locale: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  resumes: ResumeListRelationFilter
  languageSkill: LanguageSkillListRelationFilter
}

input LanguageSkillListRelationFilter {
  every: LanguageSkillWhereInput
  some: LanguageSkillWhereInput
  none: LanguageSkillWhereInput
}

input LanguageSkillWhereInput {
  AND: [LanguageSkillWhereInput!]
  OR: [LanguageSkillWhereInput!]
  NOT: [LanguageSkillWhereInput!]
  id: StringFilter
  name: StringFilter
  locale: StringFilter
  proficiencyLevel: EnumProficiencyLevelFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  languageId: StringFilter
  resumeId: StringNullableFilter
  language: LanguageRelationFilter
  resume: ResumeNullableRelationFilter
}

input EnumProficiencyLevelFilter {
  equals: ProficiencyLevel
  in: [ProficiencyLevel!]
  notIn: [ProficiencyLevel!]
  not: NestedEnumProficiencyLevelFilter
}

input NestedEnumProficiencyLevelFilter {
  equals: ProficiencyLevel
  in: [ProficiencyLevel!]
  notIn: [ProficiencyLevel!]
  not: NestedEnumProficiencyLevelFilter
}

input LanguageRelationFilter {
  is: LanguageWhereInput
  isNot: LanguageWhereInput
}

input ResumeNullableRelationFilter {
  is: ResumeWhereInput
  isNot: ResumeWhereInput
}

input ApplicationListRelationFilter {
  every: ApplicationWhereInput
  some: ApplicationWhereInput
  none: ApplicationWhereInput
}

input ApplicationWhereInput {
  AND: [ApplicationWhereInput!]
  OR: [ApplicationWhereInput!]
  NOT: [ApplicationWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  status: EnumApplicationStatusNullableFilter
  type: EnumApplicationTypeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  resumeId: StringFilter
  jobId: StringFilter
  userId: StringFilter
  resume: ResumeRelationFilter
  job: JobRelationFilter
  candidate: UserRelationFilter
}

input EnumApplicationStatusNullableFilter {
  equals: ApplicationStatus
  in: [ApplicationStatus!]
  notIn: [ApplicationStatus!]
  not: NestedEnumApplicationStatusNullableFilter
}

input NestedEnumApplicationStatusNullableFilter {
  equals: ApplicationStatus
  in: [ApplicationStatus!]
  notIn: [ApplicationStatus!]
  not: NestedEnumApplicationStatusNullableFilter
}

input EnumApplicationTypeFilter {
  equals: ApplicationType
  in: [ApplicationType!]
  notIn: [ApplicationType!]
  not: NestedEnumApplicationTypeFilter
}

input NestedEnumApplicationTypeFilter {
  equals: ApplicationType
  in: [ApplicationType!]
  notIn: [ApplicationType!]
  not: NestedEnumApplicationTypeFilter
}

input ResumeRelationFilter {
  is: ResumeWhereInput
  isNot: ResumeWhereInput
}

input JobRelationFilter {
  is: JobWhereInput
  isNot: JobWhereInput
}

input WorkExperienceListRelationFilter {
  every: WorkExperienceWhereInput
  some: WorkExperienceWhereInput
  none: WorkExperienceWhereInput
}

input WorkExperienceWhereInput {
  AND: [WorkExperienceWhereInput!]
  OR: [WorkExperienceWhereInput!]
  NOT: [WorkExperienceWhereInput!]
  id: StringFilter
  isFreelancer: BoolNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  jobTitleId: StringFilter
  userId: StringFilter
  resumeId: StringNullableFilter
  companyId: StringNullableFilter
  cityId: IntNullableFilter
  startAt: DateTimeFilter
  endAt: DateTimeNullableFilter
  description: StringFilter
  jobTitle: JobTitleRelationFilter
  user: UserRelationFilter
  company: CompanyNullableRelationFilter
  resume: ResumeNullableRelationFilter
  address: CityNullableRelationFilter
}

input CompanyNullableRelationFilter {
  is: CompanyWhereInput
  isNot: CompanyWhereInput
}

input EducationListRelationFilter {
  every: EducationWhereInput
  some: EducationWhereInput
  none: EducationWhereInput
}

input EducationWhereInput {
  AND: [EducationWhereInput!]
  OR: [EducationWhereInput!]
  NOT: [EducationWhereInput!]
  id: StringFilter
  type: EnumEducationTypeFilter
  major: StringFilter
  degree: EnumDegreeFilter
  graduationAt: DateTimeNullableFilter
  gpa: IntNullableFilter
  awards: StringNullableListFilter
  relevantCourseworks: StringNullableListFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  resumeId: StringNullableFilter
  userId: StringFilter
  resume: ResumeNullableRelationFilter
  user: UserRelationFilter
}

input EnumEducationTypeFilter {
  equals: EducationType
  in: [EducationType!]
  notIn: [EducationType!]
  not: NestedEnumEducationTypeFilter
}

input NestedEnumEducationTypeFilter {
  equals: EducationType
  in: [EducationType!]
  notIn: [EducationType!]
  not: NestedEnumEducationTypeFilter
}

input EnumDegreeFilter {
  equals: Degree
  in: [Degree!]
  notIn: [Degree!]
  not: NestedEnumDegreeFilter
}

input NestedEnumDegreeFilter {
  equals: Degree
  in: [Degree!]
  notIn: [Degree!]
  not: NestedEnumDegreeFilter
}

input StringNullableListFilter {
  equals: [String!]
  has: String
  hasEvery: [String!]
  hasSome: [String!]
  isEmpty: Boolean
}

input SkillListRelationFilter {
  every: SkillWhereInput
  some: SkillWhereInput
  none: SkillWhereInput
}

input SkillWhereInput {
  AND: [SkillWhereInput!]
  OR: [SkillWhereInput!]
  NOT: [SkillWhereInput!]
  id: StringFilter
  content: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  resumeId: StringNullableFilter
  resume: ResumeNullableRelationFilter
  projects: ProjectListRelationFilter
  jobs: JobListRelationFilter
}

input ProjectListRelationFilter {
  every: ProjectWhereInput
  some: ProjectWhereInput
  none: ProjectWhereInput
}

input ProjectWhereInput {
  AND: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
  id: StringFilter
  title: StringFilter
  description: StringFilter
  teamSize: IntFilter
  role: StringNullableListFilter
  startAt: DateTimeFilter
  endAt: DateTimeNullableFilter
  refeUrls: StringNullableListFilter
  thumbnailId: StringNullableFilter
  companyId: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  userId: StringFilter
  resumeId: StringNullableFilter
  techStacks: SkillListRelationFilter
  company: CompanyRelationFilter
  thumbnail: FileNullableRelationFilter
  user: UserRelationFilter
  Resume: ResumeNullableRelationFilter
}

input CompanyRelationFilter {
  is: CompanyWhereInput
  isNot: CompanyWhereInput
}

input SocialListRelationFilter {
  every: SocialWhereInput
  some: SocialWhereInput
  none: SocialWhereInput
}

input SocialWhereInput {
  AND: [SocialWhereInput!]
  OR: [SocialWhereInput!]
  NOT: [SocialWhereInput!]
  id: StringFilter
  type: EnumSocialTypeNullableFilter
  url: StringFilter
  companyId: StringNullableFilter
  userId: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  resumeId: StringNullableFilter
  company: CompanyNullableRelationFilter
  user: UserNullableRelationFilter
  resume: ResumeNullableRelationFilter
}

input EnumSocialTypeNullableFilter {
  equals: SocialType
  in: [SocialType!]
  notIn: [SocialType!]
  not: NestedEnumSocialTypeNullableFilter
}

input NestedEnumSocialTypeNullableFilter {
  equals: SocialType
  in: [SocialType!]
  notIn: [SocialType!]
  not: NestedEnumSocialTypeNullableFilter
}

input UserNullableRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input ActivityListRelationFilter {
  every: ActivityWhereInput
  some: ActivityWhereInput
  none: ActivityWhereInput
}

input ActivityWhereInput {
  AND: [ActivityWhereInput!]
  OR: [ActivityWhereInput!]
  NOT: [ActivityWhereInput!]
  id: StringFilter
  name: StringFilter
  startAt: DateTimeFilter
  endAt: DateTimeNullableFilter
  descriotion: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  resumeId: StringNullableFilter
  resume: ResumeNullableRelationFilter
}

input JobCategoryRelationFilter {
  is: JobCategoryWhereInput
  isNot: JobCategoryWhereInput
}

input TagListRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: StringFilter
  type: EnumTagTypeNullableFilter
  name: StringFilter
  color: StringNullableFilter
  isPostDefault: BoolNullableFilter
  isJobDefault: BoolNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  jobs: JobListRelationFilter
  posts: PostListRelationFilter
}

input EnumTagTypeNullableFilter {
  equals: TagType
  in: [TagType!]
  notIn: [TagType!]
  not: NestedEnumTagTypeNullableFilter
}

input NestedEnumTagTypeNullableFilter {
  equals: TagType
  in: [TagType!]
  notIn: [TagType!]
  not: NestedEnumTagTypeNullableFilter
}

input PostListRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: StringFilter
  title: StringFilter
  content: StringFilter
  shareUrl: StringFilter
  metadata: JsonNullableFilter
  slug: StringFilter
  minRead: IntNullableFilter
  jobCategoryId: StringNullableFilter
  authorId: StringFilter
  thumbnailId: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  jobCategory: JobCategoryNullableRelationFilter
  author: UserRelationFilter
  thumbnail: FileNullableRelationFilter
  categories: PostCategoryListRelationFilter
  tags: TagListRelationFilter
  likes: LikePostListRelationFilter
  dislikes: DislikePostListRelationFilter
  comments: CommentListRelationFilter
  bookmarks: BookmarkPostListRelationFilter
}

input JobCategoryNullableRelationFilter {
  is: JobCategoryWhereInput
  isNot: JobCategoryWhereInput
}

input PostCategoryListRelationFilter {
  every: PostCategoryWhereInput
  some: PostCategoryWhereInput
  none: PostCategoryWhereInput
}

input PostCategoryWhereInput {
  AND: [PostCategoryWhereInput!]
  OR: [PostCategoryWhereInput!]
  NOT: [PostCategoryWhereInput!]
  id: StringFilter
  name: StringFilter
  slug: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  posts: PostListRelationFilter
}

input LikePostListRelationFilter {
  every: LikePostWhereInput
  some: LikePostWhereInput
  none: LikePostWhereInput
}

input LikePostWhereInput {
  AND: [LikePostWhereInput!]
  OR: [LikePostWhereInput!]
  NOT: [LikePostWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  userId: StringNullableFilter
  postId: StringFilter
  commentId: StringNullableFilter
  user: UserNullableRelationFilter
  post: PostRelationFilter
  comment: CommentNullableRelationFilter
}

input PostRelationFilter {
  is: PostWhereInput
  isNot: PostWhereInput
}

input CommentNullableRelationFilter {
  is: CommentWhereInput
  isNot: CommentWhereInput
}

input CommentWhereInput {
  AND: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
  id: StringFilter
  userId: StringNullableFilter
  conent: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  postId: StringFilter
  isAnonymously: BoolNullableFilter
  parentId: StringNullableFilter
  post: PostRelationFilter
  user: UserNullableRelationFilter
  parent: CommentNullableRelationFilter
  replies: CommentListRelationFilter
  likes: LikePostListRelationFilter
  dislikes: DislikePostListRelationFilter
}

input CommentListRelationFilter {
  every: CommentWhereInput
  some: CommentWhereInput
  none: CommentWhereInput
}

input DislikePostListRelationFilter {
  every: DislikePostWhereInput
  some: DislikePostWhereInput
  none: DislikePostWhereInput
}

input DislikePostWhereInput {
  AND: [DislikePostWhereInput!]
  OR: [DislikePostWhereInput!]
  NOT: [DislikePostWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  userId: StringNullableFilter
  postId: StringFilter
  commentId: StringNullableFilter
  user: UserNullableRelationFilter
  post: PostRelationFilter
  comment: CommentNullableRelationFilter
}

input BookmarkPostListRelationFilter {
  every: BookmarkPostWhereInput
  some: BookmarkPostWhereInput
  none: BookmarkPostWhereInput
}

input BookmarkPostWhereInput {
  AND: [BookmarkPostWhereInput!]
  OR: [BookmarkPostWhereInput!]
  NOT: [BookmarkPostWhereInput!]
  id: StringFilter
  userId: StringFilter
  postId: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  user: UserRelationFilter
  post: PostRelationFilter
}

input SaveJobListRelationFilter {
  every: SaveJobWhereInput
  some: SaveJobWhereInput
  none: SaveJobWhereInput
}

input SaveJobWhereInput {
  AND: [SaveJobWhereInput!]
  OR: [SaveJobWhereInput!]
  NOT: [SaveJobWhereInput!]
  id: StringFilter
  userId: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  jobId: StringFilter
  user: UserRelationFilter
  job: JobRelationFilter
}

input ReferenceListRelationFilter {
  every: ReferenceWhereInput
  some: ReferenceWhereInput
  none: ReferenceWhereInput
}

input ReferenceWhereInput {
  AND: [ReferenceWhereInput!]
  OR: [ReferenceWhereInput!]
  NOT: [ReferenceWhereInput!]
  id: StringFilter
  fullName: StringFilter
  email: StringFilter
  phoneNumber: StringNullableFilter
  phoneCode: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  companyId: StringFilter
  company: CompanyRelationFilter
}

input ResumeTemplateListRelationFilter {
  every: ResumeTemplateWhereInput
  some: ResumeTemplateWhereInput
  none: ResumeTemplateWhereInput
}

input ResumeTemplateWhereInput {
  AND: [ResumeTemplateWhereInput!]
  OR: [ResumeTemplateWhereInput!]
  NOT: [ResumeTemplateWhereInput!]
  id: StringFilter
  raw: StringFilter
  status: EnumUserStatusNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  fileId: StringNullableFilter
  file: FileNullableRelationFilter
}

input EnumUserStatusNullableFilter {
  equals: UserStatus
  in: [UserStatus!]
  notIn: [UserStatus!]
  not: NestedEnumUserStatusNullableFilter
}

input NestedEnumUserStatusNullableFilter {
  equals: UserStatus
  in: [UserStatus!]
  notIn: [UserStatus!]
  not: NestedEnumUserStatusNullableFilter
}

input CertificateNullableRelationFilter {
  is: CertificateWhereInput
  isNot: CertificateWhereInput
}

input CertificateWhereInput {
  AND: [CertificateWhereInput!]
  OR: [CertificateWhereInput!]
  NOT: [CertificateWhereInput!]
  id: StringFilter
  name: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  files: FileListRelationFilter
}

input PaymentListRelationFilter {
  every: PaymentWhereInput
  some: PaymentWhereInput
  none: PaymentWhereInput
}

input PaymentWhereInput {
  AND: [PaymentWhereInput!]
  OR: [PaymentWhereInput!]
  NOT: [PaymentWhereInput!]
  id: StringFilter
  amount: IntFilter
  currency: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  userId: StringFilter
  checkouts: CheckoutSessionListRelationFilter
  invoices: InvoiceListRelationFilter
  user: UserRelationFilter
}

input CheckoutSessionListRelationFilter {
  every: CheckoutSessionWhereInput
  some: CheckoutSessionWhereInput
  none: CheckoutSessionWhereInput
}

input CheckoutSessionWhereInput {
  AND: [CheckoutSessionWhereInput!]
  OR: [CheckoutSessionWhereInput!]
  NOT: [CheckoutSessionWhereInput!]
  id: IntFilter
  sessionId: StringFilter
  paymentId: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  payment: PaymentRelationFilter
}

input PaymentRelationFilter {
  is: PaymentWhereInput
  isNot: PaymentWhereInput
}

input InvoiceListRelationFilter {
  every: InvoiceWhereInput
  some: InvoiceWhereInput
  none: InvoiceWhereInput
}

input InvoiceWhereInput {
  AND: [InvoiceWhereInput!]
  OR: [InvoiceWhereInput!]
  NOT: [InvoiceWhereInput!]
  id: IntFilter
  customerId: StringFilter
  paymentId: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  payment: PaymentRelationFilter
}

input UsersOnCityListRelationFilter {
  every: UsersOnCityWhereInput
  some: UsersOnCityWhereInput
  none: UsersOnCityWhereInput
}

input UsersOnCityWhereInput {
  AND: [UsersOnCityWhereInput!]
  OR: [UsersOnCityWhereInput!]
  NOT: [UsersOnCityWhereInput!]
  userId: StringFilter
  cityId: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  user: UserRelationFilter
  city: CityRelationFilter
}

input SettingListRelationFilter {
  every: SettingWhereInput
  some: SettingWhereInput
  none: SettingWhereInput
}

input SettingWhereInput {
  AND: [SettingWhereInput!]
  OR: [SettingWhereInput!]
  NOT: [SettingWhereInput!]
  key: StringFilter
  type: StringFilter
  value: JsonFilter
  authorId: StringNullableFilter
  showWith: EnumUserRoleNullableListFilter
  updatedById: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  author: UserNullableRelationFilter
  updatedBy: UserNullableRelationFilter
}

input EnumUserRoleNullableListFilter {
  equals: [UserRole!]
  has: UserRole
  hasEvery: [UserRole!]
  hasSome: [UserRole!]
  isEmpty: Boolean
}

input CityOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  stateCode: SortOrderInput
  stateName: SortOrderInput
  countryCode: SortOrderInput
  countryName: SortOrderInput
  latitude: SortOrderInput
  longitude: SortOrderInput
  wikiDataId: SortOrder
  stateId: SortOrderInput
  countryId: SortOrderInput
  state: StateOrderByWithRelationInput
  country: CountryOrderByWithRelationInput
  users: UsersOnCityOrderByRelationAggregateInput
  companies: CompanyOrderByRelationAggregateInput
  jobs: JobOrderByRelationAggregateInput
  resumes: ResumeOrderByRelationAggregateInput
  workExperiences: WorkExperienceOrderByRelationAggregateInput
}

enum SortOrder {
  asc
  desc
}

input SortOrderInput {
  sort: SortOrder!
  nulls: NullsOrder
}

enum NullsOrder {
  first
  last
}

input StateOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  countryCode: SortOrderInput
  countryName: SortOrderInput
  stateCode: SortOrderInput
  type: SortOrderInput
  latitude: SortOrderInput
  longitude: SortOrderInput
  countryId: SortOrderInput
  country: CountryOrderByWithRelationInput
  cities: CityOrderByRelationAggregateInput
}

input CountryOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  iso3: SortOrder
  iso2: SortOrder
  numericCode: SortOrder
  phoneCode: SortOrder
  capital: SortOrder
  currency: SortOrder
  currencyName: SortOrder
  currencySymbol: SortOrder
  tld: SortOrder
  native: SortOrderInput
  region: SortOrderInput
  regionId: SortOrderInput
  subregion: SortOrderInput
  subregionId: SortOrderInput
  nationality: SortOrder
  timezones: SortOrder
  translations: SortOrder
  latitude: SortOrder
  longitude: SortOrder
  emoji: SortOrder
  emojiU: SortOrder
  svg: SortOrderInput
  states: StateOrderByRelationAggregateInput
  cities: CityOrderByRelationAggregateInput
  users: UserOrderByRelationAggregateInput
}

input StateOrderByRelationAggregateInput {
  _count: SortOrder
}

input CityOrderByRelationAggregateInput {
  _count: SortOrder
}

input UserOrderByRelationAggregateInput {
  _count: SortOrder
}

input UsersOnCityOrderByRelationAggregateInput {
  _count: SortOrder
}

input CompanyOrderByRelationAggregateInput {
  _count: SortOrder
}

input JobOrderByRelationAggregateInput {
  _count: SortOrder
}

input ResumeOrderByRelationAggregateInput {
  _count: SortOrder
}

input WorkExperienceOrderByRelationAggregateInput {
  _count: SortOrder
}

input CityWhereUniqueInput {
  id: Int
  AND: [CityWhereInput!]
  OR: [CityWhereInput!]
  NOT: [CityWhereInput!]
  name: StringFilter
  stateCode: StringNullableFilter
  stateName: StringNullableFilter
  countryCode: StringNullableFilter
  countryName: StringNullableFilter
  latitude: StringNullableFilter
  longitude: StringNullableFilter
  wikiDataId: StringFilter
  stateId: IntNullableFilter
  countryId: IntNullableFilter
  state: StateNullableRelationFilter
  country: CountryNullableRelationFilter
  users: UsersOnCityListRelationFilter
  companies: CompanyListRelationFilter
  jobs: JobListRelationFilter
  resumes: ResumeListRelationFilter
  workExperiences: WorkExperienceListRelationFilter
}

enum CityScalarFieldEnum {
  id
  name
  stateCode
  stateName
  countryCode
  countryName
  latitude
  longitude
  wikiDataId
  stateId
  countryId
}

input PaginationInput {
  page: Float!
  limit: Float
}

input CountryWhereUniqueInput {
  id: Int
  AND: [CountryWhereInput!]
  OR: [CountryWhereInput!]
  NOT: [CountryWhereInput!]
  name: StringFilter
  iso3: StringFilter
  iso2: StringFilter
  numericCode: StringFilter
  phoneCode: StringFilter
  capital: StringFilter
  currency: StringFilter
  currencyName: StringFilter
  currencySymbol: StringFilter
  tld: StringFilter
  native: StringNullableFilter
  region: StringNullableFilter
  regionId: StringNullableFilter
  subregion: StringNullableFilter
  subregionId: StringNullableFilter
  nationality: StringFilter
  timezones: JsonFilter
  translations: JsonFilter
  latitude: StringFilter
  longitude: StringFilter
  emoji: StringFilter
  emojiU: StringFilter
  svg: StringNullableFilter
  states: StateListRelationFilter
  cities: CityListRelationFilter
  users: UserListRelationFilter
}

enum CountryScalarFieldEnum {
  id
  name
  iso3
  iso2
  numericCode
  phoneCode
  capital
  currency
  currencyName
  currencySymbol
  tld
  native
  region
  regionId
  subregion
  subregionId
  nationality
  timezones
  translations
  latitude
  longitude
  emoji
  emojiU
  svg
}

input TagOrderByWithRelationInput {
  id: SortOrder
  type: SortOrderInput
  name: SortOrder
  color: SortOrderInput
  isPostDefault: SortOrderInput
  isJobDefault: SortOrderInput
  createdAt: SortOrder
  updatedAt: SortOrder
  deletedAt: SortOrderInput
  jobs: JobOrderByRelationAggregateInput
  posts: PostOrderByRelationAggregateInput
}

input PostOrderByRelationAggregateInput {
  _count: SortOrder
}

input TagWhereUniqueInput {
  id: String
  name: String
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  type: EnumTagTypeNullableFilter
  color: StringNullableFilter
  isPostDefault: BoolNullableFilter
  isJobDefault: BoolNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  jobs: JobListRelationFilter
  posts: PostListRelationFilter
}

enum TagScalarFieldEnum {
  id
  type
  name
  color
  isPostDefault
  isJobDefault
  createdAt
  updatedAt
  deletedAt
}

input PostCategoryOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  slug: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  deletedAt: SortOrderInput
  posts: PostOrderByRelationAggregateInput
}

input PostCategoryWhereUniqueInput {
  id: String
  name: String
  slug: String
  AND: [PostCategoryWhereInput!]
  OR: [PostCategoryWhereInput!]
  NOT: [PostCategoryWhereInput!]
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  posts: PostListRelationFilter
}

enum PostCategoryScalarFieldEnum {
  id
  name
  slug
  createdAt
  updatedAt
  deletedAt
}

input JobTitleOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  isFeature: SortOrderInput
  createdAt: SortOrder
  updatedAt: SortOrder
  deletedAt: SortOrderInput
  jobs: JobOrderByRelationAggregateInput
  resumes: ResumeOrderByRelationAggregateInput
  workExperiences: WorkExperienceOrderByRelationAggregateInput
}

input JobTitleWhereUniqueInput {
  id: String
  name: String
  AND: [JobTitleWhereInput!]
  OR: [JobTitleWhereInput!]
  NOT: [JobTitleWhereInput!]
  isFeature: BoolNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  jobs: JobListRelationFilter
  resumes: ResumeListRelationFilter
  workExperiences: WorkExperienceListRelationFilter
}

enum JobTitleScalarFieldEnum {
  id
  name
  isFeature
  createdAt
  updatedAt
  deletedAt
}

input JobCategoryOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  slug: SortOrder
  isFeature: SortOrderInput
  isTheFive: SortOrderInput
  isDefault: SortOrderInput
  createdAt: SortOrder
  updatedAt: SortOrder
  deletedAt: SortOrderInput
  jobs: JobOrderByRelationAggregateInput
  companies: CompanyOrderByRelationAggregateInput
  posts: PostOrderByRelationAggregateInput
}

input JobCategoryWhereUniqueInput {
  id: String
  name: String
  slug: String
  AND: [JobCategoryWhereInput!]
  OR: [JobCategoryWhereInput!]
  NOT: [JobCategoryWhereInput!]
  isFeature: BoolNullableFilter
  isTheFive: BoolNullableFilter
  isDefault: BoolNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  jobs: JobListRelationFilter
  companies: CompanyListRelationFilter
  posts: PostListRelationFilter
}

enum JobCategoryScalarFieldEnum {
  id
  name
  slug
  isFeature
  isTheFive
  isDefault
  createdAt
  updatedAt
  deletedAt
}

input UserOrderByWithRelationInput {
  id: SortOrder
  avatarUrl: SortOrderInput
  avatarId: SortOrderInput
  firstName: SortOrder
  lastName: SortOrder
  email: SortOrder
  emailVerified: SortOrder
  password: SortOrder
  phoneNumber: SortOrderInput
  countryId: SortOrderInput
  workingPosition: SortOrderInput
  status: SortOrder
  signInProvider: SortOrderInput
  color: SortOrderInput
  role: SortOrder
  addressDetail: SortOrderInput
  verifyCode: SortOrderInput
  createdAt: SortOrder
  updatedAt: SortOrder
  deletedAt: SortOrderInput
  avatar: FileOrderByWithRelationInput
  country: CountryOrderByWithRelationInput
  social: SocialOrderByRelationAggregateInput
  resumes: ResumeOrderByRelationAggregateInput
  workExperiences: WorkExperienceOrderByRelationAggregateInput
  educations: EducationOrderByRelationAggregateInput
  projects: ProjectOrderByRelationAggregateInput
  applications: ApplicationOrderByRelationAggregateInput
  posts: PostOrderByRelationAggregateInput
  likes: LikePostOrderByRelationAggregateInput
  dislikes: DislikePostOrderByRelationAggregateInput
  comments: CommentOrderByRelationAggregateInput
  bookmarks: BookmarkPostOrderByRelationAggregateInput
  saveJobs: SaveJobOrderByRelationAggregateInput
  payments: PaymentOrderByRelationAggregateInput
  address: UsersOnCityOrderByRelationAggregateInput
  companies: CompanyOrderByRelationAggregateInput
  authorSettings: SettingOrderByRelationAggregateInput
  updatedBySettings: SettingOrderByRelationAggregateInput
}

input FileOrderByWithRelationInput {
  id: SortOrder
  url: SortOrder
  storageId: SortOrder
  provider: SortOrderInput
  metadata: SortOrderInput
  createdAt: SortOrder
  updatedAt: SortOrder
  deletedAt: SortOrderInput
  resumeTemplateId: SortOrderInput
  certificateId: SortOrderInput
  users: UserOrderByRelationAggregateInput
  companies: CompanyOrderByRelationAggregateInput
  resume: ResumeOrderByRelationAggregateInput
  projects: ProjectOrderByRelationAggregateInput
  posts: PostOrderByRelationAggregateInput
  company: CompanyOrderByRelationAggregateInput
  resumeTemplates: ResumeTemplateOrderByRelationAggregateInput
  certificate: CertificateOrderByWithRelationInput
}

input ProjectOrderByRelationAggregateInput {
  _count: SortOrder
}

input ResumeTemplateOrderByRelationAggregateInput {
  _count: SortOrder
}

input CertificateOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  deletedAt: SortOrderInput
  files: FileOrderByRelationAggregateInput
}

input FileOrderByRelationAggregateInput {
  _count: SortOrder
}

input SocialOrderByRelationAggregateInput {
  _count: SortOrder
}

input EducationOrderByRelationAggregateInput {
  _count: SortOrder
}

input ApplicationOrderByRelationAggregateInput {
  _count: SortOrder
}

input LikePostOrderByRelationAggregateInput {
  _count: SortOrder
}

input DislikePostOrderByRelationAggregateInput {
  _count: SortOrder
}

input CommentOrderByRelationAggregateInput {
  _count: SortOrder
}

input BookmarkPostOrderByRelationAggregateInput {
  _count: SortOrder
}

input SaveJobOrderByRelationAggregateInput {
  _count: SortOrder
}

input PaymentOrderByRelationAggregateInput {
  _count: SortOrder
}

input SettingOrderByRelationAggregateInput {
  _count: SortOrder
}

input UserWhereUniqueInput {
  id: String
  email: String
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  avatarUrl: StringNullableFilter
  avatarId: StringNullableFilter
  firstName: StringFilter
  lastName: StringFilter
  emailVerified: BoolFilter
  password: StringFilter
  phoneNumber: StringNullableFilter
  countryId: IntNullableFilter
  workingPosition: EnumWorkPositionNullableFilter
  status: EnumUserStatusFilter
  signInProvider: EnumSignInProviderNullableFilter
  color: StringNullableFilter
  role: EnumUserRoleFilter
  addressDetail: StringNullableFilter
  verifyCode: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  avatar: FileNullableRelationFilter
  country: CountryNullableRelationFilter
  social: SocialListRelationFilter
  resumes: ResumeListRelationFilter
  workExperiences: WorkExperienceListRelationFilter
  educations: EducationListRelationFilter
  projects: ProjectListRelationFilter
  applications: ApplicationListRelationFilter
  posts: PostListRelationFilter
  likes: LikePostListRelationFilter
  dislikes: DislikePostListRelationFilter
  comments: CommentListRelationFilter
  bookmarks: BookmarkPostListRelationFilter
  saveJobs: SaveJobListRelationFilter
  payments: PaymentListRelationFilter
  address: UsersOnCityListRelationFilter
  companies: CompanyListRelationFilter
  authorSettings: SettingListRelationFilter
  updatedBySettings: SettingListRelationFilter
}

enum UserScalarFieldEnum {
  id
  avatarUrl
  avatarId
  firstName
  lastName
  email
  emailVerified
  password
  phoneNumber
  countryId
  workingPosition
  status
  signInProvider
  color
  role
  addressDetail
  verifyCode
  createdAt
  updatedAt
  deletedAt
}

input SettingOrderByWithRelationInput {
  key: SortOrder
  type: SortOrder
  value: SortOrder
  authorId: SortOrderInput
  showWith: SortOrder
  updatedById: SortOrderInput
  createdAt: SortOrder
  updatedAt: SortOrder
  deletedAt: SortOrderInput
  author: UserOrderByWithRelationInput
  updatedBy: UserOrderByWithRelationInput
}

input SettingWhereUniqueInput {
  key_type: SettingKeyTypeCompoundUniqueInput
  AND: [SettingWhereInput!]
  OR: [SettingWhereInput!]
  NOT: [SettingWhereInput!]
  key: StringFilter
  type: StringFilter
  value: JsonFilter
  authorId: StringNullableFilter
  showWith: EnumUserRoleNullableListFilter
  updatedById: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  author: UserNullableRelationFilter
  updatedBy: UserNullableRelationFilter
}

input SettingKeyTypeCompoundUniqueInput {
  key: String!
  type: String!
}

enum SettingScalarFieldEnum {
  key
  type
  value
  authorId
  showWith
  updatedById
  createdAt
  updatedAt
  deletedAt
}

input CompanyOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  slug: SortOrder
  avatarId: SortOrderInput
  companyTypeId: SortOrderInput
  companySizeId: SortOrderInput
  addressDetail: SortOrder
  cityId: SortOrder
  description: SortOrderInput
  createdAt: SortOrder
  updatedAt: SortOrder
  deletedAt: SortOrderInput
  userId: SortOrderInput
  avatar: FileOrderByWithRelationInput
  type: CompanyTypeOrderByWithRelationInput
  size: CompanySizeOrderByWithRelationInput
  photos: FileOrderByRelationAggregateInput
  address: CityOrderByWithRelationInput
  industries: JobCategoryOrderByRelationAggregateInput
  social: SocialOrderByRelationAggregateInput
  jobs: JobOrderByRelationAggregateInput
  workExperiences: WorkExperienceOrderByRelationAggregateInput
  projects: ProjectOrderByRelationAggregateInput
  references: ReferenceOrderByRelationAggregateInput
  user: UserOrderByWithRelationInput
}

input CompanyTypeOrderByWithRelationInput {
  id: SortOrder
  key: SortOrder
  value: SortOrder
  isDefault: SortOrderInput
  createdAt: SortOrder
  updatedAt: SortOrder
  deletedAt: SortOrderInput
  companies: CompanyOrderByRelationAggregateInput
}

input CompanySizeOrderByWithRelationInput {
  id: SortOrder
  key: SortOrder
  value: SortOrder
  isDefault: SortOrderInput
  createdAt: SortOrder
  updatedAt: SortOrder
  deletedAt: SortOrderInput
  companies: CompanyOrderByRelationAggregateInput
}

input JobCategoryOrderByRelationAggregateInput {
  _count: SortOrder
}

input ReferenceOrderByRelationAggregateInput {
  _count: SortOrder
}

input CompanyWhereUniqueInput {
  id: String
  AND: [CompanyWhereInput!]
  OR: [CompanyWhereInput!]
  NOT: [CompanyWhereInput!]
  name: StringFilter
  slug: StringFilter
  avatarId: StringNullableFilter
  companyTypeId: StringNullableFilter
  companySizeId: StringNullableFilter
  addressDetail: StringFilter
  cityId: IntFilter
  description: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  userId: StringNullableFilter
  avatar: FileNullableRelationFilter
  type: CompanyTypeNullableRelationFilter
  size: CompanySizeNullableRelationFilter
  photos: FileListRelationFilter
  address: CityRelationFilter
  industries: JobCategoryListRelationFilter
  social: SocialListRelationFilter
  jobs: JobListRelationFilter
  workExperiences: WorkExperienceListRelationFilter
  projects: ProjectListRelationFilter
  references: ReferenceListRelationFilter
  user: UserNullableRelationFilter
}

enum CompanyScalarFieldEnum {
  id
  name
  slug
  avatarId
  companyTypeId
  companySizeId
  addressDetail
  cityId
  description
  createdAt
  updatedAt
  deletedAt
  userId
}

input PostOrderByWithRelationInput {
  id: SortOrder
  title: SortOrder
  content: SortOrder
  shareUrl: SortOrder
  metadata: SortOrderInput
  slug: SortOrder
  minRead: SortOrderInput
  jobCategoryId: SortOrderInput
  authorId: SortOrder
  thumbnailId: SortOrderInput
  createdAt: SortOrder
  updatedAt: SortOrder
  deletedAt: SortOrderInput
  jobCategory: JobCategoryOrderByWithRelationInput
  author: UserOrderByWithRelationInput
  thumbnail: FileOrderByWithRelationInput
  categories: PostCategoryOrderByRelationAggregateInput
  tags: TagOrderByRelationAggregateInput
  likes: LikePostOrderByRelationAggregateInput
  dislikes: DislikePostOrderByRelationAggregateInput
  comments: CommentOrderByRelationAggregateInput
  bookmarks: BookmarkPostOrderByRelationAggregateInput
}

input PostCategoryOrderByRelationAggregateInput {
  _count: SortOrder
}

input TagOrderByRelationAggregateInput {
  _count: SortOrder
}

input PostWhereUniqueInput {
  id: String
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  title: StringFilter
  content: StringFilter
  shareUrl: StringFilter
  metadata: JsonNullableFilter
  slug: StringFilter
  minRead: IntNullableFilter
  jobCategoryId: StringNullableFilter
  authorId: StringFilter
  thumbnailId: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  jobCategory: JobCategoryNullableRelationFilter
  author: UserRelationFilter
  thumbnail: FileNullableRelationFilter
  categories: PostCategoryListRelationFilter
  tags: TagListRelationFilter
  likes: LikePostListRelationFilter
  dislikes: DislikePostListRelationFilter
  comments: CommentListRelationFilter
  bookmarks: BookmarkPostListRelationFilter
}

enum PostScalarFieldEnum {
  id
  title
  content
  shareUrl
  metadata
  slug
  minRead
  jobCategoryId
  authorId
  thumbnailId
  createdAt
  updatedAt
  deletedAt
}

input JobOrderByWithRelationInput {
  id: SortOrder
  type: SortOrder
  level: SortOrder
  slug: SortOrder
  addressDetail: SortOrderInput
  jobTitleId: SortOrder
  jobCategoryId: SortOrder
  companyId: SortOrder
  cityId: SortOrder
  salary: SortOrder
  salaryMetadata: SortOrderInput
  description: SortOrder
  isBoot: SortOrderInput
  numberOfRecruits: SortOrder
  applicationDeadline: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  deletedAt: SortOrderInput
  address: CityOrderByWithRelationInput
  jobTitle: JobTitleOrderByWithRelationInput
  jobCategory: JobCategoryOrderByWithRelationInput
  company: CompanyOrderByWithRelationInput
  tags: TagOrderByRelationAggregateInput
  skills: SkillOrderByRelationAggregateInput
  applications: ApplicationOrderByRelationAggregateInput
  saveJobs: SaveJobOrderByRelationAggregateInput
}

input SkillOrderByRelationAggregateInput {
  _count: SortOrder
}

input JobWhereUniqueInput {
  id: String
  AND: [JobWhereInput!]
  OR: [JobWhereInput!]
  NOT: [JobWhereInput!]
  type: EnumJobTypeFilter
  level: EnumJobLevelFilter
  slug: StringFilter
  addressDetail: StringNullableFilter
  jobTitleId: StringFilter
  jobCategoryId: StringFilter
  companyId: StringFilter
  cityId: IntFilter
  salary: EnumJobSalaryFilter
  salaryMetadata: JsonNullableFilter
  description: StringFilter
  isBoot: BoolNullableFilter
  numberOfRecruits: IntFilter
  applicationDeadline: DateTimeFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  address: CityRelationFilter
  jobTitle: JobTitleRelationFilter
  jobCategory: JobCategoryRelationFilter
  company: CompanyRelationFilter
  tags: TagListRelationFilter
  skills: SkillListRelationFilter
  applications: ApplicationListRelationFilter
  saveJobs: SaveJobListRelationFilter
}

enum JobScalarFieldEnum {
  id
  type
  level
  slug
  addressDetail
  jobTitleId
  jobCategoryId
  companyId
  cityId
  salary
  salaryMetadata
  description
  isBoot
  numberOfRecruits
  applicationDeadline
  createdAt
  updatedAt
  deletedAt
}

input SkillOrderByWithRelationInput {
  id: SortOrder
  content: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  deletedAt: SortOrderInput
  resumeId: SortOrderInput
  resume: ResumeOrderByWithRelationInput
  projects: ProjectOrderByRelationAggregateInput
  jobs: JobOrderByRelationAggregateInput
}

input ResumeOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  fullName: SortOrderInput
  email: SortOrderInput
  addressDetail: SortOrderInput
  description: SortOrder
  isSummary: SortOrderInput
  createdAt: SortOrder
  updatedAt: SortOrder
  deletedAt: SortOrderInput
  languageId: SortOrder
  jobTitleId: SortOrder
  userId: SortOrder
  fileId: SortOrderInput
  cityId: SortOrderInput
  user: UserOrderByWithRelationInput
  avatar: FileOrderByWithRelationInput
  address: CityOrderByWithRelationInput
  language: LanguageOrderByWithRelationInput
  jobTitle: JobTitleOrderByWithRelationInput
  applications: ApplicationOrderByRelationAggregateInput
  workExperiences: WorkExperienceOrderByRelationAggregateInput
  educations: EducationOrderByRelationAggregateInput
  skills: SkillOrderByRelationAggregateInput
  projects: ProjectOrderByRelationAggregateInput
  socials: SocialOrderByRelationAggregateInput
  languageSkills: LanguageSkillOrderByRelationAggregateInput
  activities: ActivityOrderByRelationAggregateInput
}

input LanguageOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  locale: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  deletedAt: SortOrderInput
  resumes: ResumeOrderByRelationAggregateInput
  languageSkill: LanguageSkillOrderByRelationAggregateInput
}

input LanguageSkillOrderByRelationAggregateInput {
  _count: SortOrder
}

input ActivityOrderByRelationAggregateInput {
  _count: SortOrder
}

input SkillWhereUniqueInput {
  id: String
  AND: [SkillWhereInput!]
  OR: [SkillWhereInput!]
  NOT: [SkillWhereInput!]
  content: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  resumeId: StringNullableFilter
  resume: ResumeNullableRelationFilter
  projects: ProjectListRelationFilter
  jobs: JobListRelationFilter
}

enum SkillScalarFieldEnum {
  id
  content
  createdAt
  updatedAt
  deletedAt
  resumeId
}

input CompanyTypeWhereUniqueInput {
  id: String
  key: String
  value: String
  AND: [CompanyTypeWhereInput!]
  OR: [CompanyTypeWhereInput!]
  NOT: [CompanyTypeWhereInput!]
  isDefault: BoolNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  companies: CompanyListRelationFilter
}

enum CompanyTypeScalarFieldEnum {
  id
  key
  value
  isDefault
  createdAt
  updatedAt
  deletedAt
}

input CompanySizeWhereUniqueInput {
  id: String
  key: String
  value: String
  AND: [CompanySizeWhereInput!]
  OR: [CompanySizeWhereInput!]
  NOT: [CompanySizeWhereInput!]
  isDefault: BoolNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  companies: CompanyListRelationFilter
}

enum CompanySizeScalarFieldEnum {
  id
  key
  value
  isDefault
  createdAt
  updatedAt
  deletedAt
}

type Mutation {
  create_tag(data: TagCreateInput!): Tag!
  update_tag(data: TagUpdateInput!, where: TagWhereUniqueInput!): Tag!
  delete_tag(where: TagWhereUniqueInput!): Tag!
  create_post_category(data: PostCategoryCreateInput!): PostCategory!
  update_post_category(data: PostCategoryUpdateInput!, where: PostCategoryWhereUniqueInput!): PostCategory!
  delete_post_category(where: PostCategoryWhereUniqueInput!): PostCategory!
  create_job_title(data: JobTitleCreateInput!): JobTitle!
  update_job_title(data: JobTitleUpdateInput!, where: JobTitleWhereUniqueInput!): JobTitle!
  delete_job_title(where: JobTitleWhereUniqueInput!): JobTitle!
  create_job_category(data: JobCategoryCreateInput!): JobCategory!
  update_job_category(data: JobCategoryUpdateInput!, where: JobCategoryWhereUniqueInput!): JobCategory!
  delete_job_category(where: JobCategoryWhereUniqueInput!): JobCategory!
  create_setting(data: SettingCreateInput!): Setting!
  update_setting(data: SettingUpdateInput!, where: SettingWhereUniqueInput!): Setting!
  delete_setting(where: SettingWhereUniqueInput!): Setting!
  auth_login(email: String!, password: String!): LoginResult!
  auth_login_with_google(idToken: String!, role: UserRoleWithoutAdmin = employee, provider: SignInProvider = google, countryCode: String = "VI"): LoginResult!
  auth_register(email: String!, password: String!, role: String!, countryCode: String = "VI"): UserOnly!
  auth_employee_register(email: String!, password: String!, firstName: String!, lastName: String!, countryCode: String = "VI", phoneNumber: String!): UserOnly!
  auth_employer_register(email: String!, password: String!, firstName: String!, lastName: String!, countryCode: String = "VI", phoneNumber: String!, companyName: String!, industryIds: [String!]!, companyTypeId: String!, cityId: Float!, addressDetail: String!): UserOnly!
  auth_verify_account(verifyCode: String!, userId: String!): UserOnly!
  auth_resend_verify_code(userId: String!, email: String!): UserOnly!
  auth_request_forgot_password(email: String!): Boolean!
  auth_saved_password(verifyCode: String!, userId: String!, email: String!, password: String!): UserOnly!
  auth_refresh_token(refreshToken: String!): RefreshTokenResult!
  create_company(data: CompanyCreateInput!): Company!
  update_company(data: CompanyUpdateInput!, where: CompanyWhereUniqueInput!): Company!
  delete_company(where: CompanyWhereUniqueInput!): Company!
  create_post(data: PostCreateInput!): Post!
  update_post(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post!
  delete_post(where: PostWhereUniqueInput!): Post!
  create_job(data: JobCreateInput!): Job!
  update_job(data: JobUpdateInput!, where: JobWhereUniqueInput!): Job!
  delete_job(where: JobWhereUniqueInput!): Job!
  create_skill(data: SkillCreateInput!): Skill!
  update_skill(data: SkillUpdateInput!, where: SkillWhereUniqueInput!): Skill!
  delete_skill(where: SkillWhereUniqueInput!): Skill!
  create_company_type(data: CompanyTypeCreateInput!): CompanyType!
  update_company_type(data: CompanyTypeUpdateInput!, where: CompanyTypeWhereUniqueInput!): CompanyType!
  delete_company_type(where: CompanyTypeWhereUniqueInput!): CompanyType!
  create_company_size(data: CompanySizeCreateInput!): CompanySize!
  update_company_size(data: CompanySizeUpdateInput!, where: CompanySizeWhereUniqueInput!): CompanySize!
  delete_company_size(where: CompanySizeWhereUniqueInput!): CompanySize!
}

input TagCreateInput {
  id: String
  type: TagType
  name: String!
  color: String
  isPostDefault: Boolean
  isJobDefault: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  jobs: JobCreateNestedManyWithoutTagsInput
  posts: PostCreateNestedManyWithoutTagsInput
}

input JobCreateNestedManyWithoutTagsInput {
  create: [JobCreateWithoutTagsInput!]
  connectOrCreate: [JobCreateOrConnectWithoutTagsInput!]
  connect: [JobWhereUniqueInput!]
}

input JobCreateWithoutTagsInput {
  id: String
  type: JobType!
  level: JobLevel!
  slug: String!
  addressDetail: String
  salary: JobSalary
  salaryMetadata: JSON
  description: String!
  isBoot: Boolean
  numberOfRecruits: Int
  applicationDeadline: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  address: CityCreateNestedOneWithoutJobsInput!
  jobTitle: JobTitleCreateNestedOneWithoutJobsInput!
  jobCategory: JobCategoryCreateNestedOneWithoutJobsInput!
  company: CompanyCreateNestedOneWithoutJobsInput!
  skills: SkillCreateNestedManyWithoutJobsInput
  applications: ApplicationCreateNestedManyWithoutJobInput
  saveJobs: SaveJobCreateNestedManyWithoutJobInput
}

input CityCreateNestedOneWithoutJobsInput {
  create: CityCreateWithoutJobsInput
  connectOrCreate: CityCreateOrConnectWithoutJobsInput
  connect: CityWhereUniqueInput
}

input CityCreateWithoutJobsInput {
  name: String!
  stateCode: String
  stateName: String
  countryCode: String
  countryName: String
  latitude: String
  longitude: String
  wikiDataId: String!
  state: StateCreateNestedOneWithoutCitiesInput
  country: CountryCreateNestedOneWithoutCitiesInput
  users: UsersOnCityCreateNestedManyWithoutCityInput
  companies: CompanyCreateNestedManyWithoutAddressInput
  resumes: ResumeCreateNestedManyWithoutAddressInput
  workExperiences: WorkExperienceCreateNestedManyWithoutAddressInput
}

input StateCreateNestedOneWithoutCitiesInput {
  create: StateCreateWithoutCitiesInput
  connectOrCreate: StateCreateOrConnectWithoutCitiesInput
  connect: StateWhereUniqueInput
}

input StateCreateWithoutCitiesInput {
  name: String!
  countryCode: String
  countryName: String
  stateCode: String
  type: String
  latitude: String
  longitude: String
  country: CountryCreateNestedOneWithoutStatesInput
}

input CountryCreateNestedOneWithoutStatesInput {
  create: CountryCreateWithoutStatesInput
  connectOrCreate: CountryCreateOrConnectWithoutStatesInput
  connect: CountryWhereUniqueInput
}

input CountryCreateWithoutStatesInput {
  name: String!
  iso3: String!
  iso2: String!
  numericCode: String!
  phoneCode: String!
  capital: String!
  currency: String!
  currencyName: String!
  currencySymbol: String!
  tld: String!
  native: String
  region: String
  regionId: String
  subregion: String
  subregionId: String
  nationality: String!
  timezones: JSON!
  translations: JSON!
  latitude: String!
  longitude: String!
  emoji: String!
  emojiU: String!
  svg: String
  cities: CityCreateNestedManyWithoutCountryInput
  users: UserCreateNestedManyWithoutCountryInput
}

input CityCreateNestedManyWithoutCountryInput {
  create: [CityCreateWithoutCountryInput!]
  connectOrCreate: [CityCreateOrConnectWithoutCountryInput!]
  createMany: CityCreateManyCountryInputEnvelope
  connect: [CityWhereUniqueInput!]
}

input CityCreateWithoutCountryInput {
  name: String!
  stateCode: String
  stateName: String
  countryCode: String
  countryName: String
  latitude: String
  longitude: String
  wikiDataId: String!
  state: StateCreateNestedOneWithoutCitiesInput
  users: UsersOnCityCreateNestedManyWithoutCityInput
  companies: CompanyCreateNestedManyWithoutAddressInput
  jobs: JobCreateNestedManyWithoutAddressInput
  resumes: ResumeCreateNestedManyWithoutAddressInput
  workExperiences: WorkExperienceCreateNestedManyWithoutAddressInput
}

input UsersOnCityCreateNestedManyWithoutCityInput {
  create: [UsersOnCityCreateWithoutCityInput!]
  connectOrCreate: [UsersOnCityCreateOrConnectWithoutCityInput!]
  createMany: UsersOnCityCreateManyCityInputEnvelope
  connect: [UsersOnCityWhereUniqueInput!]
}

input UsersOnCityCreateWithoutCityInput {
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  user: UserCreateNestedOneWithoutAddressInput!
}

input UserCreateNestedOneWithoutAddressInput {
  create: UserCreateWithoutAddressInput
  connectOrCreate: UserCreateOrConnectWithoutAddressInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutAddressInput {
  id: String
  avatarUrl: String
  firstName: String!
  lastName: String!
  email: String!
  emailVerified: Boolean
  password: String!
  phoneNumber: String
  workingPosition: WorkPosition
  status: UserStatus
  signInProvider: SignInProvider
  color: String
  role: UserRole
  addressDetail: String
  verifyCode: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  avatar: FileCreateNestedOneWithoutUsersInput
  country: CountryCreateNestedOneWithoutUsersInput
  social: SocialCreateNestedManyWithoutUserInput
  resumes: ResumeCreateNestedManyWithoutUserInput
  workExperiences: WorkExperienceCreateNestedManyWithoutUserInput
  educations: EducationCreateNestedManyWithoutUserInput
  projects: ProjectCreateNestedManyWithoutUserInput
  applications: ApplicationCreateNestedManyWithoutCandidateInput
  posts: PostCreateNestedManyWithoutAuthorInput
  likes: LikePostCreateNestedManyWithoutUserInput
  dislikes: DislikePostCreateNestedManyWithoutUserInput
  comments: CommentCreateNestedManyWithoutUserInput
  bookmarks: BookmarkPostCreateNestedManyWithoutUserInput
  saveJobs: SaveJobCreateNestedManyWithoutUserInput
  payments: PaymentCreateNestedManyWithoutUserInput
  companies: CompanyCreateNestedManyWithoutUserInput
  authorSettings: SettingCreateNestedManyWithoutAuthorInput
  updatedBySettings: SettingCreateNestedManyWithoutUpdatedByInput
}

input FileCreateNestedOneWithoutUsersInput {
  create: FileCreateWithoutUsersInput
  connectOrCreate: FileCreateOrConnectWithoutUsersInput
  connect: FileWhereUniqueInput
}

input FileCreateWithoutUsersInput {
  id: String
  url: String!
  storageId: String!
  provider: FileProvider
  metadata: JSON
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  resumeTemplateId: String
  companies: CompanyCreateNestedManyWithoutPhotosInput
  resume: ResumeCreateNestedManyWithoutAvatarInput
  projects: ProjectCreateNestedManyWithoutThumbnailInput
  posts: PostCreateNestedManyWithoutThumbnailInput
  company: CompanyCreateNestedManyWithoutAvatarInput
  resumeTemplates: ResumeTemplateCreateNestedManyWithoutFileInput
  certificate: CertificateCreateNestedOneWithoutFilesInput
}

input CompanyCreateNestedManyWithoutPhotosInput {
  create: [CompanyCreateWithoutPhotosInput!]
  connectOrCreate: [CompanyCreateOrConnectWithoutPhotosInput!]
  connect: [CompanyWhereUniqueInput!]
}

input CompanyCreateWithoutPhotosInput {
  id: String
  name: String!
  slug: String!
  addressDetail: String!
  description: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  avatar: FileCreateNestedOneWithoutCompanyInput
  type: CompanyTypeCreateNestedOneWithoutCompaniesInput
  size: CompanySizeCreateNestedOneWithoutCompaniesInput
  address: CityCreateNestedOneWithoutCompaniesInput!
  industries: JobCategoryCreateNestedManyWithoutCompaniesInput
  social: SocialCreateNestedManyWithoutCompanyInput
  jobs: JobCreateNestedManyWithoutCompanyInput
  workExperiences: WorkExperienceCreateNestedManyWithoutCompanyInput
  projects: ProjectCreateNestedManyWithoutCompanyInput
  references: ReferenceCreateNestedManyWithoutCompanyInput
  user: UserCreateNestedOneWithoutCompaniesInput
}

input FileCreateNestedOneWithoutCompanyInput {
  create: FileCreateWithoutCompanyInput
  connectOrCreate: FileCreateOrConnectWithoutCompanyInput
  connect: FileWhereUniqueInput
}

input FileCreateWithoutCompanyInput {
  id: String
  url: String!
  storageId: String!
  provider: FileProvider
  metadata: JSON
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  resumeTemplateId: String
  users: UserCreateNestedManyWithoutAvatarInput
  companies: CompanyCreateNestedManyWithoutPhotosInput
  resume: ResumeCreateNestedManyWithoutAvatarInput
  projects: ProjectCreateNestedManyWithoutThumbnailInput
  posts: PostCreateNestedManyWithoutThumbnailInput
  resumeTemplates: ResumeTemplateCreateNestedManyWithoutFileInput
  certificate: CertificateCreateNestedOneWithoutFilesInput
}

input UserCreateNestedManyWithoutAvatarInput {
  create: [UserCreateWithoutAvatarInput!]
  connectOrCreate: [UserCreateOrConnectWithoutAvatarInput!]
  createMany: UserCreateManyAvatarInputEnvelope
  connect: [UserWhereUniqueInput!]
}

input UserCreateWithoutAvatarInput {
  id: String
  avatarUrl: String
  firstName: String!
  lastName: String!
  email: String!
  emailVerified: Boolean
  password: String!
  phoneNumber: String
  workingPosition: WorkPosition
  status: UserStatus
  signInProvider: SignInProvider
  color: String
  role: UserRole
  addressDetail: String
  verifyCode: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  country: CountryCreateNestedOneWithoutUsersInput
  social: SocialCreateNestedManyWithoutUserInput
  resumes: ResumeCreateNestedManyWithoutUserInput
  workExperiences: WorkExperienceCreateNestedManyWithoutUserInput
  educations: EducationCreateNestedManyWithoutUserInput
  projects: ProjectCreateNestedManyWithoutUserInput
  applications: ApplicationCreateNestedManyWithoutCandidateInput
  posts: PostCreateNestedManyWithoutAuthorInput
  likes: LikePostCreateNestedManyWithoutUserInput
  dislikes: DislikePostCreateNestedManyWithoutUserInput
  comments: CommentCreateNestedManyWithoutUserInput
  bookmarks: BookmarkPostCreateNestedManyWithoutUserInput
  saveJobs: SaveJobCreateNestedManyWithoutUserInput
  payments: PaymentCreateNestedManyWithoutUserInput
  address: UsersOnCityCreateNestedManyWithoutUserInput
  companies: CompanyCreateNestedManyWithoutUserInput
  authorSettings: SettingCreateNestedManyWithoutAuthorInput
  updatedBySettings: SettingCreateNestedManyWithoutUpdatedByInput
}

input CountryCreateNestedOneWithoutUsersInput {
  create: CountryCreateWithoutUsersInput
  connectOrCreate: CountryCreateOrConnectWithoutUsersInput
  connect: CountryWhereUniqueInput
}

input CountryCreateWithoutUsersInput {
  name: String!
  iso3: String!
  iso2: String!
  numericCode: String!
  phoneCode: String!
  capital: String!
  currency: String!
  currencyName: String!
  currencySymbol: String!
  tld: String!
  native: String
  region: String
  regionId: String
  subregion: String
  subregionId: String
  nationality: String!
  timezones: JSON!
  translations: JSON!
  latitude: String!
  longitude: String!
  emoji: String!
  emojiU: String!
  svg: String
  states: StateCreateNestedManyWithoutCountryInput
  cities: CityCreateNestedManyWithoutCountryInput
}

input StateCreateNestedManyWithoutCountryInput {
  create: [StateCreateWithoutCountryInput!]
  connectOrCreate: [StateCreateOrConnectWithoutCountryInput!]
  createMany: StateCreateManyCountryInputEnvelope
  connect: [StateWhereUniqueInput!]
}

input StateCreateWithoutCountryInput {
  name: String!
  countryCode: String
  countryName: String
  stateCode: String
  type: String
  latitude: String
  longitude: String
  cities: CityCreateNestedManyWithoutStateInput
}

input CityCreateNestedManyWithoutStateInput {
  create: [CityCreateWithoutStateInput!]
  connectOrCreate: [CityCreateOrConnectWithoutStateInput!]
  createMany: CityCreateManyStateInputEnvelope
  connect: [CityWhereUniqueInput!]
}

input CityCreateWithoutStateInput {
  name: String!
  stateCode: String
  stateName: String
  countryCode: String
  countryName: String
  latitude: String
  longitude: String
  wikiDataId: String!
  country: CountryCreateNestedOneWithoutCitiesInput
  users: UsersOnCityCreateNestedManyWithoutCityInput
  companies: CompanyCreateNestedManyWithoutAddressInput
  jobs: JobCreateNestedManyWithoutAddressInput
  resumes: ResumeCreateNestedManyWithoutAddressInput
  workExperiences: WorkExperienceCreateNestedManyWithoutAddressInput
}

input CountryCreateNestedOneWithoutCitiesInput {
  create: CountryCreateWithoutCitiesInput
  connectOrCreate: CountryCreateOrConnectWithoutCitiesInput
  connect: CountryWhereUniqueInput
}

input CountryCreateWithoutCitiesInput {
  name: String!
  iso3: String!
  iso2: String!
  numericCode: String!
  phoneCode: String!
  capital: String!
  currency: String!
  currencyName: String!
  currencySymbol: String!
  tld: String!
  native: String
  region: String
  regionId: String
  subregion: String
  subregionId: String
  nationality: String!
  timezones: JSON!
  translations: JSON!
  latitude: String!
  longitude: String!
  emoji: String!
  emojiU: String!
  svg: String
  states: StateCreateNestedManyWithoutCountryInput
  users: UserCreateNestedManyWithoutCountryInput
}

input UserCreateNestedManyWithoutCountryInput {
  create: [UserCreateWithoutCountryInput!]
  connectOrCreate: [UserCreateOrConnectWithoutCountryInput!]
  createMany: UserCreateManyCountryInputEnvelope
  connect: [UserWhereUniqueInput!]
}

input UserCreateWithoutCountryInput {
  id: String
  avatarUrl: String
  firstName: String!
  lastName: String!
  email: String!
  emailVerified: Boolean
  password: String!
  phoneNumber: String
  workingPosition: WorkPosition
  status: UserStatus
  signInProvider: SignInProvider
  color: String
  role: UserRole
  addressDetail: String
  verifyCode: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  avatar: FileCreateNestedOneWithoutUsersInput
  social: SocialCreateNestedManyWithoutUserInput
  resumes: ResumeCreateNestedManyWithoutUserInput
  workExperiences: WorkExperienceCreateNestedManyWithoutUserInput
  educations: EducationCreateNestedManyWithoutUserInput
  projects: ProjectCreateNestedManyWithoutUserInput
  applications: ApplicationCreateNestedManyWithoutCandidateInput
  posts: PostCreateNestedManyWithoutAuthorInput
  likes: LikePostCreateNestedManyWithoutUserInput
  dislikes: DislikePostCreateNestedManyWithoutUserInput
  comments: CommentCreateNestedManyWithoutUserInput
  bookmarks: BookmarkPostCreateNestedManyWithoutUserInput
  saveJobs: SaveJobCreateNestedManyWithoutUserInput
  payments: PaymentCreateNestedManyWithoutUserInput
  address: UsersOnCityCreateNestedManyWithoutUserInput
  companies: CompanyCreateNestedManyWithoutUserInput
  authorSettings: SettingCreateNestedManyWithoutAuthorInput
  updatedBySettings: SettingCreateNestedManyWithoutUpdatedByInput
}

input SocialCreateNestedManyWithoutUserInput {
  create: [SocialCreateWithoutUserInput!]
  connectOrCreate: [SocialCreateOrConnectWithoutUserInput!]
  createMany: SocialCreateManyUserInputEnvelope
  connect: [SocialWhereUniqueInput!]
}

input SocialCreateWithoutUserInput {
  id: String
  type: SocialType
  url: String!
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  company: CompanyCreateNestedOneWithoutSocialInput
  resume: ResumeCreateNestedOneWithoutSocialsInput
}

input CompanyCreateNestedOneWithoutSocialInput {
  create: CompanyCreateWithoutSocialInput
  connectOrCreate: CompanyCreateOrConnectWithoutSocialInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreateWithoutSocialInput {
  id: String
  name: String!
  slug: String!
  addressDetail: String!
  description: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  avatar: FileCreateNestedOneWithoutCompanyInput
  type: CompanyTypeCreateNestedOneWithoutCompaniesInput
  size: CompanySizeCreateNestedOneWithoutCompaniesInput
  photos: FileCreateNestedManyWithoutCompaniesInput
  address: CityCreateNestedOneWithoutCompaniesInput!
  industries: JobCategoryCreateNestedManyWithoutCompaniesInput
  jobs: JobCreateNestedManyWithoutCompanyInput
  workExperiences: WorkExperienceCreateNestedManyWithoutCompanyInput
  projects: ProjectCreateNestedManyWithoutCompanyInput
  references: ReferenceCreateNestedManyWithoutCompanyInput
  user: UserCreateNestedOneWithoutCompaniesInput
}

input CompanyTypeCreateNestedOneWithoutCompaniesInput {
  create: CompanyTypeCreateWithoutCompaniesInput
  connectOrCreate: CompanyTypeCreateOrConnectWithoutCompaniesInput
  connect: CompanyTypeWhereUniqueInput
}

input CompanyTypeCreateWithoutCompaniesInput {
  id: String
  key: String!
  value: String!
  isDefault: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

input CompanyTypeCreateOrConnectWithoutCompaniesInput {
  where: CompanyTypeWhereUniqueInput!
  create: CompanyTypeCreateWithoutCompaniesInput!
}

input CompanySizeCreateNestedOneWithoutCompaniesInput {
  create: CompanySizeCreateWithoutCompaniesInput
  connectOrCreate: CompanySizeCreateOrConnectWithoutCompaniesInput
  connect: CompanySizeWhereUniqueInput
}

input CompanySizeCreateWithoutCompaniesInput {
  id: String
  key: String!
  value: String!
  isDefault: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

input CompanySizeCreateOrConnectWithoutCompaniesInput {
  where: CompanySizeWhereUniqueInput!
  create: CompanySizeCreateWithoutCompaniesInput!
}

input FileCreateNestedManyWithoutCompaniesInput {
  create: [FileCreateWithoutCompaniesInput!]
  connectOrCreate: [FileCreateOrConnectWithoutCompaniesInput!]
  connect: [FileWhereUniqueInput!]
}

input FileCreateWithoutCompaniesInput {
  id: String
  url: String!
  storageId: String!
  provider: FileProvider
  metadata: JSON
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  resumeTemplateId: String
  users: UserCreateNestedManyWithoutAvatarInput
  resume: ResumeCreateNestedManyWithoutAvatarInput
  projects: ProjectCreateNestedManyWithoutThumbnailInput
  posts: PostCreateNestedManyWithoutThumbnailInput
  company: CompanyCreateNestedManyWithoutAvatarInput
  resumeTemplates: ResumeTemplateCreateNestedManyWithoutFileInput
  certificate: CertificateCreateNestedOneWithoutFilesInput
}

input ResumeCreateNestedManyWithoutAvatarInput {
  create: [ResumeCreateWithoutAvatarInput!]
  connectOrCreate: [ResumeCreateOrConnectWithoutAvatarInput!]
  createMany: ResumeCreateManyAvatarInputEnvelope
  connect: [ResumeWhereUniqueInput!]
}

input ResumeCreateWithoutAvatarInput {
  id: String
  name: String!
  fullName: String
  email: String
  addressDetail: String
  description: String!
  isSummary: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  user: UserCreateNestedOneWithoutResumesInput!
  address: CityCreateNestedOneWithoutResumesInput
  language: LanguageCreateNestedOneWithoutResumesInput
  jobTitle: JobTitleCreateNestedOneWithoutResumesInput!
  applications: ApplicationCreateNestedManyWithoutResumeInput
  workExperiences: WorkExperienceCreateNestedManyWithoutResumeInput
  educations: EducationCreateNestedManyWithoutResumeInput
  skills: SkillCreateNestedManyWithoutResumeInput
  projects: ProjectCreateNestedManyWithoutResumeInput
  socials: SocialCreateNestedManyWithoutResumeInput
  languageSkills: LanguageSkillCreateNestedManyWithoutResumeInput
  activities: ActivityCreateNestedManyWithoutResumeInput
}

input UserCreateNestedOneWithoutResumesInput {
  create: UserCreateWithoutResumesInput
  connectOrCreate: UserCreateOrConnectWithoutResumesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutResumesInput {
  id: String
  avatarUrl: String
  firstName: String!
  lastName: String!
  email: String!
  emailVerified: Boolean
  password: String!
  phoneNumber: String
  workingPosition: WorkPosition
  status: UserStatus
  signInProvider: SignInProvider
  color: String
  role: UserRole
  addressDetail: String
  verifyCode: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  avatar: FileCreateNestedOneWithoutUsersInput
  country: CountryCreateNestedOneWithoutUsersInput
  social: SocialCreateNestedManyWithoutUserInput
  workExperiences: WorkExperienceCreateNestedManyWithoutUserInput
  educations: EducationCreateNestedManyWithoutUserInput
  projects: ProjectCreateNestedManyWithoutUserInput
  applications: ApplicationCreateNestedManyWithoutCandidateInput
  posts: PostCreateNestedManyWithoutAuthorInput
  likes: LikePostCreateNestedManyWithoutUserInput
  dislikes: DislikePostCreateNestedManyWithoutUserInput
  comments: CommentCreateNestedManyWithoutUserInput
  bookmarks: BookmarkPostCreateNestedManyWithoutUserInput
  saveJobs: SaveJobCreateNestedManyWithoutUserInput
  payments: PaymentCreateNestedManyWithoutUserInput
  address: UsersOnCityCreateNestedManyWithoutUserInput
  companies: CompanyCreateNestedManyWithoutUserInput
  authorSettings: SettingCreateNestedManyWithoutAuthorInput
  updatedBySettings: SettingCreateNestedManyWithoutUpdatedByInput
}

input WorkExperienceCreateNestedManyWithoutUserInput {
  create: [WorkExperienceCreateWithoutUserInput!]
  connectOrCreate: [WorkExperienceCreateOrConnectWithoutUserInput!]
  createMany: WorkExperienceCreateManyUserInputEnvelope
  connect: [WorkExperienceWhereUniqueInput!]
}

input WorkExperienceCreateWithoutUserInput {
  id: String
  isFreelancer: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  startAt: DateTime!
  endAt: DateTime
  description: String!
  jobTitle: JobTitleCreateNestedOneWithoutWorkExperiencesInput!
  company: CompanyCreateNestedOneWithoutWorkExperiencesInput
  resume: ResumeCreateNestedOneWithoutWorkExperiencesInput
  address: CityCreateNestedOneWithoutWorkExperiencesInput
}

input JobTitleCreateNestedOneWithoutWorkExperiencesInput {
  create: JobTitleCreateWithoutWorkExperiencesInput
  connectOrCreate: JobTitleCreateOrConnectWithoutWorkExperiencesInput
  connect: JobTitleWhereUniqueInput
}

input JobTitleCreateWithoutWorkExperiencesInput {
  id: String
  name: String!
  isFeature: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  jobs: JobCreateNestedManyWithoutJobTitleInput
  resumes: ResumeCreateNestedManyWithoutJobTitleInput
}

input JobCreateNestedManyWithoutJobTitleInput {
  create: [JobCreateWithoutJobTitleInput!]
  connectOrCreate: [JobCreateOrConnectWithoutJobTitleInput!]
  createMany: JobCreateManyJobTitleInputEnvelope
  connect: [JobWhereUniqueInput!]
}

input JobCreateWithoutJobTitleInput {
  id: String
  type: JobType!
  level: JobLevel!
  slug: String!
  addressDetail: String
  salary: JobSalary
  salaryMetadata: JSON
  description: String!
  isBoot: Boolean
  numberOfRecruits: Int
  applicationDeadline: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  address: CityCreateNestedOneWithoutJobsInput!
  jobCategory: JobCategoryCreateNestedOneWithoutJobsInput!
  company: CompanyCreateNestedOneWithoutJobsInput!
  tags: TagCreateNestedManyWithoutJobsInput
  skills: SkillCreateNestedManyWithoutJobsInput
  applications: ApplicationCreateNestedManyWithoutJobInput
  saveJobs: SaveJobCreateNestedManyWithoutJobInput
}

input JobCategoryCreateNestedOneWithoutJobsInput {
  create: JobCategoryCreateWithoutJobsInput
  connectOrCreate: JobCategoryCreateOrConnectWithoutJobsInput
  connect: JobCategoryWhereUniqueInput
}

input JobCategoryCreateWithoutJobsInput {
  id: String
  name: String!
  slug: String!
  isFeature: Boolean
  isTheFive: Boolean
  isDefault: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  companies: CompanyCreateNestedManyWithoutIndustriesInput
  posts: PostCreateNestedManyWithoutJobCategoryInput
}

input CompanyCreateNestedManyWithoutIndustriesInput {
  create: [CompanyCreateWithoutIndustriesInput!]
  connectOrCreate: [CompanyCreateOrConnectWithoutIndustriesInput!]
  connect: [CompanyWhereUniqueInput!]
}

input CompanyCreateWithoutIndustriesInput {
  id: String
  name: String!
  slug: String!
  addressDetail: String!
  description: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  avatar: FileCreateNestedOneWithoutCompanyInput
  type: CompanyTypeCreateNestedOneWithoutCompaniesInput
  size: CompanySizeCreateNestedOneWithoutCompaniesInput
  photos: FileCreateNestedManyWithoutCompaniesInput
  address: CityCreateNestedOneWithoutCompaniesInput!
  social: SocialCreateNestedManyWithoutCompanyInput
  jobs: JobCreateNestedManyWithoutCompanyInput
  workExperiences: WorkExperienceCreateNestedManyWithoutCompanyInput
  projects: ProjectCreateNestedManyWithoutCompanyInput
  references: ReferenceCreateNestedManyWithoutCompanyInput
  user: UserCreateNestedOneWithoutCompaniesInput
}

input CityCreateNestedOneWithoutCompaniesInput {
  create: CityCreateWithoutCompaniesInput
  connectOrCreate: CityCreateOrConnectWithoutCompaniesInput
  connect: CityWhereUniqueInput
}

input CityCreateWithoutCompaniesInput {
  name: String!
  stateCode: String
  stateName: String
  countryCode: String
  countryName: String
  latitude: String
  longitude: String
  wikiDataId: String!
  state: StateCreateNestedOneWithoutCitiesInput
  country: CountryCreateNestedOneWithoutCitiesInput
  users: UsersOnCityCreateNestedManyWithoutCityInput
  jobs: JobCreateNestedManyWithoutAddressInput
  resumes: ResumeCreateNestedManyWithoutAddressInput
  workExperiences: WorkExperienceCreateNestedManyWithoutAddressInput
}

input JobCreateNestedManyWithoutAddressInput {
  create: [JobCreateWithoutAddressInput!]
  connectOrCreate: [JobCreateOrConnectWithoutAddressInput!]
  createMany: JobCreateManyAddressInputEnvelope
  connect: [JobWhereUniqueInput!]
}

input JobCreateWithoutAddressInput {
  id: String
  type: JobType!
  level: JobLevel!
  slug: String!
  addressDetail: String
  salary: JobSalary
  salaryMetadata: JSON
  description: String!
  isBoot: Boolean
  numberOfRecruits: Int
  applicationDeadline: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  jobTitle: JobTitleCreateNestedOneWithoutJobsInput!
  jobCategory: JobCategoryCreateNestedOneWithoutJobsInput!
  company: CompanyCreateNestedOneWithoutJobsInput!
  tags: TagCreateNestedManyWithoutJobsInput
  skills: SkillCreateNestedManyWithoutJobsInput
  applications: ApplicationCreateNestedManyWithoutJobInput
  saveJobs: SaveJobCreateNestedManyWithoutJobInput
}

input JobTitleCreateNestedOneWithoutJobsInput {
  create: JobTitleCreateWithoutJobsInput
  connectOrCreate: JobTitleCreateOrConnectWithoutJobsInput
  connect: JobTitleWhereUniqueInput
}

input JobTitleCreateWithoutJobsInput {
  id: String
  name: String!
  isFeature: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  resumes: ResumeCreateNestedManyWithoutJobTitleInput
  workExperiences: WorkExperienceCreateNestedManyWithoutJobTitleInput
}

input ResumeCreateNestedManyWithoutJobTitleInput {
  create: [ResumeCreateWithoutJobTitleInput!]
  connectOrCreate: [ResumeCreateOrConnectWithoutJobTitleInput!]
  createMany: ResumeCreateManyJobTitleInputEnvelope
  connect: [ResumeWhereUniqueInput!]
}

input ResumeCreateWithoutJobTitleInput {
  id: String
  name: String!
  fullName: String
  email: String
  addressDetail: String
  description: String!
  isSummary: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  user: UserCreateNestedOneWithoutResumesInput!
  avatar: FileCreateNestedOneWithoutResumeInput
  address: CityCreateNestedOneWithoutResumesInput
  language: LanguageCreateNestedOneWithoutResumesInput
  applications: ApplicationCreateNestedManyWithoutResumeInput
  workExperiences: WorkExperienceCreateNestedManyWithoutResumeInput
  educations: EducationCreateNestedManyWithoutResumeInput
  skills: SkillCreateNestedManyWithoutResumeInput
  projects: ProjectCreateNestedManyWithoutResumeInput
  socials: SocialCreateNestedManyWithoutResumeInput
  languageSkills: LanguageSkillCreateNestedManyWithoutResumeInput
  activities: ActivityCreateNestedManyWithoutResumeInput
}

input FileCreateNestedOneWithoutResumeInput {
  create: FileCreateWithoutResumeInput
  connectOrCreate: FileCreateOrConnectWithoutResumeInput
  connect: FileWhereUniqueInput
}

input FileCreateWithoutResumeInput {
  id: String
  url: String!
  storageId: String!
  provider: FileProvider
  metadata: JSON
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  resumeTemplateId: String
  users: UserCreateNestedManyWithoutAvatarInput
  companies: CompanyCreateNestedManyWithoutPhotosInput
  projects: ProjectCreateNestedManyWithoutThumbnailInput
  posts: PostCreateNestedManyWithoutThumbnailInput
  company: CompanyCreateNestedManyWithoutAvatarInput
  resumeTemplates: ResumeTemplateCreateNestedManyWithoutFileInput
  certificate: CertificateCreateNestedOneWithoutFilesInput
}

input ProjectCreateNestedManyWithoutThumbnailInput {
  create: [ProjectCreateWithoutThumbnailInput!]
  connectOrCreate: [ProjectCreateOrConnectWithoutThumbnailInput!]
  createMany: ProjectCreateManyThumbnailInputEnvelope
  connect: [ProjectWhereUniqueInput!]
}

input ProjectCreateWithoutThumbnailInput {
  id: String
  title: String!
  description: String!
  teamSize: Int!
  role: ProjectCreateroleInput
  startAt: DateTime!
  endAt: DateTime
  refeUrls: ProjectCreaterefeUrlsInput
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  techStacks: SkillCreateNestedManyWithoutProjectsInput
  company: CompanyCreateNestedOneWithoutProjectsInput!
  user: UserCreateNestedOneWithoutProjectsInput!
  Resume: ResumeCreateNestedOneWithoutProjectsInput
}

input ProjectCreateroleInput {
  set: [String!]!
}

input ProjectCreaterefeUrlsInput {
  set: [String!]!
}

input SkillCreateNestedManyWithoutProjectsInput {
  create: [SkillCreateWithoutProjectsInput!]
  connectOrCreate: [SkillCreateOrConnectWithoutProjectsInput!]
  connect: [SkillWhereUniqueInput!]
}

input SkillCreateWithoutProjectsInput {
  id: String
  content: String!
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  resume: ResumeCreateNestedOneWithoutSkillsInput
  jobs: JobCreateNestedManyWithoutSkillsInput
}

input ResumeCreateNestedOneWithoutSkillsInput {
  create: ResumeCreateWithoutSkillsInput
  connectOrCreate: ResumeCreateOrConnectWithoutSkillsInput
  connect: ResumeWhereUniqueInput
}

input ResumeCreateWithoutSkillsInput {
  id: String
  name: String!
  fullName: String
  email: String
  addressDetail: String
  description: String!
  isSummary: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  user: UserCreateNestedOneWithoutResumesInput!
  avatar: FileCreateNestedOneWithoutResumeInput
  address: CityCreateNestedOneWithoutResumesInput
  language: LanguageCreateNestedOneWithoutResumesInput
  jobTitle: JobTitleCreateNestedOneWithoutResumesInput!
  applications: ApplicationCreateNestedManyWithoutResumeInput
  workExperiences: WorkExperienceCreateNestedManyWithoutResumeInput
  educations: EducationCreateNestedManyWithoutResumeInput
  projects: ProjectCreateNestedManyWithoutResumeInput
  socials: SocialCreateNestedManyWithoutResumeInput
  languageSkills: LanguageSkillCreateNestedManyWithoutResumeInput
  activities: ActivityCreateNestedManyWithoutResumeInput
}

input CityCreateNestedOneWithoutResumesInput {
  create: CityCreateWithoutResumesInput
  connectOrCreate: CityCreateOrConnectWithoutResumesInput
  connect: CityWhereUniqueInput
}

input CityCreateWithoutResumesInput {
  name: String!
  stateCode: String
  stateName: String
  countryCode: String
  countryName: String
  latitude: String
  longitude: String
  wikiDataId: String!
  state: StateCreateNestedOneWithoutCitiesInput
  country: CountryCreateNestedOneWithoutCitiesInput
  users: UsersOnCityCreateNestedManyWithoutCityInput
  companies: CompanyCreateNestedManyWithoutAddressInput
  jobs: JobCreateNestedManyWithoutAddressInput
  workExperiences: WorkExperienceCreateNestedManyWithoutAddressInput
}

input CompanyCreateNestedManyWithoutAddressInput {
  create: [CompanyCreateWithoutAddressInput!]
  connectOrCreate: [CompanyCreateOrConnectWithoutAddressInput!]
  createMany: CompanyCreateManyAddressInputEnvelope
  connect: [CompanyWhereUniqueInput!]
}

input CompanyCreateWithoutAddressInput {
  id: String
  name: String!
  slug: String!
  addressDetail: String!
  description: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  avatar: FileCreateNestedOneWithoutCompanyInput
  type: CompanyTypeCreateNestedOneWithoutCompaniesInput
  size: CompanySizeCreateNestedOneWithoutCompaniesInput
  photos: FileCreateNestedManyWithoutCompaniesInput
  industries: JobCategoryCreateNestedManyWithoutCompaniesInput
  social: SocialCreateNestedManyWithoutCompanyInput
  jobs: JobCreateNestedManyWithoutCompanyInput
  workExperiences: WorkExperienceCreateNestedManyWithoutCompanyInput
  projects: ProjectCreateNestedManyWithoutCompanyInput
  references: ReferenceCreateNestedManyWithoutCompanyInput
  user: UserCreateNestedOneWithoutCompaniesInput
}

input JobCategoryCreateNestedManyWithoutCompaniesInput {
  create: [JobCategoryCreateWithoutCompaniesInput!]
  connectOrCreate: [JobCategoryCreateOrConnectWithoutCompaniesInput!]
  connect: [JobCategoryWhereUniqueInput!]
}

input JobCategoryCreateWithoutCompaniesInput {
  id: String
  name: String!
  slug: String!
  isFeature: Boolean
  isTheFive: Boolean
  isDefault: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  jobs: JobCreateNestedManyWithoutJobCategoryInput
  posts: PostCreateNestedManyWithoutJobCategoryInput
}

input JobCreateNestedManyWithoutJobCategoryInput {
  create: [JobCreateWithoutJobCategoryInput!]
  connectOrCreate: [JobCreateOrConnectWithoutJobCategoryInput!]
  createMany: JobCreateManyJobCategoryInputEnvelope
  connect: [JobWhereUniqueInput!]
}

input JobCreateWithoutJobCategoryInput {
  id: String
  type: JobType!
  level: JobLevel!
  slug: String!
  addressDetail: String
  salary: JobSalary
  salaryMetadata: JSON
  description: String!
  isBoot: Boolean
  numberOfRecruits: Int
  applicationDeadline: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  address: CityCreateNestedOneWithoutJobsInput!
  jobTitle: JobTitleCreateNestedOneWithoutJobsInput!
  company: CompanyCreateNestedOneWithoutJobsInput!
  tags: TagCreateNestedManyWithoutJobsInput
  skills: SkillCreateNestedManyWithoutJobsInput
  applications: ApplicationCreateNestedManyWithoutJobInput
  saveJobs: SaveJobCreateNestedManyWithoutJobInput
}

input CompanyCreateNestedOneWithoutJobsInput {
  create: CompanyCreateWithoutJobsInput
  connectOrCreate: CompanyCreateOrConnectWithoutJobsInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreateWithoutJobsInput {
  id: String
  name: String!
  slug: String!
  addressDetail: String!
  description: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  avatar: FileCreateNestedOneWithoutCompanyInput
  type: CompanyTypeCreateNestedOneWithoutCompaniesInput
  size: CompanySizeCreateNestedOneWithoutCompaniesInput
  photos: FileCreateNestedManyWithoutCompaniesInput
  address: CityCreateNestedOneWithoutCompaniesInput!
  industries: JobCategoryCreateNestedManyWithoutCompaniesInput
  social: SocialCreateNestedManyWithoutCompanyInput
  workExperiences: WorkExperienceCreateNestedManyWithoutCompanyInput
  projects: ProjectCreateNestedManyWithoutCompanyInput
  references: ReferenceCreateNestedManyWithoutCompanyInput
  user: UserCreateNestedOneWithoutCompaniesInput
}

input SocialCreateNestedManyWithoutCompanyInput {
  create: [SocialCreateWithoutCompanyInput!]
  connectOrCreate: [SocialCreateOrConnectWithoutCompanyInput!]
  createMany: SocialCreateManyCompanyInputEnvelope
  connect: [SocialWhereUniqueInput!]
}

input SocialCreateWithoutCompanyInput {
  id: String
  type: SocialType
  url: String!
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  user: UserCreateNestedOneWithoutSocialInput
  resume: ResumeCreateNestedOneWithoutSocialsInput
}

input UserCreateNestedOneWithoutSocialInput {
  create: UserCreateWithoutSocialInput
  connectOrCreate: UserCreateOrConnectWithoutSocialInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutSocialInput {
  id: String
  avatarUrl: String
  firstName: String!
  lastName: String!
  email: String!
  emailVerified: Boolean
  password: String!
  phoneNumber: String
  workingPosition: WorkPosition
  status: UserStatus
  signInProvider: SignInProvider
  color: String
  role: UserRole
  addressDetail: String
  verifyCode: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  avatar: FileCreateNestedOneWithoutUsersInput
  country: CountryCreateNestedOneWithoutUsersInput
  resumes: ResumeCreateNestedManyWithoutUserInput
  workExperiences: WorkExperienceCreateNestedManyWithoutUserInput
  educations: EducationCreateNestedManyWithoutUserInput
  projects: ProjectCreateNestedManyWithoutUserInput
  applications: ApplicationCreateNestedManyWithoutCandidateInput
  posts: PostCreateNestedManyWithoutAuthorInput
  likes: LikePostCreateNestedManyWithoutUserInput
  dislikes: DislikePostCreateNestedManyWithoutUserInput
  comments: CommentCreateNestedManyWithoutUserInput
  bookmarks: BookmarkPostCreateNestedManyWithoutUserInput
  saveJobs: SaveJobCreateNestedManyWithoutUserInput
  payments: PaymentCreateNestedManyWithoutUserInput
  address: UsersOnCityCreateNestedManyWithoutUserInput
  companies: CompanyCreateNestedManyWithoutUserInput
  authorSettings: SettingCreateNestedManyWithoutAuthorInput
  updatedBySettings: SettingCreateNestedManyWithoutUpdatedByInput
}

input ResumeCreateNestedManyWithoutUserInput {
  create: [ResumeCreateWithoutUserInput!]
  connectOrCreate: [ResumeCreateOrConnectWithoutUserInput!]
  createMany: ResumeCreateManyUserInputEnvelope
  connect: [ResumeWhereUniqueInput!]
}

input ResumeCreateWithoutUserInput {
  id: String
  name: String!
  fullName: String
  email: String
  addressDetail: String
  description: String!
  isSummary: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  avatar: FileCreateNestedOneWithoutResumeInput
  address: CityCreateNestedOneWithoutResumesInput
  language: LanguageCreateNestedOneWithoutResumesInput
  jobTitle: JobTitleCreateNestedOneWithoutResumesInput!
  applications: ApplicationCreateNestedManyWithoutResumeInput
  workExperiences: WorkExperienceCreateNestedManyWithoutResumeInput
  educations: EducationCreateNestedManyWithoutResumeInput
  skills: SkillCreateNestedManyWithoutResumeInput
  projects: ProjectCreateNestedManyWithoutResumeInput
  socials: SocialCreateNestedManyWithoutResumeInput
  languageSkills: LanguageSkillCreateNestedManyWithoutResumeInput
  activities: ActivityCreateNestedManyWithoutResumeInput
}

input LanguageCreateNestedOneWithoutResumesInput {
  create: LanguageCreateWithoutResumesInput
  connectOrCreate: LanguageCreateOrConnectWithoutResumesInput
  connect: LanguageWhereUniqueInput
}

input LanguageCreateWithoutResumesInput {
  id: String
  name: String!
  locale: String!
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  languageSkill: LanguageSkillCreateNestedManyWithoutLanguageInput
}

input LanguageSkillCreateNestedManyWithoutLanguageInput {
  create: [LanguageSkillCreateWithoutLanguageInput!]
  connectOrCreate: [LanguageSkillCreateOrConnectWithoutLanguageInput!]
  createMany: LanguageSkillCreateManyLanguageInputEnvelope
  connect: [LanguageSkillWhereUniqueInput!]
}

input LanguageSkillCreateWithoutLanguageInput {
  id: String
  name: String!
  locale: String!
  proficiencyLevel: ProficiencyLevel!
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  resume: ResumeCreateNestedOneWithoutLanguageSkillsInput
}

input ResumeCreateNestedOneWithoutLanguageSkillsInput {
  create: ResumeCreateWithoutLanguageSkillsInput
  connectOrCreate: ResumeCreateOrConnectWithoutLanguageSkillsInput
  connect: ResumeWhereUniqueInput
}

input ResumeCreateWithoutLanguageSkillsInput {
  id: String
  name: String!
  fullName: String
  email: String
  addressDetail: String
  description: String!
  isSummary: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  user: UserCreateNestedOneWithoutResumesInput!
  avatar: FileCreateNestedOneWithoutResumeInput
  address: CityCreateNestedOneWithoutResumesInput
  language: LanguageCreateNestedOneWithoutResumesInput
  jobTitle: JobTitleCreateNestedOneWithoutResumesInput!
  applications: ApplicationCreateNestedManyWithoutResumeInput
  workExperiences: WorkExperienceCreateNestedManyWithoutResumeInput
  educations: EducationCreateNestedManyWithoutResumeInput
  skills: SkillCreateNestedManyWithoutResumeInput
  projects: ProjectCreateNestedManyWithoutResumeInput
  socials: SocialCreateNestedManyWithoutResumeInput
  activities: ActivityCreateNestedManyWithoutResumeInput
}

input JobTitleCreateNestedOneWithoutResumesInput {
  create: JobTitleCreateWithoutResumesInput
  connectOrCreate: JobTitleCreateOrConnectWithoutResumesInput
  connect: JobTitleWhereUniqueInput
}

input JobTitleCreateWithoutResumesInput {
  id: String
  name: String!
  isFeature: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  jobs: JobCreateNestedManyWithoutJobTitleInput
  workExperiences: WorkExperienceCreateNestedManyWithoutJobTitleInput
}

input WorkExperienceCreateNestedManyWithoutJobTitleInput {
  create: [WorkExperienceCreateWithoutJobTitleInput!]
  connectOrCreate: [WorkExperienceCreateOrConnectWithoutJobTitleInput!]
  createMany: WorkExperienceCreateManyJobTitleInputEnvelope
  connect: [WorkExperienceWhereUniqueInput!]
}

input WorkExperienceCreateWithoutJobTitleInput {
  id: String
  isFreelancer: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  startAt: DateTime!
  endAt: DateTime
  description: String!
  user: UserCreateNestedOneWithoutWorkExperiencesInput!
  company: CompanyCreateNestedOneWithoutWorkExperiencesInput
  resume: ResumeCreateNestedOneWithoutWorkExperiencesInput
  address: CityCreateNestedOneWithoutWorkExperiencesInput
}

input UserCreateNestedOneWithoutWorkExperiencesInput {
  create: UserCreateWithoutWorkExperiencesInput
  connectOrCreate: UserCreateOrConnectWithoutWorkExperiencesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutWorkExperiencesInput {
  id: String
  avatarUrl: String
  firstName: String!
  lastName: String!
  email: String!
  emailVerified: Boolean
  password: String!
  phoneNumber: String
  workingPosition: WorkPosition
  status: UserStatus
  signInProvider: SignInProvider
  color: String
  role: UserRole
  addressDetail: String
  verifyCode: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  avatar: FileCreateNestedOneWithoutUsersInput
  country: CountryCreateNestedOneWithoutUsersInput
  social: SocialCreateNestedManyWithoutUserInput
  resumes: ResumeCreateNestedManyWithoutUserInput
  educations: EducationCreateNestedManyWithoutUserInput
  projects: ProjectCreateNestedManyWithoutUserInput
  applications: ApplicationCreateNestedManyWithoutCandidateInput
  posts: PostCreateNestedManyWithoutAuthorInput
  likes: LikePostCreateNestedManyWithoutUserInput
  dislikes: DislikePostCreateNestedManyWithoutUserInput
  comments: CommentCreateNestedManyWithoutUserInput
  bookmarks: BookmarkPostCreateNestedManyWithoutUserInput
  saveJobs: SaveJobCreateNestedManyWithoutUserInput
  payments: PaymentCreateNestedManyWithoutUserInput
  address: UsersOnCityCreateNestedManyWithoutUserInput
  companies: CompanyCreateNestedManyWithoutUserInput
  authorSettings: SettingCreateNestedManyWithoutAuthorInput
  updatedBySettings: SettingCreateNestedManyWithoutUpdatedByInput
}

input EducationCreateNestedManyWithoutUserInput {
  create: [EducationCreateWithoutUserInput!]
  connectOrCreate: [EducationCreateOrConnectWithoutUserInput!]
  createMany: EducationCreateManyUserInputEnvelope
  connect: [EducationWhereUniqueInput!]
}

input EducationCreateWithoutUserInput {
  id: String
  type: EducationType
  major: String!
  degree: Degree
  graduationAt: DateTime
  gpa: Int
  awards: EducationCreateawardsInput
  relevantCourseworks: EducationCreaterelevantCourseworksInput
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  resume: ResumeCreateNestedOneWithoutEducationsInput
}

input EducationCreateawardsInput {
  set: [String!]!
}

input EducationCreaterelevantCourseworksInput {
  set: [String!]!
}

input ResumeCreateNestedOneWithoutEducationsInput {
  create: ResumeCreateWithoutEducationsInput
  connectOrCreate: ResumeCreateOrConnectWithoutEducationsInput
  connect: ResumeWhereUniqueInput
}

input ResumeCreateWithoutEducationsInput {
  id: String
  name: String!
  fullName: String
  email: String
  addressDetail: String
  description: String!
  isSummary: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  user: UserCreateNestedOneWithoutResumesInput!
  avatar: FileCreateNestedOneWithoutResumeInput
  address: CityCreateNestedOneWithoutResumesInput
  language: LanguageCreateNestedOneWithoutResumesInput
  jobTitle: JobTitleCreateNestedOneWithoutResumesInput!
  applications: ApplicationCreateNestedManyWithoutResumeInput
  workExperiences: WorkExperienceCreateNestedManyWithoutResumeInput
  skills: SkillCreateNestedManyWithoutResumeInput
  projects: ProjectCreateNestedManyWithoutResumeInput
  socials: SocialCreateNestedManyWithoutResumeInput
  languageSkills: LanguageSkillCreateNestedManyWithoutResumeInput
  activities: ActivityCreateNestedManyWithoutResumeInput
}

input ApplicationCreateNestedManyWithoutResumeInput {
  create: [ApplicationCreateWithoutResumeInput!]
  connectOrCreate: [ApplicationCreateOrConnectWithoutResumeInput!]
  createMany: ApplicationCreateManyResumeInputEnvelope
  connect: [ApplicationWhereUniqueInput!]
}

input ApplicationCreateWithoutResumeInput {
  id: String
  createdAt: DateTime
  status: ApplicationStatus
  type: ApplicationType
  updatedAt: DateTime
  deletedAt: DateTime
  job: JobCreateNestedOneWithoutApplicationsInput!
  candidate: UserCreateNestedOneWithoutApplicationsInput!
}

input JobCreateNestedOneWithoutApplicationsInput {
  create: JobCreateWithoutApplicationsInput
  connectOrCreate: JobCreateOrConnectWithoutApplicationsInput
  connect: JobWhereUniqueInput
}

input JobCreateWithoutApplicationsInput {
  id: String
  type: JobType!
  level: JobLevel!
  slug: String!
  addressDetail: String
  salary: JobSalary
  salaryMetadata: JSON
  description: String!
  isBoot: Boolean
  numberOfRecruits: Int
  applicationDeadline: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  address: CityCreateNestedOneWithoutJobsInput!
  jobTitle: JobTitleCreateNestedOneWithoutJobsInput!
  jobCategory: JobCategoryCreateNestedOneWithoutJobsInput!
  company: CompanyCreateNestedOneWithoutJobsInput!
  tags: TagCreateNestedManyWithoutJobsInput
  skills: SkillCreateNestedManyWithoutJobsInput
  saveJobs: SaveJobCreateNestedManyWithoutJobInput
}

input TagCreateNestedManyWithoutJobsInput {
  create: [TagCreateWithoutJobsInput!]
  connectOrCreate: [TagCreateOrConnectWithoutJobsInput!]
  connect: [TagWhereUniqueInput!]
}

input TagCreateWithoutJobsInput {
  id: String
  type: TagType
  name: String!
  color: String
  isPostDefault: Boolean
  isJobDefault: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  posts: PostCreateNestedManyWithoutTagsInput
}

input PostCreateNestedManyWithoutTagsInput {
  create: [PostCreateWithoutTagsInput!]
  connectOrCreate: [PostCreateOrConnectWithoutTagsInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateWithoutTagsInput {
  id: String
  title: String!
  content: String!
  shareUrl: String!
  metadata: JSON
  slug: String!
  minRead: Int
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  jobCategory: JobCategoryCreateNestedOneWithoutPostsInput
  author: UserCreateNestedOneWithoutPostsInput!
  thumbnail: FileCreateNestedOneWithoutPostsInput
  categories: PostCategoryCreateNestedManyWithoutPostsInput
  likes: LikePostCreateNestedManyWithoutPostInput
  dislikes: DislikePostCreateNestedManyWithoutPostInput
  comments: CommentCreateNestedManyWithoutPostInput
  bookmarks: BookmarkPostCreateNestedManyWithoutPostInput
}

input JobCategoryCreateNestedOneWithoutPostsInput {
  create: JobCategoryCreateWithoutPostsInput
  connectOrCreate: JobCategoryCreateOrConnectWithoutPostsInput
  connect: JobCategoryWhereUniqueInput
}

input JobCategoryCreateWithoutPostsInput {
  id: String
  name: String!
  slug: String!
  isFeature: Boolean
  isTheFive: Boolean
  isDefault: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  jobs: JobCreateNestedManyWithoutJobCategoryInput
  companies: CompanyCreateNestedManyWithoutIndustriesInput
}

input JobCategoryCreateOrConnectWithoutPostsInput {
  where: JobCategoryWhereUniqueInput!
  create: JobCategoryCreateWithoutPostsInput!
}

input UserCreateNestedOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connectOrCreate: UserCreateOrConnectWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutPostsInput {
  id: String
  avatarUrl: String
  firstName: String!
  lastName: String!
  email: String!
  emailVerified: Boolean
  password: String!
  phoneNumber: String
  workingPosition: WorkPosition
  status: UserStatus
  signInProvider: SignInProvider
  color: String
  role: UserRole
  addressDetail: String
  verifyCode: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  avatar: FileCreateNestedOneWithoutUsersInput
  country: CountryCreateNestedOneWithoutUsersInput
  social: SocialCreateNestedManyWithoutUserInput
  resumes: ResumeCreateNestedManyWithoutUserInput
  workExperiences: WorkExperienceCreateNestedManyWithoutUserInput
  educations: EducationCreateNestedManyWithoutUserInput
  projects: ProjectCreateNestedManyWithoutUserInput
  applications: ApplicationCreateNestedManyWithoutCandidateInput
  likes: LikePostCreateNestedManyWithoutUserInput
  dislikes: DislikePostCreateNestedManyWithoutUserInput
  comments: CommentCreateNestedManyWithoutUserInput
  bookmarks: BookmarkPostCreateNestedManyWithoutUserInput
  saveJobs: SaveJobCreateNestedManyWithoutUserInput
  payments: PaymentCreateNestedManyWithoutUserInput
  address: UsersOnCityCreateNestedManyWithoutUserInput
  companies: CompanyCreateNestedManyWithoutUserInput
  authorSettings: SettingCreateNestedManyWithoutAuthorInput
  updatedBySettings: SettingCreateNestedManyWithoutUpdatedByInput
}

input ProjectCreateNestedManyWithoutUserInput {
  create: [ProjectCreateWithoutUserInput!]
  connectOrCreate: [ProjectCreateOrConnectWithoutUserInput!]
  createMany: ProjectCreateManyUserInputEnvelope
  connect: [ProjectWhereUniqueInput!]
}

input ProjectCreateWithoutUserInput {
  id: String
  title: String!
  description: String!
  teamSize: Int!
  role: ProjectCreateroleInput
  startAt: DateTime!
  endAt: DateTime
  refeUrls: ProjectCreaterefeUrlsInput
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  techStacks: SkillCreateNestedManyWithoutProjectsInput
  company: CompanyCreateNestedOneWithoutProjectsInput!
  thumbnail: FileCreateNestedOneWithoutProjectsInput
  Resume: ResumeCreateNestedOneWithoutProjectsInput
}

input CompanyCreateNestedOneWithoutProjectsInput {
  create: CompanyCreateWithoutProjectsInput
  connectOrCreate: CompanyCreateOrConnectWithoutProjectsInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreateWithoutProjectsInput {
  id: String
  name: String!
  slug: String!
  addressDetail: String!
  description: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  avatar: FileCreateNestedOneWithoutCompanyInput
  type: CompanyTypeCreateNestedOneWithoutCompaniesInput
  size: CompanySizeCreateNestedOneWithoutCompaniesInput
  photos: FileCreateNestedManyWithoutCompaniesInput
  address: CityCreateNestedOneWithoutCompaniesInput!
  industries: JobCategoryCreateNestedManyWithoutCompaniesInput
  social: SocialCreateNestedManyWithoutCompanyInput
  jobs: JobCreateNestedManyWithoutCompanyInput
  workExperiences: WorkExperienceCreateNestedManyWithoutCompanyInput
  references: ReferenceCreateNestedManyWithoutCompanyInput
  user: UserCreateNestedOneWithoutCompaniesInput
}

input JobCreateNestedManyWithoutCompanyInput {
  create: [JobCreateWithoutCompanyInput!]
  connectOrCreate: [JobCreateOrConnectWithoutCompanyInput!]
  createMany: JobCreateManyCompanyInputEnvelope
  connect: [JobWhereUniqueInput!]
}

input JobCreateWithoutCompanyInput {
  id: String
  type: JobType!
  level: JobLevel!
  slug: String!
  addressDetail: String
  salary: JobSalary
  salaryMetadata: JSON
  description: String!
  isBoot: Boolean
  numberOfRecruits: Int
  applicationDeadline: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  address: CityCreateNestedOneWithoutJobsInput!
  jobTitle: JobTitleCreateNestedOneWithoutJobsInput!
  jobCategory: JobCategoryCreateNestedOneWithoutJobsInput!
  tags: TagCreateNestedManyWithoutJobsInput
  skills: SkillCreateNestedManyWithoutJobsInput
  applications: ApplicationCreateNestedManyWithoutJobInput
  saveJobs: SaveJobCreateNestedManyWithoutJobInput
}

input SkillCreateNestedManyWithoutJobsInput {
  create: [SkillCreateWithoutJobsInput!]
  connectOrCreate: [SkillCreateOrConnectWithoutJobsInput!]
  connect: [SkillWhereUniqueInput!]
}

input SkillCreateWithoutJobsInput {
  id: String
  content: String!
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  resume: ResumeCreateNestedOneWithoutSkillsInput
  projects: ProjectCreateNestedManyWithoutTechStacksInput
}

input ProjectCreateNestedManyWithoutTechStacksInput {
  create: [ProjectCreateWithoutTechStacksInput!]
  connectOrCreate: [ProjectCreateOrConnectWithoutTechStacksInput!]
  connect: [ProjectWhereUniqueInput!]
}

input ProjectCreateWithoutTechStacksInput {
  id: String
  title: String!
  description: String!
  teamSize: Int!
  role: ProjectCreateroleInput
  startAt: DateTime!
  endAt: DateTime
  refeUrls: ProjectCreaterefeUrlsInput
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  company: CompanyCreateNestedOneWithoutProjectsInput!
  thumbnail: FileCreateNestedOneWithoutProjectsInput
  user: UserCreateNestedOneWithoutProjectsInput!
  Resume: ResumeCreateNestedOneWithoutProjectsInput
}

input FileCreateNestedOneWithoutProjectsInput {
  create: FileCreateWithoutProjectsInput
  connectOrCreate: FileCreateOrConnectWithoutProjectsInput
  connect: FileWhereUniqueInput
}

input FileCreateWithoutProjectsInput {
  id: String
  url: String!
  storageId: String!
  provider: FileProvider
  metadata: JSON
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  resumeTemplateId: String
  users: UserCreateNestedManyWithoutAvatarInput
  companies: CompanyCreateNestedManyWithoutPhotosInput
  resume: ResumeCreateNestedManyWithoutAvatarInput
  posts: PostCreateNestedManyWithoutThumbnailInput
  company: CompanyCreateNestedManyWithoutAvatarInput
  resumeTemplates: ResumeTemplateCreateNestedManyWithoutFileInput
  certificate: CertificateCreateNestedOneWithoutFilesInput
}

input PostCreateNestedManyWithoutThumbnailInput {
  create: [PostCreateWithoutThumbnailInput!]
  connectOrCreate: [PostCreateOrConnectWithoutThumbnailInput!]
  createMany: PostCreateManyThumbnailInputEnvelope
  connect: [PostWhereUniqueInput!]
}

input PostCreateWithoutThumbnailInput {
  id: String
  title: String!
  content: String!
  shareUrl: String!
  metadata: JSON
  slug: String!
  minRead: Int
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  jobCategory: JobCategoryCreateNestedOneWithoutPostsInput
  author: UserCreateNestedOneWithoutPostsInput!
  categories: PostCategoryCreateNestedManyWithoutPostsInput
  tags: TagCreateNestedManyWithoutPostsInput
  likes: LikePostCreateNestedManyWithoutPostInput
  dislikes: DislikePostCreateNestedManyWithoutPostInput
  comments: CommentCreateNestedManyWithoutPostInput
  bookmarks: BookmarkPostCreateNestedManyWithoutPostInput
}

input PostCategoryCreateNestedManyWithoutPostsInput {
  create: [PostCategoryCreateWithoutPostsInput!]
  connectOrCreate: [PostCategoryCreateOrConnectWithoutPostsInput!]
  connect: [PostCategoryWhereUniqueInput!]
}

input PostCategoryCreateWithoutPostsInput {
  id: String
  name: String!
  slug: String!
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

input PostCategoryCreateOrConnectWithoutPostsInput {
  where: PostCategoryWhereUniqueInput!
  create: PostCategoryCreateWithoutPostsInput!
}

input TagCreateNestedManyWithoutPostsInput {
  create: [TagCreateWithoutPostsInput!]
  connectOrCreate: [TagCreateOrConnectWithoutPostsInput!]
  connect: [TagWhereUniqueInput!]
}

input TagCreateWithoutPostsInput {
  id: String
  type: TagType
  name: String!
  color: String
  isPostDefault: Boolean
  isJobDefault: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  jobs: JobCreateNestedManyWithoutTagsInput
}

input TagCreateOrConnectWithoutPostsInput {
  where: TagWhereUniqueInput!
  create: TagCreateWithoutPostsInput!
}

input LikePostCreateNestedManyWithoutPostInput {
  create: [LikePostCreateWithoutPostInput!]
  connectOrCreate: [LikePostCreateOrConnectWithoutPostInput!]
  createMany: LikePostCreateManyPostInputEnvelope
  connect: [LikePostWhereUniqueInput!]
}

input LikePostCreateWithoutPostInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  user: UserCreateNestedOneWithoutLikesInput
  comment: CommentCreateNestedOneWithoutLikesInput
}

input UserCreateNestedOneWithoutLikesInput {
  create: UserCreateWithoutLikesInput
  connectOrCreate: UserCreateOrConnectWithoutLikesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutLikesInput {
  id: String
  avatarUrl: String
  firstName: String!
  lastName: String!
  email: String!
  emailVerified: Boolean
  password: String!
  phoneNumber: String
  workingPosition: WorkPosition
  status: UserStatus
  signInProvider: SignInProvider
  color: String
  role: UserRole
  addressDetail: String
  verifyCode: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  avatar: FileCreateNestedOneWithoutUsersInput
  country: CountryCreateNestedOneWithoutUsersInput
  social: SocialCreateNestedManyWithoutUserInput
  resumes: ResumeCreateNestedManyWithoutUserInput
  workExperiences: WorkExperienceCreateNestedManyWithoutUserInput
  educations: EducationCreateNestedManyWithoutUserInput
  projects: ProjectCreateNestedManyWithoutUserInput
  applications: ApplicationCreateNestedManyWithoutCandidateInput
  posts: PostCreateNestedManyWithoutAuthorInput
  dislikes: DislikePostCreateNestedManyWithoutUserInput
  comments: CommentCreateNestedManyWithoutUserInput
  bookmarks: BookmarkPostCreateNestedManyWithoutUserInput
  saveJobs: SaveJobCreateNestedManyWithoutUserInput
  payments: PaymentCreateNestedManyWithoutUserInput
  address: UsersOnCityCreateNestedManyWithoutUserInput
  companies: CompanyCreateNestedManyWithoutUserInput
  authorSettings: SettingCreateNestedManyWithoutAuthorInput
  updatedBySettings: SettingCreateNestedManyWithoutUpdatedByInput
}

input ApplicationCreateNestedManyWithoutCandidateInput {
  create: [ApplicationCreateWithoutCandidateInput!]
  connectOrCreate: [ApplicationCreateOrConnectWithoutCandidateInput!]
  createMany: ApplicationCreateManyCandidateInputEnvelope
  connect: [ApplicationWhereUniqueInput!]
}

input ApplicationCreateWithoutCandidateInput {
  id: String
  createdAt: DateTime
  status: ApplicationStatus
  type: ApplicationType
  updatedAt: DateTime
  deletedAt: DateTime
  resume: ResumeCreateNestedOneWithoutApplicationsInput!
  job: JobCreateNestedOneWithoutApplicationsInput!
}

input ResumeCreateNestedOneWithoutApplicationsInput {
  create: ResumeCreateWithoutApplicationsInput
  connectOrCreate: ResumeCreateOrConnectWithoutApplicationsInput
  connect: ResumeWhereUniqueInput
}

input ResumeCreateWithoutApplicationsInput {
  id: String
  name: String!
  fullName: String
  email: String
  addressDetail: String
  description: String!
  isSummary: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  user: UserCreateNestedOneWithoutResumesInput!
  avatar: FileCreateNestedOneWithoutResumeInput
  address: CityCreateNestedOneWithoutResumesInput
  language: LanguageCreateNestedOneWithoutResumesInput
  jobTitle: JobTitleCreateNestedOneWithoutResumesInput!
  workExperiences: WorkExperienceCreateNestedManyWithoutResumeInput
  educations: EducationCreateNestedManyWithoutResumeInput
  skills: SkillCreateNestedManyWithoutResumeInput
  projects: ProjectCreateNestedManyWithoutResumeInput
  socials: SocialCreateNestedManyWithoutResumeInput
  languageSkills: LanguageSkillCreateNestedManyWithoutResumeInput
  activities: ActivityCreateNestedManyWithoutResumeInput
}

input WorkExperienceCreateNestedManyWithoutResumeInput {
  create: [WorkExperienceCreateWithoutResumeInput!]
  connectOrCreate: [WorkExperienceCreateOrConnectWithoutResumeInput!]
  createMany: WorkExperienceCreateManyResumeInputEnvelope
  connect: [WorkExperienceWhereUniqueInput!]
}

input WorkExperienceCreateWithoutResumeInput {
  id: String
  isFreelancer: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  startAt: DateTime!
  endAt: DateTime
  description: String!
  jobTitle: JobTitleCreateNestedOneWithoutWorkExperiencesInput!
  user: UserCreateNestedOneWithoutWorkExperiencesInput!
  company: CompanyCreateNestedOneWithoutWorkExperiencesInput
  address: CityCreateNestedOneWithoutWorkExperiencesInput
}

input CompanyCreateNestedOneWithoutWorkExperiencesInput {
  create: CompanyCreateWithoutWorkExperiencesInput
  connectOrCreate: CompanyCreateOrConnectWithoutWorkExperiencesInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreateWithoutWorkExperiencesInput {
  id: String
  name: String!
  slug: String!
  addressDetail: String!
  description: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  avatar: FileCreateNestedOneWithoutCompanyInput
  type: CompanyTypeCreateNestedOneWithoutCompaniesInput
  size: CompanySizeCreateNestedOneWithoutCompaniesInput
  photos: FileCreateNestedManyWithoutCompaniesInput
  address: CityCreateNestedOneWithoutCompaniesInput!
  industries: JobCategoryCreateNestedManyWithoutCompaniesInput
  social: SocialCreateNestedManyWithoutCompanyInput
  jobs: JobCreateNestedManyWithoutCompanyInput
  projects: ProjectCreateNestedManyWithoutCompanyInput
  references: ReferenceCreateNestedManyWithoutCompanyInput
  user: UserCreateNestedOneWithoutCompaniesInput
}

input ProjectCreateNestedManyWithoutCompanyInput {
  create: [ProjectCreateWithoutCompanyInput!]
  connectOrCreate: [ProjectCreateOrConnectWithoutCompanyInput!]
  createMany: ProjectCreateManyCompanyInputEnvelope
  connect: [ProjectWhereUniqueInput!]
}

input ProjectCreateWithoutCompanyInput {
  id: String
  title: String!
  description: String!
  teamSize: Int!
  role: ProjectCreateroleInput
  startAt: DateTime!
  endAt: DateTime
  refeUrls: ProjectCreaterefeUrlsInput
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  techStacks: SkillCreateNestedManyWithoutProjectsInput
  thumbnail: FileCreateNestedOneWithoutProjectsInput
  user: UserCreateNestedOneWithoutProjectsInput!
  Resume: ResumeCreateNestedOneWithoutProjectsInput
}

input UserCreateNestedOneWithoutProjectsInput {
  create: UserCreateWithoutProjectsInput
  connectOrCreate: UserCreateOrConnectWithoutProjectsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutProjectsInput {
  id: String
  avatarUrl: String
  firstName: String!
  lastName: String!
  email: String!
  emailVerified: Boolean
  password: String!
  phoneNumber: String
  workingPosition: WorkPosition
  status: UserStatus
  signInProvider: SignInProvider
  color: String
  role: UserRole
  addressDetail: String
  verifyCode: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  avatar: FileCreateNestedOneWithoutUsersInput
  country: CountryCreateNestedOneWithoutUsersInput
  social: SocialCreateNestedManyWithoutUserInput
  resumes: ResumeCreateNestedManyWithoutUserInput
  workExperiences: WorkExperienceCreateNestedManyWithoutUserInput
  educations: EducationCreateNestedManyWithoutUserInput
  applications: ApplicationCreateNestedManyWithoutCandidateInput
  posts: PostCreateNestedManyWithoutAuthorInput
  likes: LikePostCreateNestedManyWithoutUserInput
  dislikes: DislikePostCreateNestedManyWithoutUserInput
  comments: CommentCreateNestedManyWithoutUserInput
  bookmarks: BookmarkPostCreateNestedManyWithoutUserInput
  saveJobs: SaveJobCreateNestedManyWithoutUserInput
  payments: PaymentCreateNestedManyWithoutUserInput
  address: UsersOnCityCreateNestedManyWithoutUserInput
  companies: CompanyCreateNestedManyWithoutUserInput
  authorSettings: SettingCreateNestedManyWithoutAuthorInput
  updatedBySettings: SettingCreateNestedManyWithoutUpdatedByInput
}

input PostCreateNestedManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  connectOrCreate: [PostCreateOrConnectWithoutAuthorInput!]
  createMany: PostCreateManyAuthorInputEnvelope
  connect: [PostWhereUniqueInput!]
}

input PostCreateWithoutAuthorInput {
  id: String
  title: String!
  content: String!
  shareUrl: String!
  metadata: JSON
  slug: String!
  minRead: Int
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  jobCategory: JobCategoryCreateNestedOneWithoutPostsInput
  thumbnail: FileCreateNestedOneWithoutPostsInput
  categories: PostCategoryCreateNestedManyWithoutPostsInput
  tags: TagCreateNestedManyWithoutPostsInput
  likes: LikePostCreateNestedManyWithoutPostInput
  dislikes: DislikePostCreateNestedManyWithoutPostInput
  comments: CommentCreateNestedManyWithoutPostInput
  bookmarks: BookmarkPostCreateNestedManyWithoutPostInput
}

input FileCreateNestedOneWithoutPostsInput {
  create: FileCreateWithoutPostsInput
  connectOrCreate: FileCreateOrConnectWithoutPostsInput
  connect: FileWhereUniqueInput
}

input FileCreateWithoutPostsInput {
  id: String
  url: String!
  storageId: String!
  provider: FileProvider
  metadata: JSON
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  resumeTemplateId: String
  users: UserCreateNestedManyWithoutAvatarInput
  companies: CompanyCreateNestedManyWithoutPhotosInput
  resume: ResumeCreateNestedManyWithoutAvatarInput
  projects: ProjectCreateNestedManyWithoutThumbnailInput
  company: CompanyCreateNestedManyWithoutAvatarInput
  resumeTemplates: ResumeTemplateCreateNestedManyWithoutFileInput
  certificate: CertificateCreateNestedOneWithoutFilesInput
}

input CompanyCreateNestedManyWithoutAvatarInput {
  create: [CompanyCreateWithoutAvatarInput!]
  connectOrCreate: [CompanyCreateOrConnectWithoutAvatarInput!]
  createMany: CompanyCreateManyAvatarInputEnvelope
  connect: [CompanyWhereUniqueInput!]
}

input CompanyCreateWithoutAvatarInput {
  id: String
  name: String!
  slug: String!
  addressDetail: String!
  description: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  type: CompanyTypeCreateNestedOneWithoutCompaniesInput
  size: CompanySizeCreateNestedOneWithoutCompaniesInput
  photos: FileCreateNestedManyWithoutCompaniesInput
  address: CityCreateNestedOneWithoutCompaniesInput!
  industries: JobCategoryCreateNestedManyWithoutCompaniesInput
  social: SocialCreateNestedManyWithoutCompanyInput
  jobs: JobCreateNestedManyWithoutCompanyInput
  workExperiences: WorkExperienceCreateNestedManyWithoutCompanyInput
  projects: ProjectCreateNestedManyWithoutCompanyInput
  references: ReferenceCreateNestedManyWithoutCompanyInput
  user: UserCreateNestedOneWithoutCompaniesInput
}

input WorkExperienceCreateNestedManyWithoutCompanyInput {
  create: [WorkExperienceCreateWithoutCompanyInput!]
  connectOrCreate: [WorkExperienceCreateOrConnectWithoutCompanyInput!]
  createMany: WorkExperienceCreateManyCompanyInputEnvelope
  connect: [WorkExperienceWhereUniqueInput!]
}

input WorkExperienceCreateWithoutCompanyInput {
  id: String
  isFreelancer: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  startAt: DateTime!
  endAt: DateTime
  description: String!
  jobTitle: JobTitleCreateNestedOneWithoutWorkExperiencesInput!
  user: UserCreateNestedOneWithoutWorkExperiencesInput!
  resume: ResumeCreateNestedOneWithoutWorkExperiencesInput
  address: CityCreateNestedOneWithoutWorkExperiencesInput
}

input ResumeCreateNestedOneWithoutWorkExperiencesInput {
  create: ResumeCreateWithoutWorkExperiencesInput
  connectOrCreate: ResumeCreateOrConnectWithoutWorkExperiencesInput
  connect: ResumeWhereUniqueInput
}

input ResumeCreateWithoutWorkExperiencesInput {
  id: String
  name: String!
  fullName: String
  email: String
  addressDetail: String
  description: String!
  isSummary: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  user: UserCreateNestedOneWithoutResumesInput!
  avatar: FileCreateNestedOneWithoutResumeInput
  address: CityCreateNestedOneWithoutResumesInput
  language: LanguageCreateNestedOneWithoutResumesInput
  jobTitle: JobTitleCreateNestedOneWithoutResumesInput!
  applications: ApplicationCreateNestedManyWithoutResumeInput
  educations: EducationCreateNestedManyWithoutResumeInput
  skills: SkillCreateNestedManyWithoutResumeInput
  projects: ProjectCreateNestedManyWithoutResumeInput
  socials: SocialCreateNestedManyWithoutResumeInput
  languageSkills: LanguageSkillCreateNestedManyWithoutResumeInput
  activities: ActivityCreateNestedManyWithoutResumeInput
}

input EducationCreateNestedManyWithoutResumeInput {
  create: [EducationCreateWithoutResumeInput!]
  connectOrCreate: [EducationCreateOrConnectWithoutResumeInput!]
  createMany: EducationCreateManyResumeInputEnvelope
  connect: [EducationWhereUniqueInput!]
}

input EducationCreateWithoutResumeInput {
  id: String
  type: EducationType
  major: String!
  degree: Degree
  graduationAt: DateTime
  gpa: Int
  awards: EducationCreateawardsInput
  relevantCourseworks: EducationCreaterelevantCourseworksInput
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  user: UserCreateNestedOneWithoutEducationsInput!
}

input UserCreateNestedOneWithoutEducationsInput {
  create: UserCreateWithoutEducationsInput
  connectOrCreate: UserCreateOrConnectWithoutEducationsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutEducationsInput {
  id: String
  avatarUrl: String
  firstName: String!
  lastName: String!
  email: String!
  emailVerified: Boolean
  password: String!
  phoneNumber: String
  workingPosition: WorkPosition
  status: UserStatus
  signInProvider: SignInProvider
  color: String
  role: UserRole
  addressDetail: String
  verifyCode: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  avatar: FileCreateNestedOneWithoutUsersInput
  country: CountryCreateNestedOneWithoutUsersInput
  social: SocialCreateNestedManyWithoutUserInput
  resumes: ResumeCreateNestedManyWithoutUserInput
  workExperiences: WorkExperienceCreateNestedManyWithoutUserInput
  projects: ProjectCreateNestedManyWithoutUserInput
  applications: ApplicationCreateNestedManyWithoutCandidateInput
  posts: PostCreateNestedManyWithoutAuthorInput
  likes: LikePostCreateNestedManyWithoutUserInput
  dislikes: DislikePostCreateNestedManyWithoutUserInput
  comments: CommentCreateNestedManyWithoutUserInput
  bookmarks: BookmarkPostCreateNestedManyWithoutUserInput
  saveJobs: SaveJobCreateNestedManyWithoutUserInput
  payments: PaymentCreateNestedManyWithoutUserInput
  address: UsersOnCityCreateNestedManyWithoutUserInput
  companies: CompanyCreateNestedManyWithoutUserInput
  authorSettings: SettingCreateNestedManyWithoutAuthorInput
  updatedBySettings: SettingCreateNestedManyWithoutUpdatedByInput
}

input LikePostCreateNestedManyWithoutUserInput {
  create: [LikePostCreateWithoutUserInput!]
  connectOrCreate: [LikePostCreateOrConnectWithoutUserInput!]
  createMany: LikePostCreateManyUserInputEnvelope
  connect: [LikePostWhereUniqueInput!]
}

input LikePostCreateWithoutUserInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  post: PostCreateNestedOneWithoutLikesInput!
  comment: CommentCreateNestedOneWithoutLikesInput
}

input PostCreateNestedOneWithoutLikesInput {
  create: PostCreateWithoutLikesInput
  connectOrCreate: PostCreateOrConnectWithoutLikesInput
  connect: PostWhereUniqueInput
}

input PostCreateWithoutLikesInput {
  id: String
  title: String!
  content: String!
  shareUrl: String!
  metadata: JSON
  slug: String!
  minRead: Int
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  jobCategory: JobCategoryCreateNestedOneWithoutPostsInput
  author: UserCreateNestedOneWithoutPostsInput!
  thumbnail: FileCreateNestedOneWithoutPostsInput
  categories: PostCategoryCreateNestedManyWithoutPostsInput
  tags: TagCreateNestedManyWithoutPostsInput
  dislikes: DislikePostCreateNestedManyWithoutPostInput
  comments: CommentCreateNestedManyWithoutPostInput
  bookmarks: BookmarkPostCreateNestedManyWithoutPostInput
}

input DislikePostCreateNestedManyWithoutPostInput {
  create: [DislikePostCreateWithoutPostInput!]
  connectOrCreate: [DislikePostCreateOrConnectWithoutPostInput!]
  createMany: DislikePostCreateManyPostInputEnvelope
  connect: [DislikePostWhereUniqueInput!]
}

input DislikePostCreateWithoutPostInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  user: UserCreateNestedOneWithoutDislikesInput
  comment: CommentCreateNestedOneWithoutDislikesInput
}

input UserCreateNestedOneWithoutDislikesInput {
  create: UserCreateWithoutDislikesInput
  connectOrCreate: UserCreateOrConnectWithoutDislikesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutDislikesInput {
  id: String
  avatarUrl: String
  firstName: String!
  lastName: String!
  email: String!
  emailVerified: Boolean
  password: String!
  phoneNumber: String
  workingPosition: WorkPosition
  status: UserStatus
  signInProvider: SignInProvider
  color: String
  role: UserRole
  addressDetail: String
  verifyCode: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  avatar: FileCreateNestedOneWithoutUsersInput
  country: CountryCreateNestedOneWithoutUsersInput
  social: SocialCreateNestedManyWithoutUserInput
  resumes: ResumeCreateNestedManyWithoutUserInput
  workExperiences: WorkExperienceCreateNestedManyWithoutUserInput
  educations: EducationCreateNestedManyWithoutUserInput
  projects: ProjectCreateNestedManyWithoutUserInput
  applications: ApplicationCreateNestedManyWithoutCandidateInput
  posts: PostCreateNestedManyWithoutAuthorInput
  likes: LikePostCreateNestedManyWithoutUserInput
  comments: CommentCreateNestedManyWithoutUserInput
  bookmarks: BookmarkPostCreateNestedManyWithoutUserInput
  saveJobs: SaveJobCreateNestedManyWithoutUserInput
  payments: PaymentCreateNestedManyWithoutUserInput
  address: UsersOnCityCreateNestedManyWithoutUserInput
  companies: CompanyCreateNestedManyWithoutUserInput
  authorSettings: SettingCreateNestedManyWithoutAuthorInput
  updatedBySettings: SettingCreateNestedManyWithoutUpdatedByInput
}

input CommentCreateNestedManyWithoutUserInput {
  create: [CommentCreateWithoutUserInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutUserInput!]
  createMany: CommentCreateManyUserInputEnvelope
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateWithoutUserInput {
  id: String
  conent: String!
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  isAnonymously: Boolean
  post: PostCreateNestedOneWithoutCommentsInput!
  parent: CommentCreateNestedOneWithoutRepliesInput
  replies: CommentCreateNestedManyWithoutParentInput
  likes: LikePostCreateNestedManyWithoutCommentInput
  dislikes: DislikePostCreateNestedManyWithoutCommentInput
}

input PostCreateNestedOneWithoutCommentsInput {
  create: PostCreateWithoutCommentsInput
  connectOrCreate: PostCreateOrConnectWithoutCommentsInput
  connect: PostWhereUniqueInput
}

input PostCreateWithoutCommentsInput {
  id: String
  title: String!
  content: String!
  shareUrl: String!
  metadata: JSON
  slug: String!
  minRead: Int
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  jobCategory: JobCategoryCreateNestedOneWithoutPostsInput
  author: UserCreateNestedOneWithoutPostsInput!
  thumbnail: FileCreateNestedOneWithoutPostsInput
  categories: PostCategoryCreateNestedManyWithoutPostsInput
  tags: TagCreateNestedManyWithoutPostsInput
  likes: LikePostCreateNestedManyWithoutPostInput
  dislikes: DislikePostCreateNestedManyWithoutPostInput
  bookmarks: BookmarkPostCreateNestedManyWithoutPostInput
}

input BookmarkPostCreateNestedManyWithoutPostInput {
  create: [BookmarkPostCreateWithoutPostInput!]
  connectOrCreate: [BookmarkPostCreateOrConnectWithoutPostInput!]
  createMany: BookmarkPostCreateManyPostInputEnvelope
  connect: [BookmarkPostWhereUniqueInput!]
}

input BookmarkPostCreateWithoutPostInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  user: UserCreateNestedOneWithoutBookmarksInput!
}

input UserCreateNestedOneWithoutBookmarksInput {
  create: UserCreateWithoutBookmarksInput
  connectOrCreate: UserCreateOrConnectWithoutBookmarksInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutBookmarksInput {
  id: String
  avatarUrl: String
  firstName: String!
  lastName: String!
  email: String!
  emailVerified: Boolean
  password: String!
  phoneNumber: String
  workingPosition: WorkPosition
  status: UserStatus
  signInProvider: SignInProvider
  color: String
  role: UserRole
  addressDetail: String
  verifyCode: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  avatar: FileCreateNestedOneWithoutUsersInput
  country: CountryCreateNestedOneWithoutUsersInput
  social: SocialCreateNestedManyWithoutUserInput
  resumes: ResumeCreateNestedManyWithoutUserInput
  workExperiences: WorkExperienceCreateNestedManyWithoutUserInput
  educations: EducationCreateNestedManyWithoutUserInput
  projects: ProjectCreateNestedManyWithoutUserInput
  applications: ApplicationCreateNestedManyWithoutCandidateInput
  posts: PostCreateNestedManyWithoutAuthorInput
  likes: LikePostCreateNestedManyWithoutUserInput
  dislikes: DislikePostCreateNestedManyWithoutUserInput
  comments: CommentCreateNestedManyWithoutUserInput
  saveJobs: SaveJobCreateNestedManyWithoutUserInput
  payments: PaymentCreateNestedManyWithoutUserInput
  address: UsersOnCityCreateNestedManyWithoutUserInput
  companies: CompanyCreateNestedManyWithoutUserInput
  authorSettings: SettingCreateNestedManyWithoutAuthorInput
  updatedBySettings: SettingCreateNestedManyWithoutUpdatedByInput
}

input DislikePostCreateNestedManyWithoutUserInput {
  create: [DislikePostCreateWithoutUserInput!]
  connectOrCreate: [DislikePostCreateOrConnectWithoutUserInput!]
  createMany: DislikePostCreateManyUserInputEnvelope
  connect: [DislikePostWhereUniqueInput!]
}

input DislikePostCreateWithoutUserInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  post: PostCreateNestedOneWithoutDislikesInput!
  comment: CommentCreateNestedOneWithoutDislikesInput
}

input PostCreateNestedOneWithoutDislikesInput {
  create: PostCreateWithoutDislikesInput
  connectOrCreate: PostCreateOrConnectWithoutDislikesInput
  connect: PostWhereUniqueInput
}

input PostCreateWithoutDislikesInput {
  id: String
  title: String!
  content: String!
  shareUrl: String!
  metadata: JSON
  slug: String!
  minRead: Int
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  jobCategory: JobCategoryCreateNestedOneWithoutPostsInput
  author: UserCreateNestedOneWithoutPostsInput!
  thumbnail: FileCreateNestedOneWithoutPostsInput
  categories: PostCategoryCreateNestedManyWithoutPostsInput
  tags: TagCreateNestedManyWithoutPostsInput
  likes: LikePostCreateNestedManyWithoutPostInput
  comments: CommentCreateNestedManyWithoutPostInput
  bookmarks: BookmarkPostCreateNestedManyWithoutPostInput
}

input CommentCreateNestedManyWithoutPostInput {
  create: [CommentCreateWithoutPostInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutPostInput!]
  createMany: CommentCreateManyPostInputEnvelope
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateWithoutPostInput {
  id: String
  conent: String!
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  isAnonymously: Boolean
  user: UserCreateNestedOneWithoutCommentsInput
  parent: CommentCreateNestedOneWithoutRepliesInput
  replies: CommentCreateNestedManyWithoutParentInput
  likes: LikePostCreateNestedManyWithoutCommentInput
  dislikes: DislikePostCreateNestedManyWithoutCommentInput
}

input UserCreateNestedOneWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput
  connectOrCreate: UserCreateOrConnectWithoutCommentsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCommentsInput {
  id: String
  avatarUrl: String
  firstName: String!
  lastName: String!
  email: String!
  emailVerified: Boolean
  password: String!
  phoneNumber: String
  workingPosition: WorkPosition
  status: UserStatus
  signInProvider: SignInProvider
  color: String
  role: UserRole
  addressDetail: String
  verifyCode: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  avatar: FileCreateNestedOneWithoutUsersInput
  country: CountryCreateNestedOneWithoutUsersInput
  social: SocialCreateNestedManyWithoutUserInput
  resumes: ResumeCreateNestedManyWithoutUserInput
  workExperiences: WorkExperienceCreateNestedManyWithoutUserInput
  educations: EducationCreateNestedManyWithoutUserInput
  projects: ProjectCreateNestedManyWithoutUserInput
  applications: ApplicationCreateNestedManyWithoutCandidateInput
  posts: PostCreateNestedManyWithoutAuthorInput
  likes: LikePostCreateNestedManyWithoutUserInput
  dislikes: DislikePostCreateNestedManyWithoutUserInput
  bookmarks: BookmarkPostCreateNestedManyWithoutUserInput
  saveJobs: SaveJobCreateNestedManyWithoutUserInput
  payments: PaymentCreateNestedManyWithoutUserInput
  address: UsersOnCityCreateNestedManyWithoutUserInput
  companies: CompanyCreateNestedManyWithoutUserInput
  authorSettings: SettingCreateNestedManyWithoutAuthorInput
  updatedBySettings: SettingCreateNestedManyWithoutUpdatedByInput
}

input BookmarkPostCreateNestedManyWithoutUserInput {
  create: [BookmarkPostCreateWithoutUserInput!]
  connectOrCreate: [BookmarkPostCreateOrConnectWithoutUserInput!]
  createMany: BookmarkPostCreateManyUserInputEnvelope
  connect: [BookmarkPostWhereUniqueInput!]
}

input BookmarkPostCreateWithoutUserInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  post: PostCreateNestedOneWithoutBookmarksInput!
}

input PostCreateNestedOneWithoutBookmarksInput {
  create: PostCreateWithoutBookmarksInput
  connectOrCreate: PostCreateOrConnectWithoutBookmarksInput
  connect: PostWhereUniqueInput
}

input PostCreateWithoutBookmarksInput {
  id: String
  title: String!
  content: String!
  shareUrl: String!
  metadata: JSON
  slug: String!
  minRead: Int
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  jobCategory: JobCategoryCreateNestedOneWithoutPostsInput
  author: UserCreateNestedOneWithoutPostsInput!
  thumbnail: FileCreateNestedOneWithoutPostsInput
  categories: PostCategoryCreateNestedManyWithoutPostsInput
  tags: TagCreateNestedManyWithoutPostsInput
  likes: LikePostCreateNestedManyWithoutPostInput
  dislikes: DislikePostCreateNestedManyWithoutPostInput
  comments: CommentCreateNestedManyWithoutPostInput
}

input PostCreateOrConnectWithoutBookmarksInput {
  where: PostWhereUniqueInput!
  create: PostCreateWithoutBookmarksInput!
}

input BookmarkPostCreateOrConnectWithoutUserInput {
  where: BookmarkPostWhereUniqueInput!
  create: BookmarkPostCreateWithoutUserInput!
}

input BookmarkPostWhereUniqueInput {
  id: String
  AND: [BookmarkPostWhereInput!]
  OR: [BookmarkPostWhereInput!]
  NOT: [BookmarkPostWhereInput!]
  userId: StringFilter
  postId: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  user: UserRelationFilter
  post: PostRelationFilter
}

input BookmarkPostCreateManyUserInputEnvelope {
  data: [BookmarkPostCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input BookmarkPostCreateManyUserInput {
  id: String
  postId: String!
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

input SaveJobCreateNestedManyWithoutUserInput {
  create: [SaveJobCreateWithoutUserInput!]
  connectOrCreate: [SaveJobCreateOrConnectWithoutUserInput!]
  createMany: SaveJobCreateManyUserInputEnvelope
  connect: [SaveJobWhereUniqueInput!]
}

input SaveJobCreateWithoutUserInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  job: JobCreateNestedOneWithoutSaveJobsInput!
}

input JobCreateNestedOneWithoutSaveJobsInput {
  create: JobCreateWithoutSaveJobsInput
  connectOrCreate: JobCreateOrConnectWithoutSaveJobsInput
  connect: JobWhereUniqueInput
}

input JobCreateWithoutSaveJobsInput {
  id: String
  type: JobType!
  level: JobLevel!
  slug: String!
  addressDetail: String
  salary: JobSalary
  salaryMetadata: JSON
  description: String!
  isBoot: Boolean
  numberOfRecruits: Int
  applicationDeadline: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  address: CityCreateNestedOneWithoutJobsInput!
  jobTitle: JobTitleCreateNestedOneWithoutJobsInput!
  jobCategory: JobCategoryCreateNestedOneWithoutJobsInput!
  company: CompanyCreateNestedOneWithoutJobsInput!
  tags: TagCreateNestedManyWithoutJobsInput
  skills: SkillCreateNestedManyWithoutJobsInput
  applications: ApplicationCreateNestedManyWithoutJobInput
}

input ApplicationCreateNestedManyWithoutJobInput {
  create: [ApplicationCreateWithoutJobInput!]
  connectOrCreate: [ApplicationCreateOrConnectWithoutJobInput!]
  createMany: ApplicationCreateManyJobInputEnvelope
  connect: [ApplicationWhereUniqueInput!]
}

input ApplicationCreateWithoutJobInput {
  id: String
  createdAt: DateTime
  status: ApplicationStatus
  type: ApplicationType
  updatedAt: DateTime
  deletedAt: DateTime
  resume: ResumeCreateNestedOneWithoutApplicationsInput!
  candidate: UserCreateNestedOneWithoutApplicationsInput!
}

input UserCreateNestedOneWithoutApplicationsInput {
  create: UserCreateWithoutApplicationsInput
  connectOrCreate: UserCreateOrConnectWithoutApplicationsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutApplicationsInput {
  id: String
  avatarUrl: String
  firstName: String!
  lastName: String!
  email: String!
  emailVerified: Boolean
  password: String!
  phoneNumber: String
  workingPosition: WorkPosition
  status: UserStatus
  signInProvider: SignInProvider
  color: String
  role: UserRole
  addressDetail: String
  verifyCode: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  avatar: FileCreateNestedOneWithoutUsersInput
  country: CountryCreateNestedOneWithoutUsersInput
  social: SocialCreateNestedManyWithoutUserInput
  resumes: ResumeCreateNestedManyWithoutUserInput
  workExperiences: WorkExperienceCreateNestedManyWithoutUserInput
  educations: EducationCreateNestedManyWithoutUserInput
  projects: ProjectCreateNestedManyWithoutUserInput
  posts: PostCreateNestedManyWithoutAuthorInput
  likes: LikePostCreateNestedManyWithoutUserInput
  dislikes: DislikePostCreateNestedManyWithoutUserInput
  comments: CommentCreateNestedManyWithoutUserInput
  bookmarks: BookmarkPostCreateNestedManyWithoutUserInput
  saveJobs: SaveJobCreateNestedManyWithoutUserInput
  payments: PaymentCreateNestedManyWithoutUserInput
  address: UsersOnCityCreateNestedManyWithoutUserInput
  companies: CompanyCreateNestedManyWithoutUserInput
  authorSettings: SettingCreateNestedManyWithoutAuthorInput
  updatedBySettings: SettingCreateNestedManyWithoutUpdatedByInput
}

input PaymentCreateNestedManyWithoutUserInput {
  create: [PaymentCreateWithoutUserInput!]
  connectOrCreate: [PaymentCreateOrConnectWithoutUserInput!]
  createMany: PaymentCreateManyUserInputEnvelope
  connect: [PaymentWhereUniqueInput!]
}

input PaymentCreateWithoutUserInput {
  id: String
  amount: Int!
  currency: String!
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  checkouts: CheckoutSessionCreateNestedManyWithoutPaymentInput
  invoices: InvoiceCreateNestedManyWithoutPaymentInput
}

input CheckoutSessionCreateNestedManyWithoutPaymentInput {
  create: [CheckoutSessionCreateWithoutPaymentInput!]
  connectOrCreate: [CheckoutSessionCreateOrConnectWithoutPaymentInput!]
  createMany: CheckoutSessionCreateManyPaymentInputEnvelope
  connect: [CheckoutSessionWhereUniqueInput!]
}

input CheckoutSessionCreateWithoutPaymentInput {
  sessionId: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input CheckoutSessionCreateOrConnectWithoutPaymentInput {
  where: CheckoutSessionWhereUniqueInput!
  create: CheckoutSessionCreateWithoutPaymentInput!
}

input CheckoutSessionWhereUniqueInput {
  id: Int
  AND: [CheckoutSessionWhereInput!]
  OR: [CheckoutSessionWhereInput!]
  NOT: [CheckoutSessionWhereInput!]
  sessionId: StringFilter
  paymentId: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  payment: PaymentRelationFilter
}

input CheckoutSessionCreateManyPaymentInputEnvelope {
  data: [CheckoutSessionCreateManyPaymentInput!]!
  skipDuplicates: Boolean
}

input CheckoutSessionCreateManyPaymentInput {
  id: Int
  sessionId: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input InvoiceCreateNestedManyWithoutPaymentInput {
  create: [InvoiceCreateWithoutPaymentInput!]
  connectOrCreate: [InvoiceCreateOrConnectWithoutPaymentInput!]
  createMany: InvoiceCreateManyPaymentInputEnvelope
  connect: [InvoiceWhereUniqueInput!]
}

input InvoiceCreateWithoutPaymentInput {
  customerId: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input InvoiceCreateOrConnectWithoutPaymentInput {
  where: InvoiceWhereUniqueInput!
  create: InvoiceCreateWithoutPaymentInput!
}

input InvoiceWhereUniqueInput {
  id: Int
  AND: [InvoiceWhereInput!]
  OR: [InvoiceWhereInput!]
  NOT: [InvoiceWhereInput!]
  customerId: StringFilter
  paymentId: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  payment: PaymentRelationFilter
}

input InvoiceCreateManyPaymentInputEnvelope {
  data: [InvoiceCreateManyPaymentInput!]!
  skipDuplicates: Boolean
}

input InvoiceCreateManyPaymentInput {
  id: Int
  customerId: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input PaymentCreateOrConnectWithoutUserInput {
  where: PaymentWhereUniqueInput!
  create: PaymentCreateWithoutUserInput!
}

input PaymentWhereUniqueInput {
  id: String
  AND: [PaymentWhereInput!]
  OR: [PaymentWhereInput!]
  NOT: [PaymentWhereInput!]
  amount: IntFilter
  currency: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  userId: StringFilter
  checkouts: CheckoutSessionListRelationFilter
  invoices: InvoiceListRelationFilter
  user: UserRelationFilter
}

input PaymentCreateManyUserInputEnvelope {
  data: [PaymentCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input PaymentCreateManyUserInput {
  id: String
  amount: Int!
  currency: String!
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

input UsersOnCityCreateNestedManyWithoutUserInput {
  create: [UsersOnCityCreateWithoutUserInput!]
  connectOrCreate: [UsersOnCityCreateOrConnectWithoutUserInput!]
  createMany: UsersOnCityCreateManyUserInputEnvelope
  connect: [UsersOnCityWhereUniqueInput!]
}

input UsersOnCityCreateWithoutUserInput {
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  city: CityCreateNestedOneWithoutUsersInput!
}

input CityCreateNestedOneWithoutUsersInput {
  create: CityCreateWithoutUsersInput
  connectOrCreate: CityCreateOrConnectWithoutUsersInput
  connect: CityWhereUniqueInput
}

input CityCreateWithoutUsersInput {
  name: String!
  stateCode: String
  stateName: String
  countryCode: String
  countryName: String
  latitude: String
  longitude: String
  wikiDataId: String!
  state: StateCreateNestedOneWithoutCitiesInput
  country: CountryCreateNestedOneWithoutCitiesInput
  companies: CompanyCreateNestedManyWithoutAddressInput
  jobs: JobCreateNestedManyWithoutAddressInput
  resumes: ResumeCreateNestedManyWithoutAddressInput
  workExperiences: WorkExperienceCreateNestedManyWithoutAddressInput
}

input ResumeCreateNestedManyWithoutAddressInput {
  create: [ResumeCreateWithoutAddressInput!]
  connectOrCreate: [ResumeCreateOrConnectWithoutAddressInput!]
  createMany: ResumeCreateManyAddressInputEnvelope
  connect: [ResumeWhereUniqueInput!]
}

input ResumeCreateWithoutAddressInput {
  id: String
  name: String!
  fullName: String
  email: String
  addressDetail: String
  description: String!
  isSummary: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  user: UserCreateNestedOneWithoutResumesInput!
  avatar: FileCreateNestedOneWithoutResumeInput
  language: LanguageCreateNestedOneWithoutResumesInput
  jobTitle: JobTitleCreateNestedOneWithoutResumesInput!
  applications: ApplicationCreateNestedManyWithoutResumeInput
  workExperiences: WorkExperienceCreateNestedManyWithoutResumeInput
  educations: EducationCreateNestedManyWithoutResumeInput
  skills: SkillCreateNestedManyWithoutResumeInput
  projects: ProjectCreateNestedManyWithoutResumeInput
  socials: SocialCreateNestedManyWithoutResumeInput
  languageSkills: LanguageSkillCreateNestedManyWithoutResumeInput
  activities: ActivityCreateNestedManyWithoutResumeInput
}

input SkillCreateNestedManyWithoutResumeInput {
  create: [SkillCreateWithoutResumeInput!]
  connectOrCreate: [SkillCreateOrConnectWithoutResumeInput!]
  createMany: SkillCreateManyResumeInputEnvelope
  connect: [SkillWhereUniqueInput!]
}

input SkillCreateWithoutResumeInput {
  id: String
  content: String!
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  projects: ProjectCreateNestedManyWithoutTechStacksInput
  jobs: JobCreateNestedManyWithoutSkillsInput
}

input JobCreateNestedManyWithoutSkillsInput {
  create: [JobCreateWithoutSkillsInput!]
  connectOrCreate: [JobCreateOrConnectWithoutSkillsInput!]
  connect: [JobWhereUniqueInput!]
}

input JobCreateWithoutSkillsInput {
  id: String
  type: JobType!
  level: JobLevel!
  slug: String!
  addressDetail: String
  salary: JobSalary
  salaryMetadata: JSON
  description: String!
  isBoot: Boolean
  numberOfRecruits: Int
  applicationDeadline: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  address: CityCreateNestedOneWithoutJobsInput!
  jobTitle: JobTitleCreateNestedOneWithoutJobsInput!
  jobCategory: JobCategoryCreateNestedOneWithoutJobsInput!
  company: CompanyCreateNestedOneWithoutJobsInput!
  tags: TagCreateNestedManyWithoutJobsInput
  applications: ApplicationCreateNestedManyWithoutJobInput
  saveJobs: SaveJobCreateNestedManyWithoutJobInput
}

input SaveJobCreateNestedManyWithoutJobInput {
  create: [SaveJobCreateWithoutJobInput!]
  connectOrCreate: [SaveJobCreateOrConnectWithoutJobInput!]
  createMany: SaveJobCreateManyJobInputEnvelope
  connect: [SaveJobWhereUniqueInput!]
}

input SaveJobCreateWithoutJobInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  user: UserCreateNestedOneWithoutSaveJobsInput!
}

input UserCreateNestedOneWithoutSaveJobsInput {
  create: UserCreateWithoutSaveJobsInput
  connectOrCreate: UserCreateOrConnectWithoutSaveJobsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutSaveJobsInput {
  id: String
  avatarUrl: String
  firstName: String!
  lastName: String!
  email: String!
  emailVerified: Boolean
  password: String!
  phoneNumber: String
  workingPosition: WorkPosition
  status: UserStatus
  signInProvider: SignInProvider
  color: String
  role: UserRole
  addressDetail: String
  verifyCode: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  avatar: FileCreateNestedOneWithoutUsersInput
  country: CountryCreateNestedOneWithoutUsersInput
  social: SocialCreateNestedManyWithoutUserInput
  resumes: ResumeCreateNestedManyWithoutUserInput
  workExperiences: WorkExperienceCreateNestedManyWithoutUserInput
  educations: EducationCreateNestedManyWithoutUserInput
  projects: ProjectCreateNestedManyWithoutUserInput
  applications: ApplicationCreateNestedManyWithoutCandidateInput
  posts: PostCreateNestedManyWithoutAuthorInput
  likes: LikePostCreateNestedManyWithoutUserInput
  dislikes: DislikePostCreateNestedManyWithoutUserInput
  comments: CommentCreateNestedManyWithoutUserInput
  bookmarks: BookmarkPostCreateNestedManyWithoutUserInput
  payments: PaymentCreateNestedManyWithoutUserInput
  address: UsersOnCityCreateNestedManyWithoutUserInput
  companies: CompanyCreateNestedManyWithoutUserInput
  authorSettings: SettingCreateNestedManyWithoutAuthorInput
  updatedBySettings: SettingCreateNestedManyWithoutUpdatedByInput
}

input CompanyCreateNestedManyWithoutUserInput {
  create: [CompanyCreateWithoutUserInput!]
  connectOrCreate: [CompanyCreateOrConnectWithoutUserInput!]
  createMany: CompanyCreateManyUserInputEnvelope
  connect: [CompanyWhereUniqueInput!]
}

input CompanyCreateWithoutUserInput {
  id: String
  name: String!
  slug: String!
  addressDetail: String!
  description: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  avatar: FileCreateNestedOneWithoutCompanyInput
  type: CompanyTypeCreateNestedOneWithoutCompaniesInput
  size: CompanySizeCreateNestedOneWithoutCompaniesInput
  photos: FileCreateNestedManyWithoutCompaniesInput
  address: CityCreateNestedOneWithoutCompaniesInput!
  industries: JobCategoryCreateNestedManyWithoutCompaniesInput
  social: SocialCreateNestedManyWithoutCompanyInput
  jobs: JobCreateNestedManyWithoutCompanyInput
  workExperiences: WorkExperienceCreateNestedManyWithoutCompanyInput
  projects: ProjectCreateNestedManyWithoutCompanyInput
  references: ReferenceCreateNestedManyWithoutCompanyInput
}

input ReferenceCreateNestedManyWithoutCompanyInput {
  create: [ReferenceCreateWithoutCompanyInput!]
  connectOrCreate: [ReferenceCreateOrConnectWithoutCompanyInput!]
  createMany: ReferenceCreateManyCompanyInputEnvelope
  connect: [ReferenceWhereUniqueInput!]
}

input ReferenceCreateWithoutCompanyInput {
  id: String
  fullName: String!
  email: String!
  phoneNumber: String
  phoneCode: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

input ReferenceCreateOrConnectWithoutCompanyInput {
  where: ReferenceWhereUniqueInput!
  create: ReferenceCreateWithoutCompanyInput!
}

input ReferenceWhereUniqueInput {
  id: String
  AND: [ReferenceWhereInput!]
  OR: [ReferenceWhereInput!]
  NOT: [ReferenceWhereInput!]
  fullName: StringFilter
  email: StringFilter
  phoneNumber: StringNullableFilter
  phoneCode: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  companyId: StringFilter
  company: CompanyRelationFilter
}

input ReferenceCreateManyCompanyInputEnvelope {
  data: [ReferenceCreateManyCompanyInput!]!
  skipDuplicates: Boolean
}

input ReferenceCreateManyCompanyInput {
  id: String
  fullName: String!
  email: String!
  phoneNumber: String
  phoneCode: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

input CompanyCreateOrConnectWithoutUserInput {
  where: CompanyWhereUniqueInput!
  create: CompanyCreateWithoutUserInput!
}

input CompanyCreateManyUserInputEnvelope {
  data: [CompanyCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input CompanyCreateManyUserInput {
  id: String
  name: String!
  slug: String!
  avatarId: String
  companyTypeId: String
  companySizeId: String
  addressDetail: String!
  cityId: Int!
  description: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

input SettingCreateNestedManyWithoutAuthorInput {
  create: [SettingCreateWithoutAuthorInput!]
  connectOrCreate: [SettingCreateOrConnectWithoutAuthorInput!]
  createMany: SettingCreateManyAuthorInputEnvelope
  connect: [SettingWhereUniqueInput!]
}

input SettingCreateWithoutAuthorInput {
  key: String!
  type: String!
  value: JSON!
  showWith: SettingCreateshowWithInput
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  updatedBy: UserCreateNestedOneWithoutUpdatedBySettingsInput
}

input SettingCreateshowWithInput {
  set: [UserRole!]!
}

input UserCreateNestedOneWithoutUpdatedBySettingsInput {
  create: UserCreateWithoutUpdatedBySettingsInput
  connectOrCreate: UserCreateOrConnectWithoutUpdatedBySettingsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutUpdatedBySettingsInput {
  id: String
  avatarUrl: String
  firstName: String!
  lastName: String!
  email: String!
  emailVerified: Boolean
  password: String!
  phoneNumber: String
  workingPosition: WorkPosition
  status: UserStatus
  signInProvider: SignInProvider
  color: String
  role: UserRole
  addressDetail: String
  verifyCode: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  avatar: FileCreateNestedOneWithoutUsersInput
  country: CountryCreateNestedOneWithoutUsersInput
  social: SocialCreateNestedManyWithoutUserInput
  resumes: ResumeCreateNestedManyWithoutUserInput
  workExperiences: WorkExperienceCreateNestedManyWithoutUserInput
  educations: EducationCreateNestedManyWithoutUserInput
  projects: ProjectCreateNestedManyWithoutUserInput
  applications: ApplicationCreateNestedManyWithoutCandidateInput
  posts: PostCreateNestedManyWithoutAuthorInput
  likes: LikePostCreateNestedManyWithoutUserInput
  dislikes: DislikePostCreateNestedManyWithoutUserInput
  comments: CommentCreateNestedManyWithoutUserInput
  bookmarks: BookmarkPostCreateNestedManyWithoutUserInput
  saveJobs: SaveJobCreateNestedManyWithoutUserInput
  payments: PaymentCreateNestedManyWithoutUserInput
  address: UsersOnCityCreateNestedManyWithoutUserInput
  companies: CompanyCreateNestedManyWithoutUserInput
  authorSettings: SettingCreateNestedManyWithoutAuthorInput
}

input UserCreateOrConnectWithoutUpdatedBySettingsInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutUpdatedBySettingsInput!
}

input SettingCreateOrConnectWithoutAuthorInput {
  where: SettingWhereUniqueInput!
  create: SettingCreateWithoutAuthorInput!
}

input SettingCreateManyAuthorInputEnvelope {
  data: [SettingCreateManyAuthorInput!]!
  skipDuplicates: Boolean
}

input SettingCreateManyAuthorInput {
  key: String!
  type: String!
  value: JSON!
  showWith: SettingCreateshowWithInput
  updatedById: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

input SettingCreateNestedManyWithoutUpdatedByInput {
  create: [SettingCreateWithoutUpdatedByInput!]
  connectOrCreate: [SettingCreateOrConnectWithoutUpdatedByInput!]
  createMany: SettingCreateManyUpdatedByInputEnvelope
  connect: [SettingWhereUniqueInput!]
}

input SettingCreateWithoutUpdatedByInput {
  key: String!
  type: String!
  value: JSON!
  showWith: SettingCreateshowWithInput
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  author: UserCreateNestedOneWithoutAuthorSettingsInput
}

input UserCreateNestedOneWithoutAuthorSettingsInput {
  create: UserCreateWithoutAuthorSettingsInput
  connectOrCreate: UserCreateOrConnectWithoutAuthorSettingsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutAuthorSettingsInput {
  id: String
  avatarUrl: String
  firstName: String!
  lastName: String!
  email: String!
  emailVerified: Boolean
  password: String!
  phoneNumber: String
  workingPosition: WorkPosition
  status: UserStatus
  signInProvider: SignInProvider
  color: String
  role: UserRole
  addressDetail: String
  verifyCode: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  avatar: FileCreateNestedOneWithoutUsersInput
  country: CountryCreateNestedOneWithoutUsersInput
  social: SocialCreateNestedManyWithoutUserInput
  resumes: ResumeCreateNestedManyWithoutUserInput
  workExperiences: WorkExperienceCreateNestedManyWithoutUserInput
  educations: EducationCreateNestedManyWithoutUserInput
  projects: ProjectCreateNestedManyWithoutUserInput
  applications: ApplicationCreateNestedManyWithoutCandidateInput
  posts: PostCreateNestedManyWithoutAuthorInput
  likes: LikePostCreateNestedManyWithoutUserInput
  dislikes: DislikePostCreateNestedManyWithoutUserInput
  comments: CommentCreateNestedManyWithoutUserInput
  bookmarks: BookmarkPostCreateNestedManyWithoutUserInput
  saveJobs: SaveJobCreateNestedManyWithoutUserInput
  payments: PaymentCreateNestedManyWithoutUserInput
  address: UsersOnCityCreateNestedManyWithoutUserInput
  companies: CompanyCreateNestedManyWithoutUserInput
  updatedBySettings: SettingCreateNestedManyWithoutUpdatedByInput
}

input UserCreateOrConnectWithoutAuthorSettingsInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutAuthorSettingsInput!
}

input SettingCreateOrConnectWithoutUpdatedByInput {
  where: SettingWhereUniqueInput!
  create: SettingCreateWithoutUpdatedByInput!
}

input SettingCreateManyUpdatedByInputEnvelope {
  data: [SettingCreateManyUpdatedByInput!]!
  skipDuplicates: Boolean
}

input SettingCreateManyUpdatedByInput {
  key: String!
  type: String!
  value: JSON!
  authorId: String
  showWith: SettingCreateshowWithInput
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

input UserCreateOrConnectWithoutSaveJobsInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutSaveJobsInput!
}

input SaveJobCreateOrConnectWithoutJobInput {
  where: SaveJobWhereUniqueInput!
  create: SaveJobCreateWithoutJobInput!
}

input SaveJobWhereUniqueInput {
  id: String
  AND: [SaveJobWhereInput!]
  OR: [SaveJobWhereInput!]
  NOT: [SaveJobWhereInput!]
  userId: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  jobId: StringFilter
  user: UserRelationFilter
  job: JobRelationFilter
}

input SaveJobCreateManyJobInputEnvelope {
  data: [SaveJobCreateManyJobInput!]!
  skipDuplicates: Boolean
}

input SaveJobCreateManyJobInput {
  id: String
  userId: String!
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

input JobCreateOrConnectWithoutSkillsInput {
  where: JobWhereUniqueInput!
  create: JobCreateWithoutSkillsInput!
}

input SkillCreateOrConnectWithoutResumeInput {
  where: SkillWhereUniqueInput!
  create: SkillCreateWithoutResumeInput!
}

input SkillCreateManyResumeInputEnvelope {
  data: [SkillCreateManyResumeInput!]!
  skipDuplicates: Boolean
}

input SkillCreateManyResumeInput {
  id: String
  content: String!
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

input ProjectCreateNestedManyWithoutResumeInput {
  create: [ProjectCreateWithoutResumeInput!]
  connectOrCreate: [ProjectCreateOrConnectWithoutResumeInput!]
  createMany: ProjectCreateManyResumeInputEnvelope
  connect: [ProjectWhereUniqueInput!]
}

input ProjectCreateWithoutResumeInput {
  id: String
  title: String!
  description: String!
  teamSize: Int!
  role: ProjectCreateroleInput
  startAt: DateTime!
  endAt: DateTime
  refeUrls: ProjectCreaterefeUrlsInput
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  techStacks: SkillCreateNestedManyWithoutProjectsInput
  company: CompanyCreateNestedOneWithoutProjectsInput!
  thumbnail: FileCreateNestedOneWithoutProjectsInput
  user: UserCreateNestedOneWithoutProjectsInput!
}

input ProjectCreateOrConnectWithoutResumeInput {
  where: ProjectWhereUniqueInput!
  create: ProjectCreateWithoutResumeInput!
}

input ProjectWhereUniqueInput {
  id: String
  AND: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
  title: StringFilter
  description: StringFilter
  teamSize: IntFilter
  role: StringNullableListFilter
  startAt: DateTimeFilter
  endAt: DateTimeNullableFilter
  refeUrls: StringNullableListFilter
  thumbnailId: StringNullableFilter
  companyId: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  userId: StringFilter
  resumeId: StringNullableFilter
  techStacks: SkillListRelationFilter
  company: CompanyRelationFilter
  thumbnail: FileNullableRelationFilter
  user: UserRelationFilter
  Resume: ResumeNullableRelationFilter
}

input ProjectCreateManyResumeInputEnvelope {
  data: [ProjectCreateManyResumeInput!]!
  skipDuplicates: Boolean
}

input ProjectCreateManyResumeInput {
  id: String
  title: String!
  description: String!
  teamSize: Int!
  role: ProjectCreateroleInput
  startAt: DateTime!
  endAt: DateTime
  refeUrls: ProjectCreaterefeUrlsInput
  thumbnailId: String
  companyId: String!
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  userId: String!
}

input SocialCreateNestedManyWithoutResumeInput {
  create: [SocialCreateWithoutResumeInput!]
  connectOrCreate: [SocialCreateOrConnectWithoutResumeInput!]
  createMany: SocialCreateManyResumeInputEnvelope
  connect: [SocialWhereUniqueInput!]
}

input SocialCreateWithoutResumeInput {
  id: String
  type: SocialType
  url: String!
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  company: CompanyCreateNestedOneWithoutSocialInput
  user: UserCreateNestedOneWithoutSocialInput
}

input SocialCreateOrConnectWithoutResumeInput {
  where: SocialWhereUniqueInput!
  create: SocialCreateWithoutResumeInput!
}

input SocialWhereUniqueInput {
  id: String
  AND: [SocialWhereInput!]
  OR: [SocialWhereInput!]
  NOT: [SocialWhereInput!]
  type: EnumSocialTypeNullableFilter
  url: StringFilter
  companyId: StringNullableFilter
  userId: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  resumeId: StringNullableFilter
  company: CompanyNullableRelationFilter
  user: UserNullableRelationFilter
  resume: ResumeNullableRelationFilter
}

input SocialCreateManyResumeInputEnvelope {
  data: [SocialCreateManyResumeInput!]!
  skipDuplicates: Boolean
}

input SocialCreateManyResumeInput {
  id: String
  type: SocialType
  url: String!
  companyId: String
  userId: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

input LanguageSkillCreateNestedManyWithoutResumeInput {
  create: [LanguageSkillCreateWithoutResumeInput!]
  connectOrCreate: [LanguageSkillCreateOrConnectWithoutResumeInput!]
  createMany: LanguageSkillCreateManyResumeInputEnvelope
  connect: [LanguageSkillWhereUniqueInput!]
}

input LanguageSkillCreateWithoutResumeInput {
  id: String
  name: String!
  locale: String!
  proficiencyLevel: ProficiencyLevel!
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  language: LanguageCreateNestedOneWithoutLanguageSkillInput!
}

input LanguageCreateNestedOneWithoutLanguageSkillInput {
  create: LanguageCreateWithoutLanguageSkillInput
  connectOrCreate: LanguageCreateOrConnectWithoutLanguageSkillInput
  connect: LanguageWhereUniqueInput
}

input LanguageCreateWithoutLanguageSkillInput {
  id: String
  name: String!
  locale: String!
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  resumes: ResumeCreateNestedManyWithoutLanguageInput
}

input ResumeCreateNestedManyWithoutLanguageInput {
  create: [ResumeCreateWithoutLanguageInput!]
  connectOrCreate: [ResumeCreateOrConnectWithoutLanguageInput!]
  createMany: ResumeCreateManyLanguageInputEnvelope
  connect: [ResumeWhereUniqueInput!]
}

input ResumeCreateWithoutLanguageInput {
  id: String
  name: String!
  fullName: String
  email: String
  addressDetail: String
  description: String!
  isSummary: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  user: UserCreateNestedOneWithoutResumesInput!
  avatar: FileCreateNestedOneWithoutResumeInput
  address: CityCreateNestedOneWithoutResumesInput
  jobTitle: JobTitleCreateNestedOneWithoutResumesInput!
  applications: ApplicationCreateNestedManyWithoutResumeInput
  workExperiences: WorkExperienceCreateNestedManyWithoutResumeInput
  educations: EducationCreateNestedManyWithoutResumeInput
  skills: SkillCreateNestedManyWithoutResumeInput
  projects: ProjectCreateNestedManyWithoutResumeInput
  socials: SocialCreateNestedManyWithoutResumeInput
  languageSkills: LanguageSkillCreateNestedManyWithoutResumeInput
  activities: ActivityCreateNestedManyWithoutResumeInput
}

input ActivityCreateNestedManyWithoutResumeInput {
  create: [ActivityCreateWithoutResumeInput!]
  connectOrCreate: [ActivityCreateOrConnectWithoutResumeInput!]
  createMany: ActivityCreateManyResumeInputEnvelope
  connect: [ActivityWhereUniqueInput!]
}

input ActivityCreateWithoutResumeInput {
  id: String
  name: String!
  startAt: DateTime!
  endAt: DateTime
  descriotion: String!
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

input ActivityCreateOrConnectWithoutResumeInput {
  where: ActivityWhereUniqueInput!
  create: ActivityCreateWithoutResumeInput!
}

input ActivityWhereUniqueInput {
  id: String
  AND: [ActivityWhereInput!]
  OR: [ActivityWhereInput!]
  NOT: [ActivityWhereInput!]
  name: StringFilter
  startAt: DateTimeFilter
  endAt: DateTimeNullableFilter
  descriotion: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  resumeId: StringNullableFilter
  resume: ResumeNullableRelationFilter
}

input ActivityCreateManyResumeInputEnvelope {
  data: [ActivityCreateManyResumeInput!]!
  skipDuplicates: Boolean
}

input ActivityCreateManyResumeInput {
  id: String
  name: String!
  startAt: DateTime!
  endAt: DateTime
  descriotion: String!
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

input ResumeCreateOrConnectWithoutLanguageInput {
  where: ResumeWhereUniqueInput!
  create: ResumeCreateWithoutLanguageInput!
}

input ResumeWhereUniqueInput {
  id: String
  AND: [ResumeWhereInput!]
  OR: [ResumeWhereInput!]
  NOT: [ResumeWhereInput!]
  name: StringFilter
  fullName: StringNullableFilter
  email: StringNullableFilter
  addressDetail: StringNullableFilter
  description: StringFilter
  isSummary: BoolNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  languageId: StringFilter
  jobTitleId: StringFilter
  userId: StringFilter
  fileId: StringNullableFilter
  cityId: IntNullableFilter
  user: UserRelationFilter
  avatar: FileNullableRelationFilter
  address: CityNullableRelationFilter
  language: LanguageNullableRelationFilter
  jobTitle: JobTitleRelationFilter
  applications: ApplicationListRelationFilter
  workExperiences: WorkExperienceListRelationFilter
  educations: EducationListRelationFilter
  skills: SkillListRelationFilter
  projects: ProjectListRelationFilter
  socials: SocialListRelationFilter
  languageSkills: LanguageSkillListRelationFilter
  activities: ActivityListRelationFilter
}

input ResumeCreateManyLanguageInputEnvelope {
  data: [ResumeCreateManyLanguageInput!]!
  skipDuplicates: Boolean
}

input ResumeCreateManyLanguageInput {
  id: String
  name: String!
  fullName: String
  email: String
  addressDetail: String
  description: String!
  isSummary: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  jobTitleId: String!
  userId: String!
  fileId: String
  cityId: Int
}

input LanguageCreateOrConnectWithoutLanguageSkillInput {
  where: LanguageWhereUniqueInput!
  create: LanguageCreateWithoutLanguageSkillInput!
}

input LanguageWhereUniqueInput {
  id: String
  AND: [LanguageWhereInput!]
  OR: [LanguageWhereInput!]
  NOT: [LanguageWhereInput!]
  name: StringFilter
  locale: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  resumes: ResumeListRelationFilter
  languageSkill: LanguageSkillListRelationFilter
}

input LanguageSkillCreateOrConnectWithoutResumeInput {
  where: LanguageSkillWhereUniqueInput!
  create: LanguageSkillCreateWithoutResumeInput!
}

input LanguageSkillWhereUniqueInput {
  id: String
  AND: [LanguageSkillWhereInput!]
  OR: [LanguageSkillWhereInput!]
  NOT: [LanguageSkillWhereInput!]
  name: StringFilter
  locale: StringFilter
  proficiencyLevel: EnumProficiencyLevelFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  languageId: StringFilter
  resumeId: StringNullableFilter
  language: LanguageRelationFilter
  resume: ResumeNullableRelationFilter
}

input LanguageSkillCreateManyResumeInputEnvelope {
  data: [LanguageSkillCreateManyResumeInput!]!
  skipDuplicates: Boolean
}

input LanguageSkillCreateManyResumeInput {
  id: String
  name: String!
  locale: String!
  proficiencyLevel: ProficiencyLevel!
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  languageId: String!
}

input ResumeCreateOrConnectWithoutAddressInput {
  where: ResumeWhereUniqueInput!
  create: ResumeCreateWithoutAddressInput!
}

input ResumeCreateManyAddressInputEnvelope {
  data: [ResumeCreateManyAddressInput!]!
  skipDuplicates: Boolean
}

input ResumeCreateManyAddressInput {
  id: String
  name: String!
  fullName: String
  email: String
  addressDetail: String
  description: String!
  isSummary: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  languageId: String!
  jobTitleId: String!
  userId: String!
  fileId: String
}

input WorkExperienceCreateNestedManyWithoutAddressInput {
  create: [WorkExperienceCreateWithoutAddressInput!]
  connectOrCreate: [WorkExperienceCreateOrConnectWithoutAddressInput!]
  createMany: WorkExperienceCreateManyAddressInputEnvelope
  connect: [WorkExperienceWhereUniqueInput!]
}

input WorkExperienceCreateWithoutAddressInput {
  id: String
  isFreelancer: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  startAt: DateTime!
  endAt: DateTime
  description: String!
  jobTitle: JobTitleCreateNestedOneWithoutWorkExperiencesInput!
  user: UserCreateNestedOneWithoutWorkExperiencesInput!
  company: CompanyCreateNestedOneWithoutWorkExperiencesInput
  resume: ResumeCreateNestedOneWithoutWorkExperiencesInput
}

input WorkExperienceCreateOrConnectWithoutAddressInput {
  where: WorkExperienceWhereUniqueInput!
  create: WorkExperienceCreateWithoutAddressInput!
}

input WorkExperienceWhereUniqueInput {
  id: String
  AND: [WorkExperienceWhereInput!]
  OR: [WorkExperienceWhereInput!]
  NOT: [WorkExperienceWhereInput!]
  isFreelancer: BoolNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  jobTitleId: StringFilter
  userId: StringFilter
  resumeId: StringNullableFilter
  companyId: StringNullableFilter
  cityId: IntNullableFilter
  startAt: DateTimeFilter
  endAt: DateTimeNullableFilter
  description: StringFilter
  jobTitle: JobTitleRelationFilter
  user: UserRelationFilter
  company: CompanyNullableRelationFilter
  resume: ResumeNullableRelationFilter
  address: CityNullableRelationFilter
}

input WorkExperienceCreateManyAddressInputEnvelope {
  data: [WorkExperienceCreateManyAddressInput!]!
  skipDuplicates: Boolean
}

input WorkExperienceCreateManyAddressInput {
  id: String
  isFreelancer: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  jobTitleId: String!
  userId: String!
  resumeId: String
  companyId: String
  startAt: DateTime!
  endAt: DateTime
  description: String!
}

input CityCreateOrConnectWithoutUsersInput {
  where: CityWhereUniqueInput!
  create: CityCreateWithoutUsersInput!
}

input UsersOnCityCreateOrConnectWithoutUserInput {
  where: UsersOnCityWhereUniqueInput!
  create: UsersOnCityCreateWithoutUserInput!
}

input UsersOnCityWhereUniqueInput {
  userId_cityId: UsersOnCityUserIdCityIdCompoundUniqueInput
  AND: [UsersOnCityWhereInput!]
  OR: [UsersOnCityWhereInput!]
  NOT: [UsersOnCityWhereInput!]
  userId: StringFilter
  cityId: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  user: UserRelationFilter
  city: CityRelationFilter
}

input UsersOnCityUserIdCityIdCompoundUniqueInput {
  userId: String!
  cityId: Int!
}

input UsersOnCityCreateManyUserInputEnvelope {
  data: [UsersOnCityCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input UsersOnCityCreateManyUserInput {
  cityId: Int!
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

input UserCreateOrConnectWithoutApplicationsInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutApplicationsInput!
}

input ApplicationCreateOrConnectWithoutJobInput {
  where: ApplicationWhereUniqueInput!
  create: ApplicationCreateWithoutJobInput!
}

input ApplicationWhereUniqueInput {
  id: String
  AND: [ApplicationWhereInput!]
  OR: [ApplicationWhereInput!]
  NOT: [ApplicationWhereInput!]
  createdAt: DateTimeFilter
  status: EnumApplicationStatusNullableFilter
  type: EnumApplicationTypeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  resumeId: StringFilter
  jobId: StringFilter
  userId: StringFilter
  resume: ResumeRelationFilter
  job: JobRelationFilter
  candidate: UserRelationFilter
}

input ApplicationCreateManyJobInputEnvelope {
  data: [ApplicationCreateManyJobInput!]!
  skipDuplicates: Boolean
}

input ApplicationCreateManyJobInput {
  id: String
  createdAt: DateTime
  status: ApplicationStatus
  type: ApplicationType
  updatedAt: DateTime
  deletedAt: DateTime
  resumeId: String!
  userId: String!
}

input JobCreateOrConnectWithoutSaveJobsInput {
  where: JobWhereUniqueInput!
  create: JobCreateWithoutSaveJobsInput!
}

input SaveJobCreateOrConnectWithoutUserInput {
  where: SaveJobWhereUniqueInput!
  create: SaveJobCreateWithoutUserInput!
}

input SaveJobCreateManyUserInputEnvelope {
  data: [SaveJobCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input SaveJobCreateManyUserInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  jobId: String!
}

input UserCreateOrConnectWithoutCommentsInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutCommentsInput!
}

input CommentCreateNestedOneWithoutRepliesInput {
  create: CommentCreateWithoutRepliesInput
  connectOrCreate: CommentCreateOrConnectWithoutRepliesInput
  connect: CommentWhereUniqueInput
}

input CommentCreateWithoutRepliesInput {
  id: String
  conent: String!
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  isAnonymously: Boolean
  post: PostCreateNestedOneWithoutCommentsInput!
  user: UserCreateNestedOneWithoutCommentsInput
  parent: CommentCreateNestedOneWithoutRepliesInput
  likes: LikePostCreateNestedManyWithoutCommentInput
  dislikes: DislikePostCreateNestedManyWithoutCommentInput
}

input LikePostCreateNestedManyWithoutCommentInput {
  create: [LikePostCreateWithoutCommentInput!]
  connectOrCreate: [LikePostCreateOrConnectWithoutCommentInput!]
  createMany: LikePostCreateManyCommentInputEnvelope
  connect: [LikePostWhereUniqueInput!]
}

input LikePostCreateWithoutCommentInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  user: UserCreateNestedOneWithoutLikesInput
  post: PostCreateNestedOneWithoutLikesInput!
}

input LikePostCreateOrConnectWithoutCommentInput {
  where: LikePostWhereUniqueInput!
  create: LikePostCreateWithoutCommentInput!
}

input LikePostWhereUniqueInput {
  id: String
  AND: [LikePostWhereInput!]
  OR: [LikePostWhereInput!]
  NOT: [LikePostWhereInput!]
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  userId: StringNullableFilter
  postId: StringFilter
  commentId: StringNullableFilter
  user: UserNullableRelationFilter
  post: PostRelationFilter
  comment: CommentNullableRelationFilter
}

input LikePostCreateManyCommentInputEnvelope {
  data: [LikePostCreateManyCommentInput!]!
  skipDuplicates: Boolean
}

input LikePostCreateManyCommentInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  userId: String
  postId: String!
}

input DislikePostCreateNestedManyWithoutCommentInput {
  create: [DislikePostCreateWithoutCommentInput!]
  connectOrCreate: [DislikePostCreateOrConnectWithoutCommentInput!]
  createMany: DislikePostCreateManyCommentInputEnvelope
  connect: [DislikePostWhereUniqueInput!]
}

input DislikePostCreateWithoutCommentInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  user: UserCreateNestedOneWithoutDislikesInput
  post: PostCreateNestedOneWithoutDislikesInput!
}

input DislikePostCreateOrConnectWithoutCommentInput {
  where: DislikePostWhereUniqueInput!
  create: DislikePostCreateWithoutCommentInput!
}

input DislikePostWhereUniqueInput {
  id: String
  AND: [DislikePostWhereInput!]
  OR: [DislikePostWhereInput!]
  NOT: [DislikePostWhereInput!]
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  userId: StringNullableFilter
  postId: StringFilter
  commentId: StringNullableFilter
  user: UserNullableRelationFilter
  post: PostRelationFilter
  comment: CommentNullableRelationFilter
}

input DislikePostCreateManyCommentInputEnvelope {
  data: [DislikePostCreateManyCommentInput!]!
  skipDuplicates: Boolean
}

input DislikePostCreateManyCommentInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  userId: String
  postId: String!
}

input CommentCreateOrConnectWithoutRepliesInput {
  where: CommentWhereUniqueInput!
  create: CommentCreateWithoutRepliesInput!
}

input CommentWhereUniqueInput {
  id: String
  AND: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
  userId: StringNullableFilter
  conent: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  postId: StringFilter
  isAnonymously: BoolNullableFilter
  parentId: StringNullableFilter
  post: PostRelationFilter
  user: UserNullableRelationFilter
  parent: CommentNullableRelationFilter
  replies: CommentListRelationFilter
  likes: LikePostListRelationFilter
  dislikes: DislikePostListRelationFilter
}

input CommentCreateNestedManyWithoutParentInput {
  create: [CommentCreateWithoutParentInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutParentInput!]
  createMany: CommentCreateManyParentInputEnvelope
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateWithoutParentInput {
  id: String
  conent: String!
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  isAnonymously: Boolean
  post: PostCreateNestedOneWithoutCommentsInput!
  user: UserCreateNestedOneWithoutCommentsInput
  replies: CommentCreateNestedManyWithoutParentInput
  likes: LikePostCreateNestedManyWithoutCommentInput
  dislikes: DislikePostCreateNestedManyWithoutCommentInput
}

input CommentCreateOrConnectWithoutParentInput {
  where: CommentWhereUniqueInput!
  create: CommentCreateWithoutParentInput!
}

input CommentCreateManyParentInputEnvelope {
  data: [CommentCreateManyParentInput!]!
  skipDuplicates: Boolean
}

input CommentCreateManyParentInput {
  id: String
  userId: String
  conent: String!
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  postId: String!
  isAnonymously: Boolean
}

input CommentCreateOrConnectWithoutPostInput {
  where: CommentWhereUniqueInput!
  create: CommentCreateWithoutPostInput!
}

input CommentCreateManyPostInputEnvelope {
  data: [CommentCreateManyPostInput!]!
  skipDuplicates: Boolean
}

input CommentCreateManyPostInput {
  id: String
  userId: String
  conent: String!
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  isAnonymously: Boolean
  parentId: String
}

input PostCreateOrConnectWithoutDislikesInput {
  where: PostWhereUniqueInput!
  create: PostCreateWithoutDislikesInput!
}

input CommentCreateNestedOneWithoutDislikesInput {
  create: CommentCreateWithoutDislikesInput
  connectOrCreate: CommentCreateOrConnectWithoutDislikesInput
  connect: CommentWhereUniqueInput
}

input CommentCreateWithoutDislikesInput {
  id: String
  conent: String!
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  isAnonymously: Boolean
  post: PostCreateNestedOneWithoutCommentsInput!
  user: UserCreateNestedOneWithoutCommentsInput
  parent: CommentCreateNestedOneWithoutRepliesInput
  replies: CommentCreateNestedManyWithoutParentInput
  likes: LikePostCreateNestedManyWithoutCommentInput
}

input CommentCreateOrConnectWithoutDislikesInput {
  where: CommentWhereUniqueInput!
  create: CommentCreateWithoutDislikesInput!
}

input DislikePostCreateOrConnectWithoutUserInput {
  where: DislikePostWhereUniqueInput!
  create: DislikePostCreateWithoutUserInput!
}

input DislikePostCreateManyUserInputEnvelope {
  data: [DislikePostCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input DislikePostCreateManyUserInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  postId: String!
  commentId: String
}

input UserCreateOrConnectWithoutBookmarksInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutBookmarksInput!
}

input BookmarkPostCreateOrConnectWithoutPostInput {
  where: BookmarkPostWhereUniqueInput!
  create: BookmarkPostCreateWithoutPostInput!
}

input BookmarkPostCreateManyPostInputEnvelope {
  data: [BookmarkPostCreateManyPostInput!]!
  skipDuplicates: Boolean
}

input BookmarkPostCreateManyPostInput {
  id: String
  userId: String!
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

input PostCreateOrConnectWithoutCommentsInput {
  where: PostWhereUniqueInput!
  create: PostCreateWithoutCommentsInput!
}

input CommentCreateOrConnectWithoutUserInput {
  where: CommentWhereUniqueInput!
  create: CommentCreateWithoutUserInput!
}

input CommentCreateManyUserInputEnvelope {
  data: [CommentCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input CommentCreateManyUserInput {
  id: String
  conent: String!
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  postId: String!
  isAnonymously: Boolean
  parentId: String
}

input UserCreateOrConnectWithoutDislikesInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutDislikesInput!
}

input DislikePostCreateOrConnectWithoutPostInput {
  where: DislikePostWhereUniqueInput!
  create: DislikePostCreateWithoutPostInput!
}

input DislikePostCreateManyPostInputEnvelope {
  data: [DislikePostCreateManyPostInput!]!
  skipDuplicates: Boolean
}

input DislikePostCreateManyPostInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  userId: String
  commentId: String
}

input PostCreateOrConnectWithoutLikesInput {
  where: PostWhereUniqueInput!
  create: PostCreateWithoutLikesInput!
}

input CommentCreateNestedOneWithoutLikesInput {
  create: CommentCreateWithoutLikesInput
  connectOrCreate: CommentCreateOrConnectWithoutLikesInput
  connect: CommentWhereUniqueInput
}

input CommentCreateWithoutLikesInput {
  id: String
  conent: String!
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  isAnonymously: Boolean
  post: PostCreateNestedOneWithoutCommentsInput!
  user: UserCreateNestedOneWithoutCommentsInput
  parent: CommentCreateNestedOneWithoutRepliesInput
  replies: CommentCreateNestedManyWithoutParentInput
  dislikes: DislikePostCreateNestedManyWithoutCommentInput
}

input CommentCreateOrConnectWithoutLikesInput {
  where: CommentWhereUniqueInput!
  create: CommentCreateWithoutLikesInput!
}

input LikePostCreateOrConnectWithoutUserInput {
  where: LikePostWhereUniqueInput!
  create: LikePostCreateWithoutUserInput!
}

input LikePostCreateManyUserInputEnvelope {
  data: [LikePostCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input LikePostCreateManyUserInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  postId: String!
  commentId: String
}

input UserCreateOrConnectWithoutEducationsInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutEducationsInput!
}

input EducationCreateOrConnectWithoutResumeInput {
  where: EducationWhereUniqueInput!
  create: EducationCreateWithoutResumeInput!
}

input EducationWhereUniqueInput {
  id: String
  AND: [EducationWhereInput!]
  OR: [EducationWhereInput!]
  NOT: [EducationWhereInput!]
  type: EnumEducationTypeFilter
  major: StringFilter
  degree: EnumDegreeFilter
  graduationAt: DateTimeNullableFilter
  gpa: IntNullableFilter
  awards: StringNullableListFilter
  relevantCourseworks: StringNullableListFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  resumeId: StringNullableFilter
  userId: StringFilter
  resume: ResumeNullableRelationFilter
  user: UserRelationFilter
}

input EducationCreateManyResumeInputEnvelope {
  data: [EducationCreateManyResumeInput!]!
  skipDuplicates: Boolean
}

input EducationCreateManyResumeInput {
  id: String
  type: EducationType
  major: String!
  degree: Degree
  graduationAt: DateTime
  gpa: Int
  awards: EducationCreateawardsInput
  relevantCourseworks: EducationCreaterelevantCourseworksInput
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  userId: String!
}

input ResumeCreateOrConnectWithoutWorkExperiencesInput {
  where: ResumeWhereUniqueInput!
  create: ResumeCreateWithoutWorkExperiencesInput!
}

input CityCreateNestedOneWithoutWorkExperiencesInput {
  create: CityCreateWithoutWorkExperiencesInput
  connectOrCreate: CityCreateOrConnectWithoutWorkExperiencesInput
  connect: CityWhereUniqueInput
}

input CityCreateWithoutWorkExperiencesInput {
  name: String!
  stateCode: String
  stateName: String
  countryCode: String
  countryName: String
  latitude: String
  longitude: String
  wikiDataId: String!
  state: StateCreateNestedOneWithoutCitiesInput
  country: CountryCreateNestedOneWithoutCitiesInput
  users: UsersOnCityCreateNestedManyWithoutCityInput
  companies: CompanyCreateNestedManyWithoutAddressInput
  jobs: JobCreateNestedManyWithoutAddressInput
  resumes: ResumeCreateNestedManyWithoutAddressInput
}

input CityCreateOrConnectWithoutWorkExperiencesInput {
  where: CityWhereUniqueInput!
  create: CityCreateWithoutWorkExperiencesInput!
}

input WorkExperienceCreateOrConnectWithoutCompanyInput {
  where: WorkExperienceWhereUniqueInput!
  create: WorkExperienceCreateWithoutCompanyInput!
}

input WorkExperienceCreateManyCompanyInputEnvelope {
  data: [WorkExperienceCreateManyCompanyInput!]!
  skipDuplicates: Boolean
}

input WorkExperienceCreateManyCompanyInput {
  id: String
  isFreelancer: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  jobTitleId: String!
  userId: String!
  resumeId: String
  cityId: Int
  startAt: DateTime!
  endAt: DateTime
  description: String!
}

input UserCreateNestedOneWithoutCompaniesInput {
  create: UserCreateWithoutCompaniesInput
  connectOrCreate: UserCreateOrConnectWithoutCompaniesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCompaniesInput {
  id: String
  avatarUrl: String
  firstName: String!
  lastName: String!
  email: String!
  emailVerified: Boolean
  password: String!
  phoneNumber: String
  workingPosition: WorkPosition
  status: UserStatus
  signInProvider: SignInProvider
  color: String
  role: UserRole
  addressDetail: String
  verifyCode: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  avatar: FileCreateNestedOneWithoutUsersInput
  country: CountryCreateNestedOneWithoutUsersInput
  social: SocialCreateNestedManyWithoutUserInput
  resumes: ResumeCreateNestedManyWithoutUserInput
  workExperiences: WorkExperienceCreateNestedManyWithoutUserInput
  educations: EducationCreateNestedManyWithoutUserInput
  projects: ProjectCreateNestedManyWithoutUserInput
  applications: ApplicationCreateNestedManyWithoutCandidateInput
  posts: PostCreateNestedManyWithoutAuthorInput
  likes: LikePostCreateNestedManyWithoutUserInput
  dislikes: DislikePostCreateNestedManyWithoutUserInput
  comments: CommentCreateNestedManyWithoutUserInput
  bookmarks: BookmarkPostCreateNestedManyWithoutUserInput
  saveJobs: SaveJobCreateNestedManyWithoutUserInput
  payments: PaymentCreateNestedManyWithoutUserInput
  address: UsersOnCityCreateNestedManyWithoutUserInput
  authorSettings: SettingCreateNestedManyWithoutAuthorInput
  updatedBySettings: SettingCreateNestedManyWithoutUpdatedByInput
}

input UserCreateOrConnectWithoutCompaniesInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutCompaniesInput!
}

input CompanyCreateOrConnectWithoutAvatarInput {
  where: CompanyWhereUniqueInput!
  create: CompanyCreateWithoutAvatarInput!
}

input CompanyCreateManyAvatarInputEnvelope {
  data: [CompanyCreateManyAvatarInput!]!
  skipDuplicates: Boolean
}

input CompanyCreateManyAvatarInput {
  id: String
  name: String!
  slug: String!
  companyTypeId: String
  companySizeId: String
  addressDetail: String!
  cityId: Int!
  description: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  userId: String
}

input ResumeTemplateCreateNestedManyWithoutFileInput {
  create: [ResumeTemplateCreateWithoutFileInput!]
  connectOrCreate: [ResumeTemplateCreateOrConnectWithoutFileInput!]
  createMany: ResumeTemplateCreateManyFileInputEnvelope
  connect: [ResumeTemplateWhereUniqueInput!]
}

input ResumeTemplateCreateWithoutFileInput {
  id: String
  raw: String!
  status: UserStatus
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

input ResumeTemplateCreateOrConnectWithoutFileInput {
  where: ResumeTemplateWhereUniqueInput!
  create: ResumeTemplateCreateWithoutFileInput!
}

input ResumeTemplateWhereUniqueInput {
  id: String
  AND: [ResumeTemplateWhereInput!]
  OR: [ResumeTemplateWhereInput!]
  NOT: [ResumeTemplateWhereInput!]
  raw: StringFilter
  status: EnumUserStatusNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  fileId: StringNullableFilter
  file: FileNullableRelationFilter
}

input ResumeTemplateCreateManyFileInputEnvelope {
  data: [ResumeTemplateCreateManyFileInput!]!
  skipDuplicates: Boolean
}

input ResumeTemplateCreateManyFileInput {
  id: String
  raw: String!
  status: UserStatus
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

input CertificateCreateNestedOneWithoutFilesInput {
  create: CertificateCreateWithoutFilesInput
  connectOrCreate: CertificateCreateOrConnectWithoutFilesInput
  connect: CertificateWhereUniqueInput
}

input CertificateCreateWithoutFilesInput {
  id: String
  name: String!
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

input CertificateCreateOrConnectWithoutFilesInput {
  where: CertificateWhereUniqueInput!
  create: CertificateCreateWithoutFilesInput!
}

input CertificateWhereUniqueInput {
  id: String
  AND: [CertificateWhereInput!]
  OR: [CertificateWhereInput!]
  NOT: [CertificateWhereInput!]
  name: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  files: FileListRelationFilter
}

input FileCreateOrConnectWithoutPostsInput {
  where: FileWhereUniqueInput!
  create: FileCreateWithoutPostsInput!
}

input FileWhereUniqueInput {
  id: String
  storageId: String
  resumeTemplateId: String
  AND: [FileWhereInput!]
  OR: [FileWhereInput!]
  NOT: [FileWhereInput!]
  url: StringFilter
  provider: EnumFileProviderNullableFilter
  metadata: JsonNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  certificateId: StringNullableFilter
  users: UserListRelationFilter
  companies: CompanyListRelationFilter
  resume: ResumeListRelationFilter
  projects: ProjectListRelationFilter
  posts: PostListRelationFilter
  company: CompanyListRelationFilter
  resumeTemplates: ResumeTemplateListRelationFilter
  certificate: CertificateNullableRelationFilter
}

input PostCreateOrConnectWithoutAuthorInput {
  where: PostWhereUniqueInput!
  create: PostCreateWithoutAuthorInput!
}

input PostCreateManyAuthorInputEnvelope {
  data: [PostCreateManyAuthorInput!]!
  skipDuplicates: Boolean
}

input PostCreateManyAuthorInput {
  id: String
  title: String!
  content: String!
  shareUrl: String!
  metadata: JSON
  slug: String!
  minRead: Int
  jobCategoryId: String
  thumbnailId: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

input UserCreateOrConnectWithoutProjectsInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutProjectsInput!
}

input ResumeCreateNestedOneWithoutProjectsInput {
  create: ResumeCreateWithoutProjectsInput
  connectOrCreate: ResumeCreateOrConnectWithoutProjectsInput
  connect: ResumeWhereUniqueInput
}

input ResumeCreateWithoutProjectsInput {
  id: String
  name: String!
  fullName: String
  email: String
  addressDetail: String
  description: String!
  isSummary: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  user: UserCreateNestedOneWithoutResumesInput!
  avatar: FileCreateNestedOneWithoutResumeInput
  address: CityCreateNestedOneWithoutResumesInput
  language: LanguageCreateNestedOneWithoutResumesInput
  jobTitle: JobTitleCreateNestedOneWithoutResumesInput!
  applications: ApplicationCreateNestedManyWithoutResumeInput
  workExperiences: WorkExperienceCreateNestedManyWithoutResumeInput
  educations: EducationCreateNestedManyWithoutResumeInput
  skills: SkillCreateNestedManyWithoutResumeInput
  socials: SocialCreateNestedManyWithoutResumeInput
  languageSkills: LanguageSkillCreateNestedManyWithoutResumeInput
  activities: ActivityCreateNestedManyWithoutResumeInput
}

input ResumeCreateOrConnectWithoutProjectsInput {
  where: ResumeWhereUniqueInput!
  create: ResumeCreateWithoutProjectsInput!
}

input ProjectCreateOrConnectWithoutCompanyInput {
  where: ProjectWhereUniqueInput!
  create: ProjectCreateWithoutCompanyInput!
}

input ProjectCreateManyCompanyInputEnvelope {
  data: [ProjectCreateManyCompanyInput!]!
  skipDuplicates: Boolean
}

input ProjectCreateManyCompanyInput {
  id: String
  title: String!
  description: String!
  teamSize: Int!
  role: ProjectCreateroleInput
  startAt: DateTime!
  endAt: DateTime
  refeUrls: ProjectCreaterefeUrlsInput
  thumbnailId: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  userId: String!
  resumeId: String
}

input CompanyCreateOrConnectWithoutWorkExperiencesInput {
  where: CompanyWhereUniqueInput!
  create: CompanyCreateWithoutWorkExperiencesInput!
}

input WorkExperienceCreateOrConnectWithoutResumeInput {
  where: WorkExperienceWhereUniqueInput!
  create: WorkExperienceCreateWithoutResumeInput!
}

input WorkExperienceCreateManyResumeInputEnvelope {
  data: [WorkExperienceCreateManyResumeInput!]!
  skipDuplicates: Boolean
}

input WorkExperienceCreateManyResumeInput {
  id: String
  isFreelancer: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  jobTitleId: String!
  userId: String!
  companyId: String
  cityId: Int
  startAt: DateTime!
  endAt: DateTime
  description: String!
}

input ResumeCreateOrConnectWithoutApplicationsInput {
  where: ResumeWhereUniqueInput!
  create: ResumeCreateWithoutApplicationsInput!
}

input ApplicationCreateOrConnectWithoutCandidateInput {
  where: ApplicationWhereUniqueInput!
  create: ApplicationCreateWithoutCandidateInput!
}

input ApplicationCreateManyCandidateInputEnvelope {
  data: [ApplicationCreateManyCandidateInput!]!
  skipDuplicates: Boolean
}

input ApplicationCreateManyCandidateInput {
  id: String
  createdAt: DateTime
  status: ApplicationStatus
  type: ApplicationType
  updatedAt: DateTime
  deletedAt: DateTime
  resumeId: String!
  jobId: String!
}

input UserCreateOrConnectWithoutLikesInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutLikesInput!
}

input LikePostCreateOrConnectWithoutPostInput {
  where: LikePostWhereUniqueInput!
  create: LikePostCreateWithoutPostInput!
}

input LikePostCreateManyPostInputEnvelope {
  data: [LikePostCreateManyPostInput!]!
  skipDuplicates: Boolean
}

input LikePostCreateManyPostInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  userId: String
  commentId: String
}

input PostCreateOrConnectWithoutThumbnailInput {
  where: PostWhereUniqueInput!
  create: PostCreateWithoutThumbnailInput!
}

input PostCreateManyThumbnailInputEnvelope {
  data: [PostCreateManyThumbnailInput!]!
  skipDuplicates: Boolean
}

input PostCreateManyThumbnailInput {
  id: String
  title: String!
  content: String!
  shareUrl: String!
  metadata: JSON
  slug: String!
  minRead: Int
  jobCategoryId: String
  authorId: String!
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

input FileCreateOrConnectWithoutProjectsInput {
  where: FileWhereUniqueInput!
  create: FileCreateWithoutProjectsInput!
}

input ProjectCreateOrConnectWithoutTechStacksInput {
  where: ProjectWhereUniqueInput!
  create: ProjectCreateWithoutTechStacksInput!
}

input SkillCreateOrConnectWithoutJobsInput {
  where: SkillWhereUniqueInput!
  create: SkillCreateWithoutJobsInput!
}

input JobCreateOrConnectWithoutCompanyInput {
  where: JobWhereUniqueInput!
  create: JobCreateWithoutCompanyInput!
}

input JobCreateManyCompanyInputEnvelope {
  data: [JobCreateManyCompanyInput!]!
  skipDuplicates: Boolean
}

input JobCreateManyCompanyInput {
  id: String
  type: JobType!
  level: JobLevel!
  slug: String!
  addressDetail: String
  jobTitleId: String!
  jobCategoryId: String!
  cityId: Int!
  salary: JobSalary
  salaryMetadata: JSON
  description: String!
  isBoot: Boolean
  numberOfRecruits: Int
  applicationDeadline: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

input CompanyCreateOrConnectWithoutProjectsInput {
  where: CompanyWhereUniqueInput!
  create: CompanyCreateWithoutProjectsInput!
}

input ProjectCreateOrConnectWithoutUserInput {
  where: ProjectWhereUniqueInput!
  create: ProjectCreateWithoutUserInput!
}

input ProjectCreateManyUserInputEnvelope {
  data: [ProjectCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input ProjectCreateManyUserInput {
  id: String
  title: String!
  description: String!
  teamSize: Int!
  role: ProjectCreateroleInput
  startAt: DateTime!
  endAt: DateTime
  refeUrls: ProjectCreaterefeUrlsInput
  thumbnailId: String
  companyId: String!
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  resumeId: String
}

input UserCreateOrConnectWithoutPostsInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutPostsInput!
}

input PostCreateOrConnectWithoutTagsInput {
  where: PostWhereUniqueInput!
  create: PostCreateWithoutTagsInput!
}

input TagCreateOrConnectWithoutJobsInput {
  where: TagWhereUniqueInput!
  create: TagCreateWithoutJobsInput!
}

input JobCreateOrConnectWithoutApplicationsInput {
  where: JobWhereUniqueInput!
  create: JobCreateWithoutApplicationsInput!
}

input ApplicationCreateOrConnectWithoutResumeInput {
  where: ApplicationWhereUniqueInput!
  create: ApplicationCreateWithoutResumeInput!
}

input ApplicationCreateManyResumeInputEnvelope {
  data: [ApplicationCreateManyResumeInput!]!
  skipDuplicates: Boolean
}

input ApplicationCreateManyResumeInput {
  id: String
  createdAt: DateTime
  status: ApplicationStatus
  type: ApplicationType
  updatedAt: DateTime
  deletedAt: DateTime
  jobId: String!
  userId: String!
}

input ResumeCreateOrConnectWithoutEducationsInput {
  where: ResumeWhereUniqueInput!
  create: ResumeCreateWithoutEducationsInput!
}

input EducationCreateOrConnectWithoutUserInput {
  where: EducationWhereUniqueInput!
  create: EducationCreateWithoutUserInput!
}

input EducationCreateManyUserInputEnvelope {
  data: [EducationCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input EducationCreateManyUserInput {
  id: String
  type: EducationType
  major: String!
  degree: Degree
  graduationAt: DateTime
  gpa: Int
  awards: EducationCreateawardsInput
  relevantCourseworks: EducationCreaterelevantCourseworksInput
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  resumeId: String
}

input UserCreateOrConnectWithoutWorkExperiencesInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutWorkExperiencesInput!
}

input WorkExperienceCreateOrConnectWithoutJobTitleInput {
  where: WorkExperienceWhereUniqueInput!
  create: WorkExperienceCreateWithoutJobTitleInput!
}

input WorkExperienceCreateManyJobTitleInputEnvelope {
  data: [WorkExperienceCreateManyJobTitleInput!]!
  skipDuplicates: Boolean
}

input WorkExperienceCreateManyJobTitleInput {
  id: String
  isFreelancer: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  userId: String!
  resumeId: String
  companyId: String
  cityId: Int
  startAt: DateTime!
  endAt: DateTime
  description: String!
}

input JobTitleCreateOrConnectWithoutResumesInput {
  where: JobTitleWhereUniqueInput!
  create: JobTitleCreateWithoutResumesInput!
}

input ResumeCreateOrConnectWithoutLanguageSkillsInput {
  where: ResumeWhereUniqueInput!
  create: ResumeCreateWithoutLanguageSkillsInput!
}

input LanguageSkillCreateOrConnectWithoutLanguageInput {
  where: LanguageSkillWhereUniqueInput!
  create: LanguageSkillCreateWithoutLanguageInput!
}

input LanguageSkillCreateManyLanguageInputEnvelope {
  data: [LanguageSkillCreateManyLanguageInput!]!
  skipDuplicates: Boolean
}

input LanguageSkillCreateManyLanguageInput {
  id: String
  name: String!
  locale: String!
  proficiencyLevel: ProficiencyLevel!
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  resumeId: String
}

input LanguageCreateOrConnectWithoutResumesInput {
  where: LanguageWhereUniqueInput!
  create: LanguageCreateWithoutResumesInput!
}

input ResumeCreateOrConnectWithoutUserInput {
  where: ResumeWhereUniqueInput!
  create: ResumeCreateWithoutUserInput!
}

input ResumeCreateManyUserInputEnvelope {
  data: [ResumeCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input ResumeCreateManyUserInput {
  id: String
  name: String!
  fullName: String
  email: String
  addressDetail: String
  description: String!
  isSummary: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  languageId: String!
  jobTitleId: String!
  fileId: String
  cityId: Int
}

input UserCreateOrConnectWithoutSocialInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutSocialInput!
}

input ResumeCreateNestedOneWithoutSocialsInput {
  create: ResumeCreateWithoutSocialsInput
  connectOrCreate: ResumeCreateOrConnectWithoutSocialsInput
  connect: ResumeWhereUniqueInput
}

input ResumeCreateWithoutSocialsInput {
  id: String
  name: String!
  fullName: String
  email: String
  addressDetail: String
  description: String!
  isSummary: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  user: UserCreateNestedOneWithoutResumesInput!
  avatar: FileCreateNestedOneWithoutResumeInput
  address: CityCreateNestedOneWithoutResumesInput
  language: LanguageCreateNestedOneWithoutResumesInput
  jobTitle: JobTitleCreateNestedOneWithoutResumesInput!
  applications: ApplicationCreateNestedManyWithoutResumeInput
  workExperiences: WorkExperienceCreateNestedManyWithoutResumeInput
  educations: EducationCreateNestedManyWithoutResumeInput
  skills: SkillCreateNestedManyWithoutResumeInput
  projects: ProjectCreateNestedManyWithoutResumeInput
  languageSkills: LanguageSkillCreateNestedManyWithoutResumeInput
  activities: ActivityCreateNestedManyWithoutResumeInput
}

input ResumeCreateOrConnectWithoutSocialsInput {
  where: ResumeWhereUniqueInput!
  create: ResumeCreateWithoutSocialsInput!
}

input SocialCreateOrConnectWithoutCompanyInput {
  where: SocialWhereUniqueInput!
  create: SocialCreateWithoutCompanyInput!
}

input SocialCreateManyCompanyInputEnvelope {
  data: [SocialCreateManyCompanyInput!]!
  skipDuplicates: Boolean
}

input SocialCreateManyCompanyInput {
  id: String
  type: SocialType
  url: String!
  userId: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  resumeId: String
}

input CompanyCreateOrConnectWithoutJobsInput {
  where: CompanyWhereUniqueInput!
  create: CompanyCreateWithoutJobsInput!
}

input JobCreateOrConnectWithoutJobCategoryInput {
  where: JobWhereUniqueInput!
  create: JobCreateWithoutJobCategoryInput!
}

input JobCreateManyJobCategoryInputEnvelope {
  data: [JobCreateManyJobCategoryInput!]!
  skipDuplicates: Boolean
}

input JobCreateManyJobCategoryInput {
  id: String
  type: JobType!
  level: JobLevel!
  slug: String!
  addressDetail: String
  jobTitleId: String!
  companyId: String!
  cityId: Int!
  salary: JobSalary
  salaryMetadata: JSON
  description: String!
  isBoot: Boolean
  numberOfRecruits: Int
  applicationDeadline: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

input PostCreateNestedManyWithoutJobCategoryInput {
  create: [PostCreateWithoutJobCategoryInput!]
  connectOrCreate: [PostCreateOrConnectWithoutJobCategoryInput!]
  createMany: PostCreateManyJobCategoryInputEnvelope
  connect: [PostWhereUniqueInput!]
}

input PostCreateWithoutJobCategoryInput {
  id: String
  title: String!
  content: String!
  shareUrl: String!
  metadata: JSON
  slug: String!
  minRead: Int
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  author: UserCreateNestedOneWithoutPostsInput!
  thumbnail: FileCreateNestedOneWithoutPostsInput
  categories: PostCategoryCreateNestedManyWithoutPostsInput
  tags: TagCreateNestedManyWithoutPostsInput
  likes: LikePostCreateNestedManyWithoutPostInput
  dislikes: DislikePostCreateNestedManyWithoutPostInput
  comments: CommentCreateNestedManyWithoutPostInput
  bookmarks: BookmarkPostCreateNestedManyWithoutPostInput
}

input PostCreateOrConnectWithoutJobCategoryInput {
  where: PostWhereUniqueInput!
  create: PostCreateWithoutJobCategoryInput!
}

input PostCreateManyJobCategoryInputEnvelope {
  data: [PostCreateManyJobCategoryInput!]!
  skipDuplicates: Boolean
}

input PostCreateManyJobCategoryInput {
  id: String
  title: String!
  content: String!
  shareUrl: String!
  metadata: JSON
  slug: String!
  minRead: Int
  authorId: String!
  thumbnailId: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

input JobCategoryCreateOrConnectWithoutCompaniesInput {
  where: JobCategoryWhereUniqueInput!
  create: JobCategoryCreateWithoutCompaniesInput!
}

input CompanyCreateOrConnectWithoutAddressInput {
  where: CompanyWhereUniqueInput!
  create: CompanyCreateWithoutAddressInput!
}

input CompanyCreateManyAddressInputEnvelope {
  data: [CompanyCreateManyAddressInput!]!
  skipDuplicates: Boolean
}

input CompanyCreateManyAddressInput {
  id: String
  name: String!
  slug: String!
  avatarId: String
  companyTypeId: String
  companySizeId: String
  addressDetail: String!
  description: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  userId: String
}

input CityCreateOrConnectWithoutResumesInput {
  where: CityWhereUniqueInput!
  create: CityCreateWithoutResumesInput!
}

input ResumeCreateOrConnectWithoutSkillsInput {
  where: ResumeWhereUniqueInput!
  create: ResumeCreateWithoutSkillsInput!
}

input SkillCreateOrConnectWithoutProjectsInput {
  where: SkillWhereUniqueInput!
  create: SkillCreateWithoutProjectsInput!
}

input ProjectCreateOrConnectWithoutThumbnailInput {
  where: ProjectWhereUniqueInput!
  create: ProjectCreateWithoutThumbnailInput!
}

input ProjectCreateManyThumbnailInputEnvelope {
  data: [ProjectCreateManyThumbnailInput!]!
  skipDuplicates: Boolean
}

input ProjectCreateManyThumbnailInput {
  id: String
  title: String!
  description: String!
  teamSize: Int!
  role: ProjectCreateroleInput
  startAt: DateTime!
  endAt: DateTime
  refeUrls: ProjectCreaterefeUrlsInput
  companyId: String!
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  userId: String!
  resumeId: String
}

input FileCreateOrConnectWithoutResumeInput {
  where: FileWhereUniqueInput!
  create: FileCreateWithoutResumeInput!
}

input ResumeCreateOrConnectWithoutJobTitleInput {
  where: ResumeWhereUniqueInput!
  create: ResumeCreateWithoutJobTitleInput!
}

input ResumeCreateManyJobTitleInputEnvelope {
  data: [ResumeCreateManyJobTitleInput!]!
  skipDuplicates: Boolean
}

input ResumeCreateManyJobTitleInput {
  id: String
  name: String!
  fullName: String
  email: String
  addressDetail: String
  description: String!
  isSummary: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  languageId: String!
  userId: String!
  fileId: String
  cityId: Int
}

input JobTitleCreateOrConnectWithoutJobsInput {
  where: JobTitleWhereUniqueInput!
  create: JobTitleCreateWithoutJobsInput!
}

input JobCreateOrConnectWithoutAddressInput {
  where: JobWhereUniqueInput!
  create: JobCreateWithoutAddressInput!
}

input JobCreateManyAddressInputEnvelope {
  data: [JobCreateManyAddressInput!]!
  skipDuplicates: Boolean
}

input JobCreateManyAddressInput {
  id: String
  type: JobType!
  level: JobLevel!
  slug: String!
  addressDetail: String
  jobTitleId: String!
  jobCategoryId: String!
  companyId: String!
  salary: JobSalary
  salaryMetadata: JSON
  description: String!
  isBoot: Boolean
  numberOfRecruits: Int
  applicationDeadline: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

input CityCreateOrConnectWithoutCompaniesInput {
  where: CityWhereUniqueInput!
  create: CityCreateWithoutCompaniesInput!
}

input CompanyCreateOrConnectWithoutIndustriesInput {
  where: CompanyWhereUniqueInput!
  create: CompanyCreateWithoutIndustriesInput!
}

input JobCategoryCreateOrConnectWithoutJobsInput {
  where: JobCategoryWhereUniqueInput!
  create: JobCategoryCreateWithoutJobsInput!
}

input JobCreateOrConnectWithoutJobTitleInput {
  where: JobWhereUniqueInput!
  create: JobCreateWithoutJobTitleInput!
}

input JobCreateManyJobTitleInputEnvelope {
  data: [JobCreateManyJobTitleInput!]!
  skipDuplicates: Boolean
}

input JobCreateManyJobTitleInput {
  id: String
  type: JobType!
  level: JobLevel!
  slug: String!
  addressDetail: String
  jobCategoryId: String!
  companyId: String!
  cityId: Int!
  salary: JobSalary
  salaryMetadata: JSON
  description: String!
  isBoot: Boolean
  numberOfRecruits: Int
  applicationDeadline: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

input JobTitleCreateOrConnectWithoutWorkExperiencesInput {
  where: JobTitleWhereUniqueInput!
  create: JobTitleCreateWithoutWorkExperiencesInput!
}

input WorkExperienceCreateOrConnectWithoutUserInput {
  where: WorkExperienceWhereUniqueInput!
  create: WorkExperienceCreateWithoutUserInput!
}

input WorkExperienceCreateManyUserInputEnvelope {
  data: [WorkExperienceCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input WorkExperienceCreateManyUserInput {
  id: String
  isFreelancer: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  jobTitleId: String!
  resumeId: String
  companyId: String
  cityId: Int
  startAt: DateTime!
  endAt: DateTime
  description: String!
}

input UserCreateOrConnectWithoutResumesInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutResumesInput!
}

input ResumeCreateOrConnectWithoutAvatarInput {
  where: ResumeWhereUniqueInput!
  create: ResumeCreateWithoutAvatarInput!
}

input ResumeCreateManyAvatarInputEnvelope {
  data: [ResumeCreateManyAvatarInput!]!
  skipDuplicates: Boolean
}

input ResumeCreateManyAvatarInput {
  id: String
  name: String!
  fullName: String
  email: String
  addressDetail: String
  description: String!
  isSummary: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  languageId: String!
  jobTitleId: String!
  userId: String!
  cityId: Int
}

input FileCreateOrConnectWithoutCompaniesInput {
  where: FileWhereUniqueInput!
  create: FileCreateWithoutCompaniesInput!
}

input CompanyCreateOrConnectWithoutSocialInput {
  where: CompanyWhereUniqueInput!
  create: CompanyCreateWithoutSocialInput!
}

input SocialCreateOrConnectWithoutUserInput {
  where: SocialWhereUniqueInput!
  create: SocialCreateWithoutUserInput!
}

input SocialCreateManyUserInputEnvelope {
  data: [SocialCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input SocialCreateManyUserInput {
  id: String
  type: SocialType
  url: String!
  companyId: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  resumeId: String
}

input UserCreateOrConnectWithoutCountryInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutCountryInput!
}

input UserCreateManyCountryInputEnvelope {
  data: [UserCreateManyCountryInput!]!
  skipDuplicates: Boolean
}

input UserCreateManyCountryInput {
  id: String
  avatarUrl: String
  avatarId: String
  firstName: String!
  lastName: String!
  email: String!
  emailVerified: Boolean
  password: String!
  phoneNumber: String
  workingPosition: WorkPosition
  status: UserStatus
  signInProvider: SignInProvider
  color: String
  role: UserRole
  addressDetail: String
  verifyCode: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

input CountryCreateOrConnectWithoutCitiesInput {
  where: CountryWhereUniqueInput!
  create: CountryCreateWithoutCitiesInput!
}

input CityCreateOrConnectWithoutStateInput {
  where: CityWhereUniqueInput!
  create: CityCreateWithoutStateInput!
}

input CityCreateManyStateInputEnvelope {
  data: [CityCreateManyStateInput!]!
  skipDuplicates: Boolean
}

input CityCreateManyStateInput {
  id: Int
  name: String!
  stateCode: String
  stateName: String
  countryCode: String
  countryName: String
  latitude: String
  longitude: String
  wikiDataId: String!
  countryId: Int
}

input StateCreateOrConnectWithoutCountryInput {
  where: StateWhereUniqueInput!
  create: StateCreateWithoutCountryInput!
}

input StateWhereUniqueInput {
  id: Int
  AND: [StateWhereInput!]
  OR: [StateWhereInput!]
  NOT: [StateWhereInput!]
  name: StringFilter
  countryCode: StringNullableFilter
  countryName: StringNullableFilter
  stateCode: StringNullableFilter
  type: StringNullableFilter
  latitude: StringNullableFilter
  longitude: StringNullableFilter
  countryId: IntNullableFilter
  country: CountryNullableRelationFilter
  cities: CityListRelationFilter
}

input StateCreateManyCountryInputEnvelope {
  data: [StateCreateManyCountryInput!]!
  skipDuplicates: Boolean
}

input StateCreateManyCountryInput {
  id: Int
  name: String!
  countryCode: String
  countryName: String
  stateCode: String
  type: String
  latitude: String
  longitude: String
}

input CountryCreateOrConnectWithoutUsersInput {
  where: CountryWhereUniqueInput!
  create: CountryCreateWithoutUsersInput!
}

input UserCreateOrConnectWithoutAvatarInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutAvatarInput!
}

input UserCreateManyAvatarInputEnvelope {
  data: [UserCreateManyAvatarInput!]!
  skipDuplicates: Boolean
}

input UserCreateManyAvatarInput {
  id: String
  avatarUrl: String
  firstName: String!
  lastName: String!
  email: String!
  emailVerified: Boolean
  password: String!
  phoneNumber: String
  countryId: Int
  workingPosition: WorkPosition
  status: UserStatus
  signInProvider: SignInProvider
  color: String
  role: UserRole
  addressDetail: String
  verifyCode: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

input FileCreateOrConnectWithoutCompanyInput {
  where: FileWhereUniqueInput!
  create: FileCreateWithoutCompanyInput!
}

input CompanyCreateOrConnectWithoutPhotosInput {
  where: CompanyWhereUniqueInput!
  create: CompanyCreateWithoutPhotosInput!
}

input FileCreateOrConnectWithoutUsersInput {
  where: FileWhereUniqueInput!
  create: FileCreateWithoutUsersInput!
}

input UserCreateOrConnectWithoutAddressInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutAddressInput!
}

input UsersOnCityCreateOrConnectWithoutCityInput {
  where: UsersOnCityWhereUniqueInput!
  create: UsersOnCityCreateWithoutCityInput!
}

input UsersOnCityCreateManyCityInputEnvelope {
  data: [UsersOnCityCreateManyCityInput!]!
  skipDuplicates: Boolean
}

input UsersOnCityCreateManyCityInput {
  userId: String!
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
}

input CityCreateOrConnectWithoutCountryInput {
  where: CityWhereUniqueInput!
  create: CityCreateWithoutCountryInput!
}

input CityCreateManyCountryInputEnvelope {
  data: [CityCreateManyCountryInput!]!
  skipDuplicates: Boolean
}

input CityCreateManyCountryInput {
  id: Int
  name: String!
  stateCode: String
  stateName: String
  countryCode: String
  countryName: String
  latitude: String
  longitude: String
  wikiDataId: String!
  stateId: Int
}

input CountryCreateOrConnectWithoutStatesInput {
  where: CountryWhereUniqueInput!
  create: CountryCreateWithoutStatesInput!
}

input StateCreateOrConnectWithoutCitiesInput {
  where: StateWhereUniqueInput!
  create: StateCreateWithoutCitiesInput!
}

input CityCreateOrConnectWithoutJobsInput {
  where: CityWhereUniqueInput!
  create: CityCreateWithoutJobsInput!
}

input JobCreateOrConnectWithoutTagsInput {
  where: JobWhereUniqueInput!
  create: JobCreateWithoutTagsInput!
}

input TagUpdateInput {
  id: StringFieldUpdateOperationsInput
  type: NullableEnumTagTypeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  color: NullableStringFieldUpdateOperationsInput
  isPostDefault: NullableBoolFieldUpdateOperationsInput
  isJobDefault: NullableBoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  jobs: JobUpdateManyWithoutTagsNestedInput
  posts: PostUpdateManyWithoutTagsNestedInput
}

input StringFieldUpdateOperationsInput {
  set: String
}

input NullableEnumTagTypeFieldUpdateOperationsInput {
  set: TagType
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

input NullableBoolFieldUpdateOperationsInput {
  set: Boolean
}

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input JobUpdateManyWithoutTagsNestedInput {
  create: [JobCreateWithoutTagsInput!]
  connectOrCreate: [JobCreateOrConnectWithoutTagsInput!]
  upsert: [JobUpsertWithWhereUniqueWithoutTagsInput!]
  set: [JobWhereUniqueInput!]
  disconnect: [JobWhereUniqueInput!]
  delete: [JobWhereUniqueInput!]
  connect: [JobWhereUniqueInput!]
  update: [JobUpdateWithWhereUniqueWithoutTagsInput!]
  updateMany: [JobUpdateManyWithWhereWithoutTagsInput!]
  deleteMany: [JobScalarWhereInput!]
}

input JobUpsertWithWhereUniqueWithoutTagsInput {
  where: JobWhereUniqueInput!
  update: JobUpdateWithoutTagsInput!
  create: JobCreateWithoutTagsInput!
}

input JobUpdateWithoutTagsInput {
  id: StringFieldUpdateOperationsInput
  type: EnumJobTypeFieldUpdateOperationsInput
  level: EnumJobLevelFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  addressDetail: NullableStringFieldUpdateOperationsInput
  salary: EnumJobSalaryFieldUpdateOperationsInput
  salaryMetadata: JSON
  description: StringFieldUpdateOperationsInput
  isBoot: NullableBoolFieldUpdateOperationsInput
  numberOfRecruits: IntFieldUpdateOperationsInput
  applicationDeadline: DateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  address: CityUpdateOneRequiredWithoutJobsNestedInput
  jobTitle: JobTitleUpdateOneRequiredWithoutJobsNestedInput
  jobCategory: JobCategoryUpdateOneRequiredWithoutJobsNestedInput
  company: CompanyUpdateOneRequiredWithoutJobsNestedInput
  skills: SkillUpdateManyWithoutJobsNestedInput
  applications: ApplicationUpdateManyWithoutJobNestedInput
  saveJobs: SaveJobUpdateManyWithoutJobNestedInput
}

input EnumJobTypeFieldUpdateOperationsInput {
  set: JobType
}

input EnumJobLevelFieldUpdateOperationsInput {
  set: JobLevel
}

input EnumJobSalaryFieldUpdateOperationsInput {
  set: JobSalary
}

input IntFieldUpdateOperationsInput {
  set: Int
  increment: Int
  decrement: Int
  multiply: Int
  divide: Int
}

input CityUpdateOneRequiredWithoutJobsNestedInput {
  create: CityCreateWithoutJobsInput
  connectOrCreate: CityCreateOrConnectWithoutJobsInput
  upsert: CityUpsertWithoutJobsInput
  connect: CityWhereUniqueInput
  update: CityUpdateToOneWithWhereWithoutJobsInput
}

input CityUpsertWithoutJobsInput {
  update: CityUpdateWithoutJobsInput!
  create: CityCreateWithoutJobsInput!
  where: CityWhereInput
}

input CityUpdateWithoutJobsInput {
  name: StringFieldUpdateOperationsInput
  stateCode: NullableStringFieldUpdateOperationsInput
  stateName: NullableStringFieldUpdateOperationsInput
  countryCode: NullableStringFieldUpdateOperationsInput
  countryName: NullableStringFieldUpdateOperationsInput
  latitude: NullableStringFieldUpdateOperationsInput
  longitude: NullableStringFieldUpdateOperationsInput
  wikiDataId: StringFieldUpdateOperationsInput
  state: StateUpdateOneWithoutCitiesNestedInput
  country: CountryUpdateOneWithoutCitiesNestedInput
  users: UsersOnCityUpdateManyWithoutCityNestedInput
  companies: CompanyUpdateManyWithoutAddressNestedInput
  resumes: ResumeUpdateManyWithoutAddressNestedInput
  workExperiences: WorkExperienceUpdateManyWithoutAddressNestedInput
}

input StateUpdateOneWithoutCitiesNestedInput {
  create: StateCreateWithoutCitiesInput
  connectOrCreate: StateCreateOrConnectWithoutCitiesInput
  upsert: StateUpsertWithoutCitiesInput
  disconnect: StateWhereInput
  delete: StateWhereInput
  connect: StateWhereUniqueInput
  update: StateUpdateToOneWithWhereWithoutCitiesInput
}

input StateUpsertWithoutCitiesInput {
  update: StateUpdateWithoutCitiesInput!
  create: StateCreateWithoutCitiesInput!
  where: StateWhereInput
}

input StateUpdateWithoutCitiesInput {
  name: StringFieldUpdateOperationsInput
  countryCode: NullableStringFieldUpdateOperationsInput
  countryName: NullableStringFieldUpdateOperationsInput
  stateCode: NullableStringFieldUpdateOperationsInput
  type: NullableStringFieldUpdateOperationsInput
  latitude: NullableStringFieldUpdateOperationsInput
  longitude: NullableStringFieldUpdateOperationsInput
  country: CountryUpdateOneWithoutStatesNestedInput
}

input CountryUpdateOneWithoutStatesNestedInput {
  create: CountryCreateWithoutStatesInput
  connectOrCreate: CountryCreateOrConnectWithoutStatesInput
  upsert: CountryUpsertWithoutStatesInput
  disconnect: CountryWhereInput
  delete: CountryWhereInput
  connect: CountryWhereUniqueInput
  update: CountryUpdateToOneWithWhereWithoutStatesInput
}

input CountryUpsertWithoutStatesInput {
  update: CountryUpdateWithoutStatesInput!
  create: CountryCreateWithoutStatesInput!
  where: CountryWhereInput
}

input CountryUpdateWithoutStatesInput {
  name: StringFieldUpdateOperationsInput
  iso3: StringFieldUpdateOperationsInput
  iso2: StringFieldUpdateOperationsInput
  numericCode: StringFieldUpdateOperationsInput
  phoneCode: StringFieldUpdateOperationsInput
  capital: StringFieldUpdateOperationsInput
  currency: StringFieldUpdateOperationsInput
  currencyName: StringFieldUpdateOperationsInput
  currencySymbol: StringFieldUpdateOperationsInput
  tld: StringFieldUpdateOperationsInput
  native: NullableStringFieldUpdateOperationsInput
  region: NullableStringFieldUpdateOperationsInput
  regionId: NullableStringFieldUpdateOperationsInput
  subregion: NullableStringFieldUpdateOperationsInput
  subregionId: NullableStringFieldUpdateOperationsInput
  nationality: StringFieldUpdateOperationsInput
  timezones: JSON
  translations: JSON
  latitude: StringFieldUpdateOperationsInput
  longitude: StringFieldUpdateOperationsInput
  emoji: StringFieldUpdateOperationsInput
  emojiU: StringFieldUpdateOperationsInput
  svg: NullableStringFieldUpdateOperationsInput
  cities: CityUpdateManyWithoutCountryNestedInput
  users: UserUpdateManyWithoutCountryNestedInput
}

input CityUpdateManyWithoutCountryNestedInput {
  create: [CityCreateWithoutCountryInput!]
  connectOrCreate: [CityCreateOrConnectWithoutCountryInput!]
  upsert: [CityUpsertWithWhereUniqueWithoutCountryInput!]
  createMany: CityCreateManyCountryInputEnvelope
  set: [CityWhereUniqueInput!]
  disconnect: [CityWhereUniqueInput!]
  delete: [CityWhereUniqueInput!]
  connect: [CityWhereUniqueInput!]
  update: [CityUpdateWithWhereUniqueWithoutCountryInput!]
  updateMany: [CityUpdateManyWithWhereWithoutCountryInput!]
  deleteMany: [CityScalarWhereInput!]
}

input CityUpsertWithWhereUniqueWithoutCountryInput {
  where: CityWhereUniqueInput!
  update: CityUpdateWithoutCountryInput!
  create: CityCreateWithoutCountryInput!
}

input CityUpdateWithoutCountryInput {
  name: StringFieldUpdateOperationsInput
  stateCode: NullableStringFieldUpdateOperationsInput
  stateName: NullableStringFieldUpdateOperationsInput
  countryCode: NullableStringFieldUpdateOperationsInput
  countryName: NullableStringFieldUpdateOperationsInput
  latitude: NullableStringFieldUpdateOperationsInput
  longitude: NullableStringFieldUpdateOperationsInput
  wikiDataId: StringFieldUpdateOperationsInput
  state: StateUpdateOneWithoutCitiesNestedInput
  users: UsersOnCityUpdateManyWithoutCityNestedInput
  companies: CompanyUpdateManyWithoutAddressNestedInput
  jobs: JobUpdateManyWithoutAddressNestedInput
  resumes: ResumeUpdateManyWithoutAddressNestedInput
  workExperiences: WorkExperienceUpdateManyWithoutAddressNestedInput
}

input UsersOnCityUpdateManyWithoutCityNestedInput {
  create: [UsersOnCityCreateWithoutCityInput!]
  connectOrCreate: [UsersOnCityCreateOrConnectWithoutCityInput!]
  upsert: [UsersOnCityUpsertWithWhereUniqueWithoutCityInput!]
  createMany: UsersOnCityCreateManyCityInputEnvelope
  set: [UsersOnCityWhereUniqueInput!]
  disconnect: [UsersOnCityWhereUniqueInput!]
  delete: [UsersOnCityWhereUniqueInput!]
  connect: [UsersOnCityWhereUniqueInput!]
  update: [UsersOnCityUpdateWithWhereUniqueWithoutCityInput!]
  updateMany: [UsersOnCityUpdateManyWithWhereWithoutCityInput!]
  deleteMany: [UsersOnCityScalarWhereInput!]
}

input UsersOnCityUpsertWithWhereUniqueWithoutCityInput {
  where: UsersOnCityWhereUniqueInput!
  update: UsersOnCityUpdateWithoutCityInput!
  create: UsersOnCityCreateWithoutCityInput!
}

input UsersOnCityUpdateWithoutCityInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutAddressNestedInput
}

input UserUpdateOneRequiredWithoutAddressNestedInput {
  create: UserCreateWithoutAddressInput
  connectOrCreate: UserCreateOrConnectWithoutAddressInput
  upsert: UserUpsertWithoutAddressInput
  connect: UserWhereUniqueInput
  update: UserUpdateToOneWithWhereWithoutAddressInput
}

input UserUpsertWithoutAddressInput {
  update: UserUpdateWithoutAddressInput!
  create: UserCreateWithoutAddressInput!
  where: UserWhereInput
}

input UserUpdateWithoutAddressInput {
  id: StringFieldUpdateOperationsInput
  avatarUrl: NullableStringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  emailVerified: BoolFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  phoneNumber: NullableStringFieldUpdateOperationsInput
  workingPosition: NullableEnumWorkPositionFieldUpdateOperationsInput
  status: EnumUserStatusFieldUpdateOperationsInput
  signInProvider: NullableEnumSignInProviderFieldUpdateOperationsInput
  color: NullableStringFieldUpdateOperationsInput
  role: EnumUserRoleFieldUpdateOperationsInput
  addressDetail: NullableStringFieldUpdateOperationsInput
  verifyCode: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  avatar: FileUpdateOneWithoutUsersNestedInput
  country: CountryUpdateOneWithoutUsersNestedInput
  social: SocialUpdateManyWithoutUserNestedInput
  resumes: ResumeUpdateManyWithoutUserNestedInput
  workExperiences: WorkExperienceUpdateManyWithoutUserNestedInput
  educations: EducationUpdateManyWithoutUserNestedInput
  projects: ProjectUpdateManyWithoutUserNestedInput
  applications: ApplicationUpdateManyWithoutCandidateNestedInput
  posts: PostUpdateManyWithoutAuthorNestedInput
  likes: LikePostUpdateManyWithoutUserNestedInput
  dislikes: DislikePostUpdateManyWithoutUserNestedInput
  comments: CommentUpdateManyWithoutUserNestedInput
  bookmarks: BookmarkPostUpdateManyWithoutUserNestedInput
  saveJobs: SaveJobUpdateManyWithoutUserNestedInput
  payments: PaymentUpdateManyWithoutUserNestedInput
  companies: CompanyUpdateManyWithoutUserNestedInput
  authorSettings: SettingUpdateManyWithoutAuthorNestedInput
  updatedBySettings: SettingUpdateManyWithoutUpdatedByNestedInput
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input NullableEnumWorkPositionFieldUpdateOperationsInput {
  set: WorkPosition
}

input EnumUserStatusFieldUpdateOperationsInput {
  set: UserStatus
}

input NullableEnumSignInProviderFieldUpdateOperationsInput {
  set: SignInProvider
}

input EnumUserRoleFieldUpdateOperationsInput {
  set: UserRole
}

input FileUpdateOneWithoutUsersNestedInput {
  create: FileCreateWithoutUsersInput
  connectOrCreate: FileCreateOrConnectWithoutUsersInput
  upsert: FileUpsertWithoutUsersInput
  disconnect: FileWhereInput
  delete: FileWhereInput
  connect: FileWhereUniqueInput
  update: FileUpdateToOneWithWhereWithoutUsersInput
}

input FileUpsertWithoutUsersInput {
  update: FileUpdateWithoutUsersInput!
  create: FileCreateWithoutUsersInput!
  where: FileWhereInput
}

input FileUpdateWithoutUsersInput {
  id: StringFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
  storageId: StringFieldUpdateOperationsInput
  provider: NullableEnumFileProviderFieldUpdateOperationsInput
  metadata: JSON
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  resumeTemplateId: NullableStringFieldUpdateOperationsInput
  companies: CompanyUpdateManyWithoutPhotosNestedInput
  resume: ResumeUpdateManyWithoutAvatarNestedInput
  projects: ProjectUpdateManyWithoutThumbnailNestedInput
  posts: PostUpdateManyWithoutThumbnailNestedInput
  company: CompanyUpdateManyWithoutAvatarNestedInput
  resumeTemplates: ResumeTemplateUpdateManyWithoutFileNestedInput
  certificate: CertificateUpdateOneWithoutFilesNestedInput
}

input NullableEnumFileProviderFieldUpdateOperationsInput {
  set: FileProvider
}

input CompanyUpdateManyWithoutPhotosNestedInput {
  create: [CompanyCreateWithoutPhotosInput!]
  connectOrCreate: [CompanyCreateOrConnectWithoutPhotosInput!]
  upsert: [CompanyUpsertWithWhereUniqueWithoutPhotosInput!]
  set: [CompanyWhereUniqueInput!]
  disconnect: [CompanyWhereUniqueInput!]
  delete: [CompanyWhereUniqueInput!]
  connect: [CompanyWhereUniqueInput!]
  update: [CompanyUpdateWithWhereUniqueWithoutPhotosInput!]
  updateMany: [CompanyUpdateManyWithWhereWithoutPhotosInput!]
  deleteMany: [CompanyScalarWhereInput!]
}

input CompanyUpsertWithWhereUniqueWithoutPhotosInput {
  where: CompanyWhereUniqueInput!
  update: CompanyUpdateWithoutPhotosInput!
  create: CompanyCreateWithoutPhotosInput!
}

input CompanyUpdateWithoutPhotosInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  addressDetail: StringFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  avatar: FileUpdateOneWithoutCompanyNestedInput
  type: CompanyTypeUpdateOneWithoutCompaniesNestedInput
  size: CompanySizeUpdateOneWithoutCompaniesNestedInput
  address: CityUpdateOneRequiredWithoutCompaniesNestedInput
  industries: JobCategoryUpdateManyWithoutCompaniesNestedInput
  social: SocialUpdateManyWithoutCompanyNestedInput
  jobs: JobUpdateManyWithoutCompanyNestedInput
  workExperiences: WorkExperienceUpdateManyWithoutCompanyNestedInput
  projects: ProjectUpdateManyWithoutCompanyNestedInput
  references: ReferenceUpdateManyWithoutCompanyNestedInput
  user: UserUpdateOneWithoutCompaniesNestedInput
}

input FileUpdateOneWithoutCompanyNestedInput {
  create: FileCreateWithoutCompanyInput
  connectOrCreate: FileCreateOrConnectWithoutCompanyInput
  upsert: FileUpsertWithoutCompanyInput
  disconnect: FileWhereInput
  delete: FileWhereInput
  connect: FileWhereUniqueInput
  update: FileUpdateToOneWithWhereWithoutCompanyInput
}

input FileUpsertWithoutCompanyInput {
  update: FileUpdateWithoutCompanyInput!
  create: FileCreateWithoutCompanyInput!
  where: FileWhereInput
}

input FileUpdateWithoutCompanyInput {
  id: StringFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
  storageId: StringFieldUpdateOperationsInput
  provider: NullableEnumFileProviderFieldUpdateOperationsInput
  metadata: JSON
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  resumeTemplateId: NullableStringFieldUpdateOperationsInput
  users: UserUpdateManyWithoutAvatarNestedInput
  companies: CompanyUpdateManyWithoutPhotosNestedInput
  resume: ResumeUpdateManyWithoutAvatarNestedInput
  projects: ProjectUpdateManyWithoutThumbnailNestedInput
  posts: PostUpdateManyWithoutThumbnailNestedInput
  resumeTemplates: ResumeTemplateUpdateManyWithoutFileNestedInput
  certificate: CertificateUpdateOneWithoutFilesNestedInput
}

input UserUpdateManyWithoutAvatarNestedInput {
  create: [UserCreateWithoutAvatarInput!]
  connectOrCreate: [UserCreateOrConnectWithoutAvatarInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutAvatarInput!]
  createMany: UserCreateManyAvatarInputEnvelope
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutAvatarInput!]
  updateMany: [UserUpdateManyWithWhereWithoutAvatarInput!]
  deleteMany: [UserScalarWhereInput!]
}

input UserUpsertWithWhereUniqueWithoutAvatarInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutAvatarInput!
  create: UserCreateWithoutAvatarInput!
}

input UserUpdateWithoutAvatarInput {
  id: StringFieldUpdateOperationsInput
  avatarUrl: NullableStringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  emailVerified: BoolFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  phoneNumber: NullableStringFieldUpdateOperationsInput
  workingPosition: NullableEnumWorkPositionFieldUpdateOperationsInput
  status: EnumUserStatusFieldUpdateOperationsInput
  signInProvider: NullableEnumSignInProviderFieldUpdateOperationsInput
  color: NullableStringFieldUpdateOperationsInput
  role: EnumUserRoleFieldUpdateOperationsInput
  addressDetail: NullableStringFieldUpdateOperationsInput
  verifyCode: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  country: CountryUpdateOneWithoutUsersNestedInput
  social: SocialUpdateManyWithoutUserNestedInput
  resumes: ResumeUpdateManyWithoutUserNestedInput
  workExperiences: WorkExperienceUpdateManyWithoutUserNestedInput
  educations: EducationUpdateManyWithoutUserNestedInput
  projects: ProjectUpdateManyWithoutUserNestedInput
  applications: ApplicationUpdateManyWithoutCandidateNestedInput
  posts: PostUpdateManyWithoutAuthorNestedInput
  likes: LikePostUpdateManyWithoutUserNestedInput
  dislikes: DislikePostUpdateManyWithoutUserNestedInput
  comments: CommentUpdateManyWithoutUserNestedInput
  bookmarks: BookmarkPostUpdateManyWithoutUserNestedInput
  saveJobs: SaveJobUpdateManyWithoutUserNestedInput
  payments: PaymentUpdateManyWithoutUserNestedInput
  address: UsersOnCityUpdateManyWithoutUserNestedInput
  companies: CompanyUpdateManyWithoutUserNestedInput
  authorSettings: SettingUpdateManyWithoutAuthorNestedInput
  updatedBySettings: SettingUpdateManyWithoutUpdatedByNestedInput
}

input CountryUpdateOneWithoutUsersNestedInput {
  create: CountryCreateWithoutUsersInput
  connectOrCreate: CountryCreateOrConnectWithoutUsersInput
  upsert: CountryUpsertWithoutUsersInput
  disconnect: CountryWhereInput
  delete: CountryWhereInput
  connect: CountryWhereUniqueInput
  update: CountryUpdateToOneWithWhereWithoutUsersInput
}

input CountryUpsertWithoutUsersInput {
  update: CountryUpdateWithoutUsersInput!
  create: CountryCreateWithoutUsersInput!
  where: CountryWhereInput
}

input CountryUpdateWithoutUsersInput {
  name: StringFieldUpdateOperationsInput
  iso3: StringFieldUpdateOperationsInput
  iso2: StringFieldUpdateOperationsInput
  numericCode: StringFieldUpdateOperationsInput
  phoneCode: StringFieldUpdateOperationsInput
  capital: StringFieldUpdateOperationsInput
  currency: StringFieldUpdateOperationsInput
  currencyName: StringFieldUpdateOperationsInput
  currencySymbol: StringFieldUpdateOperationsInput
  tld: StringFieldUpdateOperationsInput
  native: NullableStringFieldUpdateOperationsInput
  region: NullableStringFieldUpdateOperationsInput
  regionId: NullableStringFieldUpdateOperationsInput
  subregion: NullableStringFieldUpdateOperationsInput
  subregionId: NullableStringFieldUpdateOperationsInput
  nationality: StringFieldUpdateOperationsInput
  timezones: JSON
  translations: JSON
  latitude: StringFieldUpdateOperationsInput
  longitude: StringFieldUpdateOperationsInput
  emoji: StringFieldUpdateOperationsInput
  emojiU: StringFieldUpdateOperationsInput
  svg: NullableStringFieldUpdateOperationsInput
  states: StateUpdateManyWithoutCountryNestedInput
  cities: CityUpdateManyWithoutCountryNestedInput
}

input StateUpdateManyWithoutCountryNestedInput {
  create: [StateCreateWithoutCountryInput!]
  connectOrCreate: [StateCreateOrConnectWithoutCountryInput!]
  upsert: [StateUpsertWithWhereUniqueWithoutCountryInput!]
  createMany: StateCreateManyCountryInputEnvelope
  set: [StateWhereUniqueInput!]
  disconnect: [StateWhereUniqueInput!]
  delete: [StateWhereUniqueInput!]
  connect: [StateWhereUniqueInput!]
  update: [StateUpdateWithWhereUniqueWithoutCountryInput!]
  updateMany: [StateUpdateManyWithWhereWithoutCountryInput!]
  deleteMany: [StateScalarWhereInput!]
}

input StateUpsertWithWhereUniqueWithoutCountryInput {
  where: StateWhereUniqueInput!
  update: StateUpdateWithoutCountryInput!
  create: StateCreateWithoutCountryInput!
}

input StateUpdateWithoutCountryInput {
  name: StringFieldUpdateOperationsInput
  countryCode: NullableStringFieldUpdateOperationsInput
  countryName: NullableStringFieldUpdateOperationsInput
  stateCode: NullableStringFieldUpdateOperationsInput
  type: NullableStringFieldUpdateOperationsInput
  latitude: NullableStringFieldUpdateOperationsInput
  longitude: NullableStringFieldUpdateOperationsInput
  cities: CityUpdateManyWithoutStateNestedInput
}

input CityUpdateManyWithoutStateNestedInput {
  create: [CityCreateWithoutStateInput!]
  connectOrCreate: [CityCreateOrConnectWithoutStateInput!]
  upsert: [CityUpsertWithWhereUniqueWithoutStateInput!]
  createMany: CityCreateManyStateInputEnvelope
  set: [CityWhereUniqueInput!]
  disconnect: [CityWhereUniqueInput!]
  delete: [CityWhereUniqueInput!]
  connect: [CityWhereUniqueInput!]
  update: [CityUpdateWithWhereUniqueWithoutStateInput!]
  updateMany: [CityUpdateManyWithWhereWithoutStateInput!]
  deleteMany: [CityScalarWhereInput!]
}

input CityUpsertWithWhereUniqueWithoutStateInput {
  where: CityWhereUniqueInput!
  update: CityUpdateWithoutStateInput!
  create: CityCreateWithoutStateInput!
}

input CityUpdateWithoutStateInput {
  name: StringFieldUpdateOperationsInput
  stateCode: NullableStringFieldUpdateOperationsInput
  stateName: NullableStringFieldUpdateOperationsInput
  countryCode: NullableStringFieldUpdateOperationsInput
  countryName: NullableStringFieldUpdateOperationsInput
  latitude: NullableStringFieldUpdateOperationsInput
  longitude: NullableStringFieldUpdateOperationsInput
  wikiDataId: StringFieldUpdateOperationsInput
  country: CountryUpdateOneWithoutCitiesNestedInput
  users: UsersOnCityUpdateManyWithoutCityNestedInput
  companies: CompanyUpdateManyWithoutAddressNestedInput
  jobs: JobUpdateManyWithoutAddressNestedInput
  resumes: ResumeUpdateManyWithoutAddressNestedInput
  workExperiences: WorkExperienceUpdateManyWithoutAddressNestedInput
}

input CountryUpdateOneWithoutCitiesNestedInput {
  create: CountryCreateWithoutCitiesInput
  connectOrCreate: CountryCreateOrConnectWithoutCitiesInput
  upsert: CountryUpsertWithoutCitiesInput
  disconnect: CountryWhereInput
  delete: CountryWhereInput
  connect: CountryWhereUniqueInput
  update: CountryUpdateToOneWithWhereWithoutCitiesInput
}

input CountryUpsertWithoutCitiesInput {
  update: CountryUpdateWithoutCitiesInput!
  create: CountryCreateWithoutCitiesInput!
  where: CountryWhereInput
}

input CountryUpdateWithoutCitiesInput {
  name: StringFieldUpdateOperationsInput
  iso3: StringFieldUpdateOperationsInput
  iso2: StringFieldUpdateOperationsInput
  numericCode: StringFieldUpdateOperationsInput
  phoneCode: StringFieldUpdateOperationsInput
  capital: StringFieldUpdateOperationsInput
  currency: StringFieldUpdateOperationsInput
  currencyName: StringFieldUpdateOperationsInput
  currencySymbol: StringFieldUpdateOperationsInput
  tld: StringFieldUpdateOperationsInput
  native: NullableStringFieldUpdateOperationsInput
  region: NullableStringFieldUpdateOperationsInput
  regionId: NullableStringFieldUpdateOperationsInput
  subregion: NullableStringFieldUpdateOperationsInput
  subregionId: NullableStringFieldUpdateOperationsInput
  nationality: StringFieldUpdateOperationsInput
  timezones: JSON
  translations: JSON
  latitude: StringFieldUpdateOperationsInput
  longitude: StringFieldUpdateOperationsInput
  emoji: StringFieldUpdateOperationsInput
  emojiU: StringFieldUpdateOperationsInput
  svg: NullableStringFieldUpdateOperationsInput
  states: StateUpdateManyWithoutCountryNestedInput
  users: UserUpdateManyWithoutCountryNestedInput
}

input UserUpdateManyWithoutCountryNestedInput {
  create: [UserCreateWithoutCountryInput!]
  connectOrCreate: [UserCreateOrConnectWithoutCountryInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutCountryInput!]
  createMany: UserCreateManyCountryInputEnvelope
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutCountryInput!]
  updateMany: [UserUpdateManyWithWhereWithoutCountryInput!]
  deleteMany: [UserScalarWhereInput!]
}

input UserUpsertWithWhereUniqueWithoutCountryInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutCountryInput!
  create: UserCreateWithoutCountryInput!
}

input UserUpdateWithoutCountryInput {
  id: StringFieldUpdateOperationsInput
  avatarUrl: NullableStringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  emailVerified: BoolFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  phoneNumber: NullableStringFieldUpdateOperationsInput
  workingPosition: NullableEnumWorkPositionFieldUpdateOperationsInput
  status: EnumUserStatusFieldUpdateOperationsInput
  signInProvider: NullableEnumSignInProviderFieldUpdateOperationsInput
  color: NullableStringFieldUpdateOperationsInput
  role: EnumUserRoleFieldUpdateOperationsInput
  addressDetail: NullableStringFieldUpdateOperationsInput
  verifyCode: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  avatar: FileUpdateOneWithoutUsersNestedInput
  social: SocialUpdateManyWithoutUserNestedInput
  resumes: ResumeUpdateManyWithoutUserNestedInput
  workExperiences: WorkExperienceUpdateManyWithoutUserNestedInput
  educations: EducationUpdateManyWithoutUserNestedInput
  projects: ProjectUpdateManyWithoutUserNestedInput
  applications: ApplicationUpdateManyWithoutCandidateNestedInput
  posts: PostUpdateManyWithoutAuthorNestedInput
  likes: LikePostUpdateManyWithoutUserNestedInput
  dislikes: DislikePostUpdateManyWithoutUserNestedInput
  comments: CommentUpdateManyWithoutUserNestedInput
  bookmarks: BookmarkPostUpdateManyWithoutUserNestedInput
  saveJobs: SaveJobUpdateManyWithoutUserNestedInput
  payments: PaymentUpdateManyWithoutUserNestedInput
  address: UsersOnCityUpdateManyWithoutUserNestedInput
  companies: CompanyUpdateManyWithoutUserNestedInput
  authorSettings: SettingUpdateManyWithoutAuthorNestedInput
  updatedBySettings: SettingUpdateManyWithoutUpdatedByNestedInput
}

input SocialUpdateManyWithoutUserNestedInput {
  create: [SocialCreateWithoutUserInput!]
  connectOrCreate: [SocialCreateOrConnectWithoutUserInput!]
  upsert: [SocialUpsertWithWhereUniqueWithoutUserInput!]
  createMany: SocialCreateManyUserInputEnvelope
  set: [SocialWhereUniqueInput!]
  disconnect: [SocialWhereUniqueInput!]
  delete: [SocialWhereUniqueInput!]
  connect: [SocialWhereUniqueInput!]
  update: [SocialUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [SocialUpdateManyWithWhereWithoutUserInput!]
  deleteMany: [SocialScalarWhereInput!]
}

input SocialUpsertWithWhereUniqueWithoutUserInput {
  where: SocialWhereUniqueInput!
  update: SocialUpdateWithoutUserInput!
  create: SocialCreateWithoutUserInput!
}

input SocialUpdateWithoutUserInput {
  id: StringFieldUpdateOperationsInput
  type: NullableEnumSocialTypeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  company: CompanyUpdateOneWithoutSocialNestedInput
  resume: ResumeUpdateOneWithoutSocialsNestedInput
}

input NullableEnumSocialTypeFieldUpdateOperationsInput {
  set: SocialType
}

input CompanyUpdateOneWithoutSocialNestedInput {
  create: CompanyCreateWithoutSocialInput
  connectOrCreate: CompanyCreateOrConnectWithoutSocialInput
  upsert: CompanyUpsertWithoutSocialInput
  disconnect: CompanyWhereInput
  delete: CompanyWhereInput
  connect: CompanyWhereUniqueInput
  update: CompanyUpdateToOneWithWhereWithoutSocialInput
}

input CompanyUpsertWithoutSocialInput {
  update: CompanyUpdateWithoutSocialInput!
  create: CompanyCreateWithoutSocialInput!
  where: CompanyWhereInput
}

input CompanyUpdateWithoutSocialInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  addressDetail: StringFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  avatar: FileUpdateOneWithoutCompanyNestedInput
  type: CompanyTypeUpdateOneWithoutCompaniesNestedInput
  size: CompanySizeUpdateOneWithoutCompaniesNestedInput
  photos: FileUpdateManyWithoutCompaniesNestedInput
  address: CityUpdateOneRequiredWithoutCompaniesNestedInput
  industries: JobCategoryUpdateManyWithoutCompaniesNestedInput
  jobs: JobUpdateManyWithoutCompanyNestedInput
  workExperiences: WorkExperienceUpdateManyWithoutCompanyNestedInput
  projects: ProjectUpdateManyWithoutCompanyNestedInput
  references: ReferenceUpdateManyWithoutCompanyNestedInput
  user: UserUpdateOneWithoutCompaniesNestedInput
}

input CompanyTypeUpdateOneWithoutCompaniesNestedInput {
  create: CompanyTypeCreateWithoutCompaniesInput
  connectOrCreate: CompanyTypeCreateOrConnectWithoutCompaniesInput
  upsert: CompanyTypeUpsertWithoutCompaniesInput
  disconnect: CompanyTypeWhereInput
  delete: CompanyTypeWhereInput
  connect: CompanyTypeWhereUniqueInput
  update: CompanyTypeUpdateToOneWithWhereWithoutCompaniesInput
}

input CompanyTypeUpsertWithoutCompaniesInput {
  update: CompanyTypeUpdateWithoutCompaniesInput!
  create: CompanyTypeCreateWithoutCompaniesInput!
  where: CompanyTypeWhereInput
}

input CompanyTypeUpdateWithoutCompaniesInput {
  id: StringFieldUpdateOperationsInput
  key: StringFieldUpdateOperationsInput
  value: StringFieldUpdateOperationsInput
  isDefault: NullableBoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
}

input CompanyTypeUpdateToOneWithWhereWithoutCompaniesInput {
  where: CompanyTypeWhereInput
  data: CompanyTypeUpdateWithoutCompaniesInput!
}

input CompanySizeUpdateOneWithoutCompaniesNestedInput {
  create: CompanySizeCreateWithoutCompaniesInput
  connectOrCreate: CompanySizeCreateOrConnectWithoutCompaniesInput
  upsert: CompanySizeUpsertWithoutCompaniesInput
  disconnect: CompanySizeWhereInput
  delete: CompanySizeWhereInput
  connect: CompanySizeWhereUniqueInput
  update: CompanySizeUpdateToOneWithWhereWithoutCompaniesInput
}

input CompanySizeUpsertWithoutCompaniesInput {
  update: CompanySizeUpdateWithoutCompaniesInput!
  create: CompanySizeCreateWithoutCompaniesInput!
  where: CompanySizeWhereInput
}

input CompanySizeUpdateWithoutCompaniesInput {
  id: StringFieldUpdateOperationsInput
  key: StringFieldUpdateOperationsInput
  value: StringFieldUpdateOperationsInput
  isDefault: NullableBoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
}

input CompanySizeUpdateToOneWithWhereWithoutCompaniesInput {
  where: CompanySizeWhereInput
  data: CompanySizeUpdateWithoutCompaniesInput!
}

input FileUpdateManyWithoutCompaniesNestedInput {
  create: [FileCreateWithoutCompaniesInput!]
  connectOrCreate: [FileCreateOrConnectWithoutCompaniesInput!]
  upsert: [FileUpsertWithWhereUniqueWithoutCompaniesInput!]
  set: [FileWhereUniqueInput!]
  disconnect: [FileWhereUniqueInput!]
  delete: [FileWhereUniqueInput!]
  connect: [FileWhereUniqueInput!]
  update: [FileUpdateWithWhereUniqueWithoutCompaniesInput!]
  updateMany: [FileUpdateManyWithWhereWithoutCompaniesInput!]
  deleteMany: [FileScalarWhereInput!]
}

input FileUpsertWithWhereUniqueWithoutCompaniesInput {
  where: FileWhereUniqueInput!
  update: FileUpdateWithoutCompaniesInput!
  create: FileCreateWithoutCompaniesInput!
}

input FileUpdateWithoutCompaniesInput {
  id: StringFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
  storageId: StringFieldUpdateOperationsInput
  provider: NullableEnumFileProviderFieldUpdateOperationsInput
  metadata: JSON
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  resumeTemplateId: NullableStringFieldUpdateOperationsInput
  users: UserUpdateManyWithoutAvatarNestedInput
  resume: ResumeUpdateManyWithoutAvatarNestedInput
  projects: ProjectUpdateManyWithoutThumbnailNestedInput
  posts: PostUpdateManyWithoutThumbnailNestedInput
  company: CompanyUpdateManyWithoutAvatarNestedInput
  resumeTemplates: ResumeTemplateUpdateManyWithoutFileNestedInput
  certificate: CertificateUpdateOneWithoutFilesNestedInput
}

input ResumeUpdateManyWithoutAvatarNestedInput {
  create: [ResumeCreateWithoutAvatarInput!]
  connectOrCreate: [ResumeCreateOrConnectWithoutAvatarInput!]
  upsert: [ResumeUpsertWithWhereUniqueWithoutAvatarInput!]
  createMany: ResumeCreateManyAvatarInputEnvelope
  set: [ResumeWhereUniqueInput!]
  disconnect: [ResumeWhereUniqueInput!]
  delete: [ResumeWhereUniqueInput!]
  connect: [ResumeWhereUniqueInput!]
  update: [ResumeUpdateWithWhereUniqueWithoutAvatarInput!]
  updateMany: [ResumeUpdateManyWithWhereWithoutAvatarInput!]
  deleteMany: [ResumeScalarWhereInput!]
}

input ResumeUpsertWithWhereUniqueWithoutAvatarInput {
  where: ResumeWhereUniqueInput!
  update: ResumeUpdateWithoutAvatarInput!
  create: ResumeCreateWithoutAvatarInput!
}

input ResumeUpdateWithoutAvatarInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  fullName: NullableStringFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  addressDetail: NullableStringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  isSummary: NullableBoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutResumesNestedInput
  address: CityUpdateOneWithoutResumesNestedInput
  language: LanguageUpdateOneWithoutResumesNestedInput
  jobTitle: JobTitleUpdateOneRequiredWithoutResumesNestedInput
  applications: ApplicationUpdateManyWithoutResumeNestedInput
  workExperiences: WorkExperienceUpdateManyWithoutResumeNestedInput
  educations: EducationUpdateManyWithoutResumeNestedInput
  skills: SkillUpdateManyWithoutResumeNestedInput
  projects: ProjectUpdateManyWithoutResumeNestedInput
  socials: SocialUpdateManyWithoutResumeNestedInput
  languageSkills: LanguageSkillUpdateManyWithoutResumeNestedInput
  activities: ActivityUpdateManyWithoutResumeNestedInput
}

input UserUpdateOneRequiredWithoutResumesNestedInput {
  create: UserCreateWithoutResumesInput
  connectOrCreate: UserCreateOrConnectWithoutResumesInput
  upsert: UserUpsertWithoutResumesInput
  connect: UserWhereUniqueInput
  update: UserUpdateToOneWithWhereWithoutResumesInput
}

input UserUpsertWithoutResumesInput {
  update: UserUpdateWithoutResumesInput!
  create: UserCreateWithoutResumesInput!
  where: UserWhereInput
}

input UserUpdateWithoutResumesInput {
  id: StringFieldUpdateOperationsInput
  avatarUrl: NullableStringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  emailVerified: BoolFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  phoneNumber: NullableStringFieldUpdateOperationsInput
  workingPosition: NullableEnumWorkPositionFieldUpdateOperationsInput
  status: EnumUserStatusFieldUpdateOperationsInput
  signInProvider: NullableEnumSignInProviderFieldUpdateOperationsInput
  color: NullableStringFieldUpdateOperationsInput
  role: EnumUserRoleFieldUpdateOperationsInput
  addressDetail: NullableStringFieldUpdateOperationsInput
  verifyCode: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  avatar: FileUpdateOneWithoutUsersNestedInput
  country: CountryUpdateOneWithoutUsersNestedInput
  social: SocialUpdateManyWithoutUserNestedInput
  workExperiences: WorkExperienceUpdateManyWithoutUserNestedInput
  educations: EducationUpdateManyWithoutUserNestedInput
  projects: ProjectUpdateManyWithoutUserNestedInput
  applications: ApplicationUpdateManyWithoutCandidateNestedInput
  posts: PostUpdateManyWithoutAuthorNestedInput
  likes: LikePostUpdateManyWithoutUserNestedInput
  dislikes: DislikePostUpdateManyWithoutUserNestedInput
  comments: CommentUpdateManyWithoutUserNestedInput
  bookmarks: BookmarkPostUpdateManyWithoutUserNestedInput
  saveJobs: SaveJobUpdateManyWithoutUserNestedInput
  payments: PaymentUpdateManyWithoutUserNestedInput
  address: UsersOnCityUpdateManyWithoutUserNestedInput
  companies: CompanyUpdateManyWithoutUserNestedInput
  authorSettings: SettingUpdateManyWithoutAuthorNestedInput
  updatedBySettings: SettingUpdateManyWithoutUpdatedByNestedInput
}

input WorkExperienceUpdateManyWithoutUserNestedInput {
  create: [WorkExperienceCreateWithoutUserInput!]
  connectOrCreate: [WorkExperienceCreateOrConnectWithoutUserInput!]
  upsert: [WorkExperienceUpsertWithWhereUniqueWithoutUserInput!]
  createMany: WorkExperienceCreateManyUserInputEnvelope
  set: [WorkExperienceWhereUniqueInput!]
  disconnect: [WorkExperienceWhereUniqueInput!]
  delete: [WorkExperienceWhereUniqueInput!]
  connect: [WorkExperienceWhereUniqueInput!]
  update: [WorkExperienceUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [WorkExperienceUpdateManyWithWhereWithoutUserInput!]
  deleteMany: [WorkExperienceScalarWhereInput!]
}

input WorkExperienceUpsertWithWhereUniqueWithoutUserInput {
  where: WorkExperienceWhereUniqueInput!
  update: WorkExperienceUpdateWithoutUserInput!
  create: WorkExperienceCreateWithoutUserInput!
}

input WorkExperienceUpdateWithoutUserInput {
  id: StringFieldUpdateOperationsInput
  isFreelancer: NullableBoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  startAt: DateTimeFieldUpdateOperationsInput
  endAt: NullableDateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  jobTitle: JobTitleUpdateOneRequiredWithoutWorkExperiencesNestedInput
  company: CompanyUpdateOneWithoutWorkExperiencesNestedInput
  resume: ResumeUpdateOneWithoutWorkExperiencesNestedInput
  address: CityUpdateOneWithoutWorkExperiencesNestedInput
}

input JobTitleUpdateOneRequiredWithoutWorkExperiencesNestedInput {
  create: JobTitleCreateWithoutWorkExperiencesInput
  connectOrCreate: JobTitleCreateOrConnectWithoutWorkExperiencesInput
  upsert: JobTitleUpsertWithoutWorkExperiencesInput
  connect: JobTitleWhereUniqueInput
  update: JobTitleUpdateToOneWithWhereWithoutWorkExperiencesInput
}

input JobTitleUpsertWithoutWorkExperiencesInput {
  update: JobTitleUpdateWithoutWorkExperiencesInput!
  create: JobTitleCreateWithoutWorkExperiencesInput!
  where: JobTitleWhereInput
}

input JobTitleUpdateWithoutWorkExperiencesInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  isFeature: NullableBoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  jobs: JobUpdateManyWithoutJobTitleNestedInput
  resumes: ResumeUpdateManyWithoutJobTitleNestedInput
}

input JobUpdateManyWithoutJobTitleNestedInput {
  create: [JobCreateWithoutJobTitleInput!]
  connectOrCreate: [JobCreateOrConnectWithoutJobTitleInput!]
  upsert: [JobUpsertWithWhereUniqueWithoutJobTitleInput!]
  createMany: JobCreateManyJobTitleInputEnvelope
  set: [JobWhereUniqueInput!]
  disconnect: [JobWhereUniqueInput!]
  delete: [JobWhereUniqueInput!]
  connect: [JobWhereUniqueInput!]
  update: [JobUpdateWithWhereUniqueWithoutJobTitleInput!]
  updateMany: [JobUpdateManyWithWhereWithoutJobTitleInput!]
  deleteMany: [JobScalarWhereInput!]
}

input JobUpsertWithWhereUniqueWithoutJobTitleInput {
  where: JobWhereUniqueInput!
  update: JobUpdateWithoutJobTitleInput!
  create: JobCreateWithoutJobTitleInput!
}

input JobUpdateWithoutJobTitleInput {
  id: StringFieldUpdateOperationsInput
  type: EnumJobTypeFieldUpdateOperationsInput
  level: EnumJobLevelFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  addressDetail: NullableStringFieldUpdateOperationsInput
  salary: EnumJobSalaryFieldUpdateOperationsInput
  salaryMetadata: JSON
  description: StringFieldUpdateOperationsInput
  isBoot: NullableBoolFieldUpdateOperationsInput
  numberOfRecruits: IntFieldUpdateOperationsInput
  applicationDeadline: DateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  address: CityUpdateOneRequiredWithoutJobsNestedInput
  jobCategory: JobCategoryUpdateOneRequiredWithoutJobsNestedInput
  company: CompanyUpdateOneRequiredWithoutJobsNestedInput
  tags: TagUpdateManyWithoutJobsNestedInput
  skills: SkillUpdateManyWithoutJobsNestedInput
  applications: ApplicationUpdateManyWithoutJobNestedInput
  saveJobs: SaveJobUpdateManyWithoutJobNestedInput
}

input JobCategoryUpdateOneRequiredWithoutJobsNestedInput {
  create: JobCategoryCreateWithoutJobsInput
  connectOrCreate: JobCategoryCreateOrConnectWithoutJobsInput
  upsert: JobCategoryUpsertWithoutJobsInput
  connect: JobCategoryWhereUniqueInput
  update: JobCategoryUpdateToOneWithWhereWithoutJobsInput
}

input JobCategoryUpsertWithoutJobsInput {
  update: JobCategoryUpdateWithoutJobsInput!
  create: JobCategoryCreateWithoutJobsInput!
  where: JobCategoryWhereInput
}

input JobCategoryUpdateWithoutJobsInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  isFeature: NullableBoolFieldUpdateOperationsInput
  isTheFive: NullableBoolFieldUpdateOperationsInput
  isDefault: NullableBoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  companies: CompanyUpdateManyWithoutIndustriesNestedInput
  posts: PostUpdateManyWithoutJobCategoryNestedInput
}

input CompanyUpdateManyWithoutIndustriesNestedInput {
  create: [CompanyCreateWithoutIndustriesInput!]
  connectOrCreate: [CompanyCreateOrConnectWithoutIndustriesInput!]
  upsert: [CompanyUpsertWithWhereUniqueWithoutIndustriesInput!]
  set: [CompanyWhereUniqueInput!]
  disconnect: [CompanyWhereUniqueInput!]
  delete: [CompanyWhereUniqueInput!]
  connect: [CompanyWhereUniqueInput!]
  update: [CompanyUpdateWithWhereUniqueWithoutIndustriesInput!]
  updateMany: [CompanyUpdateManyWithWhereWithoutIndustriesInput!]
  deleteMany: [CompanyScalarWhereInput!]
}

input CompanyUpsertWithWhereUniqueWithoutIndustriesInput {
  where: CompanyWhereUniqueInput!
  update: CompanyUpdateWithoutIndustriesInput!
  create: CompanyCreateWithoutIndustriesInput!
}

input CompanyUpdateWithoutIndustriesInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  addressDetail: StringFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  avatar: FileUpdateOneWithoutCompanyNestedInput
  type: CompanyTypeUpdateOneWithoutCompaniesNestedInput
  size: CompanySizeUpdateOneWithoutCompaniesNestedInput
  photos: FileUpdateManyWithoutCompaniesNestedInput
  address: CityUpdateOneRequiredWithoutCompaniesNestedInput
  social: SocialUpdateManyWithoutCompanyNestedInput
  jobs: JobUpdateManyWithoutCompanyNestedInput
  workExperiences: WorkExperienceUpdateManyWithoutCompanyNestedInput
  projects: ProjectUpdateManyWithoutCompanyNestedInput
  references: ReferenceUpdateManyWithoutCompanyNestedInput
  user: UserUpdateOneWithoutCompaniesNestedInput
}

input CityUpdateOneRequiredWithoutCompaniesNestedInput {
  create: CityCreateWithoutCompaniesInput
  connectOrCreate: CityCreateOrConnectWithoutCompaniesInput
  upsert: CityUpsertWithoutCompaniesInput
  connect: CityWhereUniqueInput
  update: CityUpdateToOneWithWhereWithoutCompaniesInput
}

input CityUpsertWithoutCompaniesInput {
  update: CityUpdateWithoutCompaniesInput!
  create: CityCreateWithoutCompaniesInput!
  where: CityWhereInput
}

input CityUpdateWithoutCompaniesInput {
  name: StringFieldUpdateOperationsInput
  stateCode: NullableStringFieldUpdateOperationsInput
  stateName: NullableStringFieldUpdateOperationsInput
  countryCode: NullableStringFieldUpdateOperationsInput
  countryName: NullableStringFieldUpdateOperationsInput
  latitude: NullableStringFieldUpdateOperationsInput
  longitude: NullableStringFieldUpdateOperationsInput
  wikiDataId: StringFieldUpdateOperationsInput
  state: StateUpdateOneWithoutCitiesNestedInput
  country: CountryUpdateOneWithoutCitiesNestedInput
  users: UsersOnCityUpdateManyWithoutCityNestedInput
  jobs: JobUpdateManyWithoutAddressNestedInput
  resumes: ResumeUpdateManyWithoutAddressNestedInput
  workExperiences: WorkExperienceUpdateManyWithoutAddressNestedInput
}

input JobUpdateManyWithoutAddressNestedInput {
  create: [JobCreateWithoutAddressInput!]
  connectOrCreate: [JobCreateOrConnectWithoutAddressInput!]
  upsert: [JobUpsertWithWhereUniqueWithoutAddressInput!]
  createMany: JobCreateManyAddressInputEnvelope
  set: [JobWhereUniqueInput!]
  disconnect: [JobWhereUniqueInput!]
  delete: [JobWhereUniqueInput!]
  connect: [JobWhereUniqueInput!]
  update: [JobUpdateWithWhereUniqueWithoutAddressInput!]
  updateMany: [JobUpdateManyWithWhereWithoutAddressInput!]
  deleteMany: [JobScalarWhereInput!]
}

input JobUpsertWithWhereUniqueWithoutAddressInput {
  where: JobWhereUniqueInput!
  update: JobUpdateWithoutAddressInput!
  create: JobCreateWithoutAddressInput!
}

input JobUpdateWithoutAddressInput {
  id: StringFieldUpdateOperationsInput
  type: EnumJobTypeFieldUpdateOperationsInput
  level: EnumJobLevelFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  addressDetail: NullableStringFieldUpdateOperationsInput
  salary: EnumJobSalaryFieldUpdateOperationsInput
  salaryMetadata: JSON
  description: StringFieldUpdateOperationsInput
  isBoot: NullableBoolFieldUpdateOperationsInput
  numberOfRecruits: IntFieldUpdateOperationsInput
  applicationDeadline: DateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  jobTitle: JobTitleUpdateOneRequiredWithoutJobsNestedInput
  jobCategory: JobCategoryUpdateOneRequiredWithoutJobsNestedInput
  company: CompanyUpdateOneRequiredWithoutJobsNestedInput
  tags: TagUpdateManyWithoutJobsNestedInput
  skills: SkillUpdateManyWithoutJobsNestedInput
  applications: ApplicationUpdateManyWithoutJobNestedInput
  saveJobs: SaveJobUpdateManyWithoutJobNestedInput
}

input JobTitleUpdateOneRequiredWithoutJobsNestedInput {
  create: JobTitleCreateWithoutJobsInput
  connectOrCreate: JobTitleCreateOrConnectWithoutJobsInput
  upsert: JobTitleUpsertWithoutJobsInput
  connect: JobTitleWhereUniqueInput
  update: JobTitleUpdateToOneWithWhereWithoutJobsInput
}

input JobTitleUpsertWithoutJobsInput {
  update: JobTitleUpdateWithoutJobsInput!
  create: JobTitleCreateWithoutJobsInput!
  where: JobTitleWhereInput
}

input JobTitleUpdateWithoutJobsInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  isFeature: NullableBoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  resumes: ResumeUpdateManyWithoutJobTitleNestedInput
  workExperiences: WorkExperienceUpdateManyWithoutJobTitleNestedInput
}

input ResumeUpdateManyWithoutJobTitleNestedInput {
  create: [ResumeCreateWithoutJobTitleInput!]
  connectOrCreate: [ResumeCreateOrConnectWithoutJobTitleInput!]
  upsert: [ResumeUpsertWithWhereUniqueWithoutJobTitleInput!]
  createMany: ResumeCreateManyJobTitleInputEnvelope
  set: [ResumeWhereUniqueInput!]
  disconnect: [ResumeWhereUniqueInput!]
  delete: [ResumeWhereUniqueInput!]
  connect: [ResumeWhereUniqueInput!]
  update: [ResumeUpdateWithWhereUniqueWithoutJobTitleInput!]
  updateMany: [ResumeUpdateManyWithWhereWithoutJobTitleInput!]
  deleteMany: [ResumeScalarWhereInput!]
}

input ResumeUpsertWithWhereUniqueWithoutJobTitleInput {
  where: ResumeWhereUniqueInput!
  update: ResumeUpdateWithoutJobTitleInput!
  create: ResumeCreateWithoutJobTitleInput!
}

input ResumeUpdateWithoutJobTitleInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  fullName: NullableStringFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  addressDetail: NullableStringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  isSummary: NullableBoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutResumesNestedInput
  avatar: FileUpdateOneWithoutResumeNestedInput
  address: CityUpdateOneWithoutResumesNestedInput
  language: LanguageUpdateOneWithoutResumesNestedInput
  applications: ApplicationUpdateManyWithoutResumeNestedInput
  workExperiences: WorkExperienceUpdateManyWithoutResumeNestedInput
  educations: EducationUpdateManyWithoutResumeNestedInput
  skills: SkillUpdateManyWithoutResumeNestedInput
  projects: ProjectUpdateManyWithoutResumeNestedInput
  socials: SocialUpdateManyWithoutResumeNestedInput
  languageSkills: LanguageSkillUpdateManyWithoutResumeNestedInput
  activities: ActivityUpdateManyWithoutResumeNestedInput
}

input FileUpdateOneWithoutResumeNestedInput {
  create: FileCreateWithoutResumeInput
  connectOrCreate: FileCreateOrConnectWithoutResumeInput
  upsert: FileUpsertWithoutResumeInput
  disconnect: FileWhereInput
  delete: FileWhereInput
  connect: FileWhereUniqueInput
  update: FileUpdateToOneWithWhereWithoutResumeInput
}

input FileUpsertWithoutResumeInput {
  update: FileUpdateWithoutResumeInput!
  create: FileCreateWithoutResumeInput!
  where: FileWhereInput
}

input FileUpdateWithoutResumeInput {
  id: StringFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
  storageId: StringFieldUpdateOperationsInput
  provider: NullableEnumFileProviderFieldUpdateOperationsInput
  metadata: JSON
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  resumeTemplateId: NullableStringFieldUpdateOperationsInput
  users: UserUpdateManyWithoutAvatarNestedInput
  companies: CompanyUpdateManyWithoutPhotosNestedInput
  projects: ProjectUpdateManyWithoutThumbnailNestedInput
  posts: PostUpdateManyWithoutThumbnailNestedInput
  company: CompanyUpdateManyWithoutAvatarNestedInput
  resumeTemplates: ResumeTemplateUpdateManyWithoutFileNestedInput
  certificate: CertificateUpdateOneWithoutFilesNestedInput
}

input ProjectUpdateManyWithoutThumbnailNestedInput {
  create: [ProjectCreateWithoutThumbnailInput!]
  connectOrCreate: [ProjectCreateOrConnectWithoutThumbnailInput!]
  upsert: [ProjectUpsertWithWhereUniqueWithoutThumbnailInput!]
  createMany: ProjectCreateManyThumbnailInputEnvelope
  set: [ProjectWhereUniqueInput!]
  disconnect: [ProjectWhereUniqueInput!]
  delete: [ProjectWhereUniqueInput!]
  connect: [ProjectWhereUniqueInput!]
  update: [ProjectUpdateWithWhereUniqueWithoutThumbnailInput!]
  updateMany: [ProjectUpdateManyWithWhereWithoutThumbnailInput!]
  deleteMany: [ProjectScalarWhereInput!]
}

input ProjectUpsertWithWhereUniqueWithoutThumbnailInput {
  where: ProjectWhereUniqueInput!
  update: ProjectUpdateWithoutThumbnailInput!
  create: ProjectCreateWithoutThumbnailInput!
}

input ProjectUpdateWithoutThumbnailInput {
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  teamSize: IntFieldUpdateOperationsInput
  role: ProjectUpdateroleInput
  startAt: DateTimeFieldUpdateOperationsInput
  endAt: NullableDateTimeFieldUpdateOperationsInput
  refeUrls: ProjectUpdaterefeUrlsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  techStacks: SkillUpdateManyWithoutProjectsNestedInput
  company: CompanyUpdateOneRequiredWithoutProjectsNestedInput
  user: UserUpdateOneRequiredWithoutProjectsNestedInput
  Resume: ResumeUpdateOneWithoutProjectsNestedInput
}

input ProjectUpdateroleInput {
  set: [String!]
  push: [String!]
}

input ProjectUpdaterefeUrlsInput {
  set: [String!]
  push: [String!]
}

input SkillUpdateManyWithoutProjectsNestedInput {
  create: [SkillCreateWithoutProjectsInput!]
  connectOrCreate: [SkillCreateOrConnectWithoutProjectsInput!]
  upsert: [SkillUpsertWithWhereUniqueWithoutProjectsInput!]
  set: [SkillWhereUniqueInput!]
  disconnect: [SkillWhereUniqueInput!]
  delete: [SkillWhereUniqueInput!]
  connect: [SkillWhereUniqueInput!]
  update: [SkillUpdateWithWhereUniqueWithoutProjectsInput!]
  updateMany: [SkillUpdateManyWithWhereWithoutProjectsInput!]
  deleteMany: [SkillScalarWhereInput!]
}

input SkillUpsertWithWhereUniqueWithoutProjectsInput {
  where: SkillWhereUniqueInput!
  update: SkillUpdateWithoutProjectsInput!
  create: SkillCreateWithoutProjectsInput!
}

input SkillUpdateWithoutProjectsInput {
  id: StringFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  resume: ResumeUpdateOneWithoutSkillsNestedInput
  jobs: JobUpdateManyWithoutSkillsNestedInput
}

input ResumeUpdateOneWithoutSkillsNestedInput {
  create: ResumeCreateWithoutSkillsInput
  connectOrCreate: ResumeCreateOrConnectWithoutSkillsInput
  upsert: ResumeUpsertWithoutSkillsInput
  disconnect: ResumeWhereInput
  delete: ResumeWhereInput
  connect: ResumeWhereUniqueInput
  update: ResumeUpdateToOneWithWhereWithoutSkillsInput
}

input ResumeUpsertWithoutSkillsInput {
  update: ResumeUpdateWithoutSkillsInput!
  create: ResumeCreateWithoutSkillsInput!
  where: ResumeWhereInput
}

input ResumeUpdateWithoutSkillsInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  fullName: NullableStringFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  addressDetail: NullableStringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  isSummary: NullableBoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutResumesNestedInput
  avatar: FileUpdateOneWithoutResumeNestedInput
  address: CityUpdateOneWithoutResumesNestedInput
  language: LanguageUpdateOneWithoutResumesNestedInput
  jobTitle: JobTitleUpdateOneRequiredWithoutResumesNestedInput
  applications: ApplicationUpdateManyWithoutResumeNestedInput
  workExperiences: WorkExperienceUpdateManyWithoutResumeNestedInput
  educations: EducationUpdateManyWithoutResumeNestedInput
  projects: ProjectUpdateManyWithoutResumeNestedInput
  socials: SocialUpdateManyWithoutResumeNestedInput
  languageSkills: LanguageSkillUpdateManyWithoutResumeNestedInput
  activities: ActivityUpdateManyWithoutResumeNestedInput
}

input CityUpdateOneWithoutResumesNestedInput {
  create: CityCreateWithoutResumesInput
  connectOrCreate: CityCreateOrConnectWithoutResumesInput
  upsert: CityUpsertWithoutResumesInput
  disconnect: CityWhereInput
  delete: CityWhereInput
  connect: CityWhereUniqueInput
  update: CityUpdateToOneWithWhereWithoutResumesInput
}

input CityUpsertWithoutResumesInput {
  update: CityUpdateWithoutResumesInput!
  create: CityCreateWithoutResumesInput!
  where: CityWhereInput
}

input CityUpdateWithoutResumesInput {
  name: StringFieldUpdateOperationsInput
  stateCode: NullableStringFieldUpdateOperationsInput
  stateName: NullableStringFieldUpdateOperationsInput
  countryCode: NullableStringFieldUpdateOperationsInput
  countryName: NullableStringFieldUpdateOperationsInput
  latitude: NullableStringFieldUpdateOperationsInput
  longitude: NullableStringFieldUpdateOperationsInput
  wikiDataId: StringFieldUpdateOperationsInput
  state: StateUpdateOneWithoutCitiesNestedInput
  country: CountryUpdateOneWithoutCitiesNestedInput
  users: UsersOnCityUpdateManyWithoutCityNestedInput
  companies: CompanyUpdateManyWithoutAddressNestedInput
  jobs: JobUpdateManyWithoutAddressNestedInput
  workExperiences: WorkExperienceUpdateManyWithoutAddressNestedInput
}

input CompanyUpdateManyWithoutAddressNestedInput {
  create: [CompanyCreateWithoutAddressInput!]
  connectOrCreate: [CompanyCreateOrConnectWithoutAddressInput!]
  upsert: [CompanyUpsertWithWhereUniqueWithoutAddressInput!]
  createMany: CompanyCreateManyAddressInputEnvelope
  set: [CompanyWhereUniqueInput!]
  disconnect: [CompanyWhereUniqueInput!]
  delete: [CompanyWhereUniqueInput!]
  connect: [CompanyWhereUniqueInput!]
  update: [CompanyUpdateWithWhereUniqueWithoutAddressInput!]
  updateMany: [CompanyUpdateManyWithWhereWithoutAddressInput!]
  deleteMany: [CompanyScalarWhereInput!]
}

input CompanyUpsertWithWhereUniqueWithoutAddressInput {
  where: CompanyWhereUniqueInput!
  update: CompanyUpdateWithoutAddressInput!
  create: CompanyCreateWithoutAddressInput!
}

input CompanyUpdateWithoutAddressInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  addressDetail: StringFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  avatar: FileUpdateOneWithoutCompanyNestedInput
  type: CompanyTypeUpdateOneWithoutCompaniesNestedInput
  size: CompanySizeUpdateOneWithoutCompaniesNestedInput
  photos: FileUpdateManyWithoutCompaniesNestedInput
  industries: JobCategoryUpdateManyWithoutCompaniesNestedInput
  social: SocialUpdateManyWithoutCompanyNestedInput
  jobs: JobUpdateManyWithoutCompanyNestedInput
  workExperiences: WorkExperienceUpdateManyWithoutCompanyNestedInput
  projects: ProjectUpdateManyWithoutCompanyNestedInput
  references: ReferenceUpdateManyWithoutCompanyNestedInput
  user: UserUpdateOneWithoutCompaniesNestedInput
}

input JobCategoryUpdateManyWithoutCompaniesNestedInput {
  create: [JobCategoryCreateWithoutCompaniesInput!]
  connectOrCreate: [JobCategoryCreateOrConnectWithoutCompaniesInput!]
  upsert: [JobCategoryUpsertWithWhereUniqueWithoutCompaniesInput!]
  set: [JobCategoryWhereUniqueInput!]
  disconnect: [JobCategoryWhereUniqueInput!]
  delete: [JobCategoryWhereUniqueInput!]
  connect: [JobCategoryWhereUniqueInput!]
  update: [JobCategoryUpdateWithWhereUniqueWithoutCompaniesInput!]
  updateMany: [JobCategoryUpdateManyWithWhereWithoutCompaniesInput!]
  deleteMany: [JobCategoryScalarWhereInput!]
}

input JobCategoryUpsertWithWhereUniqueWithoutCompaniesInput {
  where: JobCategoryWhereUniqueInput!
  update: JobCategoryUpdateWithoutCompaniesInput!
  create: JobCategoryCreateWithoutCompaniesInput!
}

input JobCategoryUpdateWithoutCompaniesInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  isFeature: NullableBoolFieldUpdateOperationsInput
  isTheFive: NullableBoolFieldUpdateOperationsInput
  isDefault: NullableBoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  jobs: JobUpdateManyWithoutJobCategoryNestedInput
  posts: PostUpdateManyWithoutJobCategoryNestedInput
}

input JobUpdateManyWithoutJobCategoryNestedInput {
  create: [JobCreateWithoutJobCategoryInput!]
  connectOrCreate: [JobCreateOrConnectWithoutJobCategoryInput!]
  upsert: [JobUpsertWithWhereUniqueWithoutJobCategoryInput!]
  createMany: JobCreateManyJobCategoryInputEnvelope
  set: [JobWhereUniqueInput!]
  disconnect: [JobWhereUniqueInput!]
  delete: [JobWhereUniqueInput!]
  connect: [JobWhereUniqueInput!]
  update: [JobUpdateWithWhereUniqueWithoutJobCategoryInput!]
  updateMany: [JobUpdateManyWithWhereWithoutJobCategoryInput!]
  deleteMany: [JobScalarWhereInput!]
}

input JobUpsertWithWhereUniqueWithoutJobCategoryInput {
  where: JobWhereUniqueInput!
  update: JobUpdateWithoutJobCategoryInput!
  create: JobCreateWithoutJobCategoryInput!
}

input JobUpdateWithoutJobCategoryInput {
  id: StringFieldUpdateOperationsInput
  type: EnumJobTypeFieldUpdateOperationsInput
  level: EnumJobLevelFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  addressDetail: NullableStringFieldUpdateOperationsInput
  salary: EnumJobSalaryFieldUpdateOperationsInput
  salaryMetadata: JSON
  description: StringFieldUpdateOperationsInput
  isBoot: NullableBoolFieldUpdateOperationsInput
  numberOfRecruits: IntFieldUpdateOperationsInput
  applicationDeadline: DateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  address: CityUpdateOneRequiredWithoutJobsNestedInput
  jobTitle: JobTitleUpdateOneRequiredWithoutJobsNestedInput
  company: CompanyUpdateOneRequiredWithoutJobsNestedInput
  tags: TagUpdateManyWithoutJobsNestedInput
  skills: SkillUpdateManyWithoutJobsNestedInput
  applications: ApplicationUpdateManyWithoutJobNestedInput
  saveJobs: SaveJobUpdateManyWithoutJobNestedInput
}

input CompanyUpdateOneRequiredWithoutJobsNestedInput {
  create: CompanyCreateWithoutJobsInput
  connectOrCreate: CompanyCreateOrConnectWithoutJobsInput
  upsert: CompanyUpsertWithoutJobsInput
  connect: CompanyWhereUniqueInput
  update: CompanyUpdateToOneWithWhereWithoutJobsInput
}

input CompanyUpsertWithoutJobsInput {
  update: CompanyUpdateWithoutJobsInput!
  create: CompanyCreateWithoutJobsInput!
  where: CompanyWhereInput
}

input CompanyUpdateWithoutJobsInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  addressDetail: StringFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  avatar: FileUpdateOneWithoutCompanyNestedInput
  type: CompanyTypeUpdateOneWithoutCompaniesNestedInput
  size: CompanySizeUpdateOneWithoutCompaniesNestedInput
  photos: FileUpdateManyWithoutCompaniesNestedInput
  address: CityUpdateOneRequiredWithoutCompaniesNestedInput
  industries: JobCategoryUpdateManyWithoutCompaniesNestedInput
  social: SocialUpdateManyWithoutCompanyNestedInput
  workExperiences: WorkExperienceUpdateManyWithoutCompanyNestedInput
  projects: ProjectUpdateManyWithoutCompanyNestedInput
  references: ReferenceUpdateManyWithoutCompanyNestedInput
  user: UserUpdateOneWithoutCompaniesNestedInput
}

input SocialUpdateManyWithoutCompanyNestedInput {
  create: [SocialCreateWithoutCompanyInput!]
  connectOrCreate: [SocialCreateOrConnectWithoutCompanyInput!]
  upsert: [SocialUpsertWithWhereUniqueWithoutCompanyInput!]
  createMany: SocialCreateManyCompanyInputEnvelope
  set: [SocialWhereUniqueInput!]
  disconnect: [SocialWhereUniqueInput!]
  delete: [SocialWhereUniqueInput!]
  connect: [SocialWhereUniqueInput!]
  update: [SocialUpdateWithWhereUniqueWithoutCompanyInput!]
  updateMany: [SocialUpdateManyWithWhereWithoutCompanyInput!]
  deleteMany: [SocialScalarWhereInput!]
}

input SocialUpsertWithWhereUniqueWithoutCompanyInput {
  where: SocialWhereUniqueInput!
  update: SocialUpdateWithoutCompanyInput!
  create: SocialCreateWithoutCompanyInput!
}

input SocialUpdateWithoutCompanyInput {
  id: StringFieldUpdateOperationsInput
  type: NullableEnumSocialTypeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  user: UserUpdateOneWithoutSocialNestedInput
  resume: ResumeUpdateOneWithoutSocialsNestedInput
}

input UserUpdateOneWithoutSocialNestedInput {
  create: UserCreateWithoutSocialInput
  connectOrCreate: UserCreateOrConnectWithoutSocialInput
  upsert: UserUpsertWithoutSocialInput
  disconnect: UserWhereInput
  delete: UserWhereInput
  connect: UserWhereUniqueInput
  update: UserUpdateToOneWithWhereWithoutSocialInput
}

input UserUpsertWithoutSocialInput {
  update: UserUpdateWithoutSocialInput!
  create: UserCreateWithoutSocialInput!
  where: UserWhereInput
}

input UserUpdateWithoutSocialInput {
  id: StringFieldUpdateOperationsInput
  avatarUrl: NullableStringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  emailVerified: BoolFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  phoneNumber: NullableStringFieldUpdateOperationsInput
  workingPosition: NullableEnumWorkPositionFieldUpdateOperationsInput
  status: EnumUserStatusFieldUpdateOperationsInput
  signInProvider: NullableEnumSignInProviderFieldUpdateOperationsInput
  color: NullableStringFieldUpdateOperationsInput
  role: EnumUserRoleFieldUpdateOperationsInput
  addressDetail: NullableStringFieldUpdateOperationsInput
  verifyCode: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  avatar: FileUpdateOneWithoutUsersNestedInput
  country: CountryUpdateOneWithoutUsersNestedInput
  resumes: ResumeUpdateManyWithoutUserNestedInput
  workExperiences: WorkExperienceUpdateManyWithoutUserNestedInput
  educations: EducationUpdateManyWithoutUserNestedInput
  projects: ProjectUpdateManyWithoutUserNestedInput
  applications: ApplicationUpdateManyWithoutCandidateNestedInput
  posts: PostUpdateManyWithoutAuthorNestedInput
  likes: LikePostUpdateManyWithoutUserNestedInput
  dislikes: DislikePostUpdateManyWithoutUserNestedInput
  comments: CommentUpdateManyWithoutUserNestedInput
  bookmarks: BookmarkPostUpdateManyWithoutUserNestedInput
  saveJobs: SaveJobUpdateManyWithoutUserNestedInput
  payments: PaymentUpdateManyWithoutUserNestedInput
  address: UsersOnCityUpdateManyWithoutUserNestedInput
  companies: CompanyUpdateManyWithoutUserNestedInput
  authorSettings: SettingUpdateManyWithoutAuthorNestedInput
  updatedBySettings: SettingUpdateManyWithoutUpdatedByNestedInput
}

input ResumeUpdateManyWithoutUserNestedInput {
  create: [ResumeCreateWithoutUserInput!]
  connectOrCreate: [ResumeCreateOrConnectWithoutUserInput!]
  upsert: [ResumeUpsertWithWhereUniqueWithoutUserInput!]
  createMany: ResumeCreateManyUserInputEnvelope
  set: [ResumeWhereUniqueInput!]
  disconnect: [ResumeWhereUniqueInput!]
  delete: [ResumeWhereUniqueInput!]
  connect: [ResumeWhereUniqueInput!]
  update: [ResumeUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [ResumeUpdateManyWithWhereWithoutUserInput!]
  deleteMany: [ResumeScalarWhereInput!]
}

input ResumeUpsertWithWhereUniqueWithoutUserInput {
  where: ResumeWhereUniqueInput!
  update: ResumeUpdateWithoutUserInput!
  create: ResumeCreateWithoutUserInput!
}

input ResumeUpdateWithoutUserInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  fullName: NullableStringFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  addressDetail: NullableStringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  isSummary: NullableBoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  avatar: FileUpdateOneWithoutResumeNestedInput
  address: CityUpdateOneWithoutResumesNestedInput
  language: LanguageUpdateOneWithoutResumesNestedInput
  jobTitle: JobTitleUpdateOneRequiredWithoutResumesNestedInput
  applications: ApplicationUpdateManyWithoutResumeNestedInput
  workExperiences: WorkExperienceUpdateManyWithoutResumeNestedInput
  educations: EducationUpdateManyWithoutResumeNestedInput
  skills: SkillUpdateManyWithoutResumeNestedInput
  projects: ProjectUpdateManyWithoutResumeNestedInput
  socials: SocialUpdateManyWithoutResumeNestedInput
  languageSkills: LanguageSkillUpdateManyWithoutResumeNestedInput
  activities: ActivityUpdateManyWithoutResumeNestedInput
}

input LanguageUpdateOneWithoutResumesNestedInput {
  create: LanguageCreateWithoutResumesInput
  connectOrCreate: LanguageCreateOrConnectWithoutResumesInput
  upsert: LanguageUpsertWithoutResumesInput
  disconnect: LanguageWhereInput
  delete: LanguageWhereInput
  connect: LanguageWhereUniqueInput
  update: LanguageUpdateToOneWithWhereWithoutResumesInput
}

input LanguageUpsertWithoutResumesInput {
  update: LanguageUpdateWithoutResumesInput!
  create: LanguageCreateWithoutResumesInput!
  where: LanguageWhereInput
}

input LanguageUpdateWithoutResumesInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  locale: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  languageSkill: LanguageSkillUpdateManyWithoutLanguageNestedInput
}

input LanguageSkillUpdateManyWithoutLanguageNestedInput {
  create: [LanguageSkillCreateWithoutLanguageInput!]
  connectOrCreate: [LanguageSkillCreateOrConnectWithoutLanguageInput!]
  upsert: [LanguageSkillUpsertWithWhereUniqueWithoutLanguageInput!]
  createMany: LanguageSkillCreateManyLanguageInputEnvelope
  set: [LanguageSkillWhereUniqueInput!]
  disconnect: [LanguageSkillWhereUniqueInput!]
  delete: [LanguageSkillWhereUniqueInput!]
  connect: [LanguageSkillWhereUniqueInput!]
  update: [LanguageSkillUpdateWithWhereUniqueWithoutLanguageInput!]
  updateMany: [LanguageSkillUpdateManyWithWhereWithoutLanguageInput!]
  deleteMany: [LanguageSkillScalarWhereInput!]
}

input LanguageSkillUpsertWithWhereUniqueWithoutLanguageInput {
  where: LanguageSkillWhereUniqueInput!
  update: LanguageSkillUpdateWithoutLanguageInput!
  create: LanguageSkillCreateWithoutLanguageInput!
}

input LanguageSkillUpdateWithoutLanguageInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  locale: StringFieldUpdateOperationsInput
  proficiencyLevel: EnumProficiencyLevelFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  resume: ResumeUpdateOneWithoutLanguageSkillsNestedInput
}

input EnumProficiencyLevelFieldUpdateOperationsInput {
  set: ProficiencyLevel
}

input ResumeUpdateOneWithoutLanguageSkillsNestedInput {
  create: ResumeCreateWithoutLanguageSkillsInput
  connectOrCreate: ResumeCreateOrConnectWithoutLanguageSkillsInput
  upsert: ResumeUpsertWithoutLanguageSkillsInput
  disconnect: ResumeWhereInput
  delete: ResumeWhereInput
  connect: ResumeWhereUniqueInput
  update: ResumeUpdateToOneWithWhereWithoutLanguageSkillsInput
}

input ResumeUpsertWithoutLanguageSkillsInput {
  update: ResumeUpdateWithoutLanguageSkillsInput!
  create: ResumeCreateWithoutLanguageSkillsInput!
  where: ResumeWhereInput
}

input ResumeUpdateWithoutLanguageSkillsInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  fullName: NullableStringFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  addressDetail: NullableStringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  isSummary: NullableBoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutResumesNestedInput
  avatar: FileUpdateOneWithoutResumeNestedInput
  address: CityUpdateOneWithoutResumesNestedInput
  language: LanguageUpdateOneWithoutResumesNestedInput
  jobTitle: JobTitleUpdateOneRequiredWithoutResumesNestedInput
  applications: ApplicationUpdateManyWithoutResumeNestedInput
  workExperiences: WorkExperienceUpdateManyWithoutResumeNestedInput
  educations: EducationUpdateManyWithoutResumeNestedInput
  skills: SkillUpdateManyWithoutResumeNestedInput
  projects: ProjectUpdateManyWithoutResumeNestedInput
  socials: SocialUpdateManyWithoutResumeNestedInput
  activities: ActivityUpdateManyWithoutResumeNestedInput
}

input JobTitleUpdateOneRequiredWithoutResumesNestedInput {
  create: JobTitleCreateWithoutResumesInput
  connectOrCreate: JobTitleCreateOrConnectWithoutResumesInput
  upsert: JobTitleUpsertWithoutResumesInput
  connect: JobTitleWhereUniqueInput
  update: JobTitleUpdateToOneWithWhereWithoutResumesInput
}

input JobTitleUpsertWithoutResumesInput {
  update: JobTitleUpdateWithoutResumesInput!
  create: JobTitleCreateWithoutResumesInput!
  where: JobTitleWhereInput
}

input JobTitleUpdateWithoutResumesInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  isFeature: NullableBoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  jobs: JobUpdateManyWithoutJobTitleNestedInput
  workExperiences: WorkExperienceUpdateManyWithoutJobTitleNestedInput
}

input WorkExperienceUpdateManyWithoutJobTitleNestedInput {
  create: [WorkExperienceCreateWithoutJobTitleInput!]
  connectOrCreate: [WorkExperienceCreateOrConnectWithoutJobTitleInput!]
  upsert: [WorkExperienceUpsertWithWhereUniqueWithoutJobTitleInput!]
  createMany: WorkExperienceCreateManyJobTitleInputEnvelope
  set: [WorkExperienceWhereUniqueInput!]
  disconnect: [WorkExperienceWhereUniqueInput!]
  delete: [WorkExperienceWhereUniqueInput!]
  connect: [WorkExperienceWhereUniqueInput!]
  update: [WorkExperienceUpdateWithWhereUniqueWithoutJobTitleInput!]
  updateMany: [WorkExperienceUpdateManyWithWhereWithoutJobTitleInput!]
  deleteMany: [WorkExperienceScalarWhereInput!]
}

input WorkExperienceUpsertWithWhereUniqueWithoutJobTitleInput {
  where: WorkExperienceWhereUniqueInput!
  update: WorkExperienceUpdateWithoutJobTitleInput!
  create: WorkExperienceCreateWithoutJobTitleInput!
}

input WorkExperienceUpdateWithoutJobTitleInput {
  id: StringFieldUpdateOperationsInput
  isFreelancer: NullableBoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  startAt: DateTimeFieldUpdateOperationsInput
  endAt: NullableDateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutWorkExperiencesNestedInput
  company: CompanyUpdateOneWithoutWorkExperiencesNestedInput
  resume: ResumeUpdateOneWithoutWorkExperiencesNestedInput
  address: CityUpdateOneWithoutWorkExperiencesNestedInput
}

input UserUpdateOneRequiredWithoutWorkExperiencesNestedInput {
  create: UserCreateWithoutWorkExperiencesInput
  connectOrCreate: UserCreateOrConnectWithoutWorkExperiencesInput
  upsert: UserUpsertWithoutWorkExperiencesInput
  connect: UserWhereUniqueInput
  update: UserUpdateToOneWithWhereWithoutWorkExperiencesInput
}

input UserUpsertWithoutWorkExperiencesInput {
  update: UserUpdateWithoutWorkExperiencesInput!
  create: UserCreateWithoutWorkExperiencesInput!
  where: UserWhereInput
}

input UserUpdateWithoutWorkExperiencesInput {
  id: StringFieldUpdateOperationsInput
  avatarUrl: NullableStringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  emailVerified: BoolFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  phoneNumber: NullableStringFieldUpdateOperationsInput
  workingPosition: NullableEnumWorkPositionFieldUpdateOperationsInput
  status: EnumUserStatusFieldUpdateOperationsInput
  signInProvider: NullableEnumSignInProviderFieldUpdateOperationsInput
  color: NullableStringFieldUpdateOperationsInput
  role: EnumUserRoleFieldUpdateOperationsInput
  addressDetail: NullableStringFieldUpdateOperationsInput
  verifyCode: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  avatar: FileUpdateOneWithoutUsersNestedInput
  country: CountryUpdateOneWithoutUsersNestedInput
  social: SocialUpdateManyWithoutUserNestedInput
  resumes: ResumeUpdateManyWithoutUserNestedInput
  educations: EducationUpdateManyWithoutUserNestedInput
  projects: ProjectUpdateManyWithoutUserNestedInput
  applications: ApplicationUpdateManyWithoutCandidateNestedInput
  posts: PostUpdateManyWithoutAuthorNestedInput
  likes: LikePostUpdateManyWithoutUserNestedInput
  dislikes: DislikePostUpdateManyWithoutUserNestedInput
  comments: CommentUpdateManyWithoutUserNestedInput
  bookmarks: BookmarkPostUpdateManyWithoutUserNestedInput
  saveJobs: SaveJobUpdateManyWithoutUserNestedInput
  payments: PaymentUpdateManyWithoutUserNestedInput
  address: UsersOnCityUpdateManyWithoutUserNestedInput
  companies: CompanyUpdateManyWithoutUserNestedInput
  authorSettings: SettingUpdateManyWithoutAuthorNestedInput
  updatedBySettings: SettingUpdateManyWithoutUpdatedByNestedInput
}

input EducationUpdateManyWithoutUserNestedInput {
  create: [EducationCreateWithoutUserInput!]
  connectOrCreate: [EducationCreateOrConnectWithoutUserInput!]
  upsert: [EducationUpsertWithWhereUniqueWithoutUserInput!]
  createMany: EducationCreateManyUserInputEnvelope
  set: [EducationWhereUniqueInput!]
  disconnect: [EducationWhereUniqueInput!]
  delete: [EducationWhereUniqueInput!]
  connect: [EducationWhereUniqueInput!]
  update: [EducationUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [EducationUpdateManyWithWhereWithoutUserInput!]
  deleteMany: [EducationScalarWhereInput!]
}

input EducationUpsertWithWhereUniqueWithoutUserInput {
  where: EducationWhereUniqueInput!
  update: EducationUpdateWithoutUserInput!
  create: EducationCreateWithoutUserInput!
}

input EducationUpdateWithoutUserInput {
  id: StringFieldUpdateOperationsInput
  type: EnumEducationTypeFieldUpdateOperationsInput
  major: StringFieldUpdateOperationsInput
  degree: EnumDegreeFieldUpdateOperationsInput
  graduationAt: NullableDateTimeFieldUpdateOperationsInput
  gpa: NullableIntFieldUpdateOperationsInput
  awards: EducationUpdateawardsInput
  relevantCourseworks: EducationUpdaterelevantCourseworksInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  resume: ResumeUpdateOneWithoutEducationsNestedInput
}

input EnumEducationTypeFieldUpdateOperationsInput {
  set: EducationType
}

input EnumDegreeFieldUpdateOperationsInput {
  set: Degree
}

input NullableIntFieldUpdateOperationsInput {
  set: Int
  increment: Int
  decrement: Int
  multiply: Int
  divide: Int
}

input EducationUpdateawardsInput {
  set: [String!]
  push: [String!]
}

input EducationUpdaterelevantCourseworksInput {
  set: [String!]
  push: [String!]
}

input ResumeUpdateOneWithoutEducationsNestedInput {
  create: ResumeCreateWithoutEducationsInput
  connectOrCreate: ResumeCreateOrConnectWithoutEducationsInput
  upsert: ResumeUpsertWithoutEducationsInput
  disconnect: ResumeWhereInput
  delete: ResumeWhereInput
  connect: ResumeWhereUniqueInput
  update: ResumeUpdateToOneWithWhereWithoutEducationsInput
}

input ResumeUpsertWithoutEducationsInput {
  update: ResumeUpdateWithoutEducationsInput!
  create: ResumeCreateWithoutEducationsInput!
  where: ResumeWhereInput
}

input ResumeUpdateWithoutEducationsInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  fullName: NullableStringFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  addressDetail: NullableStringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  isSummary: NullableBoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutResumesNestedInput
  avatar: FileUpdateOneWithoutResumeNestedInput
  address: CityUpdateOneWithoutResumesNestedInput
  language: LanguageUpdateOneWithoutResumesNestedInput
  jobTitle: JobTitleUpdateOneRequiredWithoutResumesNestedInput
  applications: ApplicationUpdateManyWithoutResumeNestedInput
  workExperiences: WorkExperienceUpdateManyWithoutResumeNestedInput
  skills: SkillUpdateManyWithoutResumeNestedInput
  projects: ProjectUpdateManyWithoutResumeNestedInput
  socials: SocialUpdateManyWithoutResumeNestedInput
  languageSkills: LanguageSkillUpdateManyWithoutResumeNestedInput
  activities: ActivityUpdateManyWithoutResumeNestedInput
}

input ApplicationUpdateManyWithoutResumeNestedInput {
  create: [ApplicationCreateWithoutResumeInput!]
  connectOrCreate: [ApplicationCreateOrConnectWithoutResumeInput!]
  upsert: [ApplicationUpsertWithWhereUniqueWithoutResumeInput!]
  createMany: ApplicationCreateManyResumeInputEnvelope
  set: [ApplicationWhereUniqueInput!]
  disconnect: [ApplicationWhereUniqueInput!]
  delete: [ApplicationWhereUniqueInput!]
  connect: [ApplicationWhereUniqueInput!]
  update: [ApplicationUpdateWithWhereUniqueWithoutResumeInput!]
  updateMany: [ApplicationUpdateManyWithWhereWithoutResumeInput!]
  deleteMany: [ApplicationScalarWhereInput!]
}

input ApplicationUpsertWithWhereUniqueWithoutResumeInput {
  where: ApplicationWhereUniqueInput!
  update: ApplicationUpdateWithoutResumeInput!
  create: ApplicationCreateWithoutResumeInput!
}

input ApplicationUpdateWithoutResumeInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  status: NullableEnumApplicationStatusFieldUpdateOperationsInput
  type: EnumApplicationTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  job: JobUpdateOneRequiredWithoutApplicationsNestedInput
  candidate: UserUpdateOneRequiredWithoutApplicationsNestedInput
}

input NullableEnumApplicationStatusFieldUpdateOperationsInput {
  set: ApplicationStatus
}

input EnumApplicationTypeFieldUpdateOperationsInput {
  set: ApplicationType
}

input JobUpdateOneRequiredWithoutApplicationsNestedInput {
  create: JobCreateWithoutApplicationsInput
  connectOrCreate: JobCreateOrConnectWithoutApplicationsInput
  upsert: JobUpsertWithoutApplicationsInput
  connect: JobWhereUniqueInput
  update: JobUpdateToOneWithWhereWithoutApplicationsInput
}

input JobUpsertWithoutApplicationsInput {
  update: JobUpdateWithoutApplicationsInput!
  create: JobCreateWithoutApplicationsInput!
  where: JobWhereInput
}

input JobUpdateWithoutApplicationsInput {
  id: StringFieldUpdateOperationsInput
  type: EnumJobTypeFieldUpdateOperationsInput
  level: EnumJobLevelFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  addressDetail: NullableStringFieldUpdateOperationsInput
  salary: EnumJobSalaryFieldUpdateOperationsInput
  salaryMetadata: JSON
  description: StringFieldUpdateOperationsInput
  isBoot: NullableBoolFieldUpdateOperationsInput
  numberOfRecruits: IntFieldUpdateOperationsInput
  applicationDeadline: DateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  address: CityUpdateOneRequiredWithoutJobsNestedInput
  jobTitle: JobTitleUpdateOneRequiredWithoutJobsNestedInput
  jobCategory: JobCategoryUpdateOneRequiredWithoutJobsNestedInput
  company: CompanyUpdateOneRequiredWithoutJobsNestedInput
  tags: TagUpdateManyWithoutJobsNestedInput
  skills: SkillUpdateManyWithoutJobsNestedInput
  saveJobs: SaveJobUpdateManyWithoutJobNestedInput
}

input TagUpdateManyWithoutJobsNestedInput {
  create: [TagCreateWithoutJobsInput!]
  connectOrCreate: [TagCreateOrConnectWithoutJobsInput!]
  upsert: [TagUpsertWithWhereUniqueWithoutJobsInput!]
  set: [TagWhereUniqueInput!]
  disconnect: [TagWhereUniqueInput!]
  delete: [TagWhereUniqueInput!]
  connect: [TagWhereUniqueInput!]
  update: [TagUpdateWithWhereUniqueWithoutJobsInput!]
  updateMany: [TagUpdateManyWithWhereWithoutJobsInput!]
  deleteMany: [TagScalarWhereInput!]
}

input TagUpsertWithWhereUniqueWithoutJobsInput {
  where: TagWhereUniqueInput!
  update: TagUpdateWithoutJobsInput!
  create: TagCreateWithoutJobsInput!
}

input TagUpdateWithoutJobsInput {
  id: StringFieldUpdateOperationsInput
  type: NullableEnumTagTypeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  color: NullableStringFieldUpdateOperationsInput
  isPostDefault: NullableBoolFieldUpdateOperationsInput
  isJobDefault: NullableBoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutTagsNestedInput
}

input PostUpdateManyWithoutTagsNestedInput {
  create: [PostCreateWithoutTagsInput!]
  connectOrCreate: [PostCreateOrConnectWithoutTagsInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutTagsInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  delete: [PostWhereUniqueInput!]
  connect: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutTagsInput!]
  updateMany: [PostUpdateManyWithWhereWithoutTagsInput!]
  deleteMany: [PostScalarWhereInput!]
}

input PostUpsertWithWhereUniqueWithoutTagsInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutTagsInput!
  create: PostCreateWithoutTagsInput!
}

input PostUpdateWithoutTagsInput {
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  shareUrl: StringFieldUpdateOperationsInput
  metadata: JSON
  slug: StringFieldUpdateOperationsInput
  minRead: NullableIntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  jobCategory: JobCategoryUpdateOneWithoutPostsNestedInput
  author: UserUpdateOneRequiredWithoutPostsNestedInput
  thumbnail: FileUpdateOneWithoutPostsNestedInput
  categories: PostCategoryUpdateManyWithoutPostsNestedInput
  likes: LikePostUpdateManyWithoutPostNestedInput
  dislikes: DislikePostUpdateManyWithoutPostNestedInput
  comments: CommentUpdateManyWithoutPostNestedInput
  bookmarks: BookmarkPostUpdateManyWithoutPostNestedInput
}

input JobCategoryUpdateOneWithoutPostsNestedInput {
  create: JobCategoryCreateWithoutPostsInput
  connectOrCreate: JobCategoryCreateOrConnectWithoutPostsInput
  upsert: JobCategoryUpsertWithoutPostsInput
  disconnect: JobCategoryWhereInput
  delete: JobCategoryWhereInput
  connect: JobCategoryWhereUniqueInput
  update: JobCategoryUpdateToOneWithWhereWithoutPostsInput
}

input JobCategoryUpsertWithoutPostsInput {
  update: JobCategoryUpdateWithoutPostsInput!
  create: JobCategoryCreateWithoutPostsInput!
  where: JobCategoryWhereInput
}

input JobCategoryUpdateWithoutPostsInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  isFeature: NullableBoolFieldUpdateOperationsInput
  isTheFive: NullableBoolFieldUpdateOperationsInput
  isDefault: NullableBoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  jobs: JobUpdateManyWithoutJobCategoryNestedInput
  companies: CompanyUpdateManyWithoutIndustriesNestedInput
}

input JobCategoryUpdateToOneWithWhereWithoutPostsInput {
  where: JobCategoryWhereInput
  data: JobCategoryUpdateWithoutPostsInput!
}

input UserUpdateOneRequiredWithoutPostsNestedInput {
  create: UserCreateWithoutPostsInput
  connectOrCreate: UserCreateOrConnectWithoutPostsInput
  upsert: UserUpsertWithoutPostsInput
  connect: UserWhereUniqueInput
  update: UserUpdateToOneWithWhereWithoutPostsInput
}

input UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsInput!
  create: UserCreateWithoutPostsInput!
  where: UserWhereInput
}

input UserUpdateWithoutPostsInput {
  id: StringFieldUpdateOperationsInput
  avatarUrl: NullableStringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  emailVerified: BoolFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  phoneNumber: NullableStringFieldUpdateOperationsInput
  workingPosition: NullableEnumWorkPositionFieldUpdateOperationsInput
  status: EnumUserStatusFieldUpdateOperationsInput
  signInProvider: NullableEnumSignInProviderFieldUpdateOperationsInput
  color: NullableStringFieldUpdateOperationsInput
  role: EnumUserRoleFieldUpdateOperationsInput
  addressDetail: NullableStringFieldUpdateOperationsInput
  verifyCode: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  avatar: FileUpdateOneWithoutUsersNestedInput
  country: CountryUpdateOneWithoutUsersNestedInput
  social: SocialUpdateManyWithoutUserNestedInput
  resumes: ResumeUpdateManyWithoutUserNestedInput
  workExperiences: WorkExperienceUpdateManyWithoutUserNestedInput
  educations: EducationUpdateManyWithoutUserNestedInput
  projects: ProjectUpdateManyWithoutUserNestedInput
  applications: ApplicationUpdateManyWithoutCandidateNestedInput
  likes: LikePostUpdateManyWithoutUserNestedInput
  dislikes: DislikePostUpdateManyWithoutUserNestedInput
  comments: CommentUpdateManyWithoutUserNestedInput
  bookmarks: BookmarkPostUpdateManyWithoutUserNestedInput
  saveJobs: SaveJobUpdateManyWithoutUserNestedInput
  payments: PaymentUpdateManyWithoutUserNestedInput
  address: UsersOnCityUpdateManyWithoutUserNestedInput
  companies: CompanyUpdateManyWithoutUserNestedInput
  authorSettings: SettingUpdateManyWithoutAuthorNestedInput
  updatedBySettings: SettingUpdateManyWithoutUpdatedByNestedInput
}

input ProjectUpdateManyWithoutUserNestedInput {
  create: [ProjectCreateWithoutUserInput!]
  connectOrCreate: [ProjectCreateOrConnectWithoutUserInput!]
  upsert: [ProjectUpsertWithWhereUniqueWithoutUserInput!]
  createMany: ProjectCreateManyUserInputEnvelope
  set: [ProjectWhereUniqueInput!]
  disconnect: [ProjectWhereUniqueInput!]
  delete: [ProjectWhereUniqueInput!]
  connect: [ProjectWhereUniqueInput!]
  update: [ProjectUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [ProjectUpdateManyWithWhereWithoutUserInput!]
  deleteMany: [ProjectScalarWhereInput!]
}

input ProjectUpsertWithWhereUniqueWithoutUserInput {
  where: ProjectWhereUniqueInput!
  update: ProjectUpdateWithoutUserInput!
  create: ProjectCreateWithoutUserInput!
}

input ProjectUpdateWithoutUserInput {
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  teamSize: IntFieldUpdateOperationsInput
  role: ProjectUpdateroleInput
  startAt: DateTimeFieldUpdateOperationsInput
  endAt: NullableDateTimeFieldUpdateOperationsInput
  refeUrls: ProjectUpdaterefeUrlsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  techStacks: SkillUpdateManyWithoutProjectsNestedInput
  company: CompanyUpdateOneRequiredWithoutProjectsNestedInput
  thumbnail: FileUpdateOneWithoutProjectsNestedInput
  Resume: ResumeUpdateOneWithoutProjectsNestedInput
}

input CompanyUpdateOneRequiredWithoutProjectsNestedInput {
  create: CompanyCreateWithoutProjectsInput
  connectOrCreate: CompanyCreateOrConnectWithoutProjectsInput
  upsert: CompanyUpsertWithoutProjectsInput
  connect: CompanyWhereUniqueInput
  update: CompanyUpdateToOneWithWhereWithoutProjectsInput
}

input CompanyUpsertWithoutProjectsInput {
  update: CompanyUpdateWithoutProjectsInput!
  create: CompanyCreateWithoutProjectsInput!
  where: CompanyWhereInput
}

input CompanyUpdateWithoutProjectsInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  addressDetail: StringFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  avatar: FileUpdateOneWithoutCompanyNestedInput
  type: CompanyTypeUpdateOneWithoutCompaniesNestedInput
  size: CompanySizeUpdateOneWithoutCompaniesNestedInput
  photos: FileUpdateManyWithoutCompaniesNestedInput
  address: CityUpdateOneRequiredWithoutCompaniesNestedInput
  industries: JobCategoryUpdateManyWithoutCompaniesNestedInput
  social: SocialUpdateManyWithoutCompanyNestedInput
  jobs: JobUpdateManyWithoutCompanyNestedInput
  workExperiences: WorkExperienceUpdateManyWithoutCompanyNestedInput
  references: ReferenceUpdateManyWithoutCompanyNestedInput
  user: UserUpdateOneWithoutCompaniesNestedInput
}

input JobUpdateManyWithoutCompanyNestedInput {
  create: [JobCreateWithoutCompanyInput!]
  connectOrCreate: [JobCreateOrConnectWithoutCompanyInput!]
  upsert: [JobUpsertWithWhereUniqueWithoutCompanyInput!]
  createMany: JobCreateManyCompanyInputEnvelope
  set: [JobWhereUniqueInput!]
  disconnect: [JobWhereUniqueInput!]
  delete: [JobWhereUniqueInput!]
  connect: [JobWhereUniqueInput!]
  update: [JobUpdateWithWhereUniqueWithoutCompanyInput!]
  updateMany: [JobUpdateManyWithWhereWithoutCompanyInput!]
  deleteMany: [JobScalarWhereInput!]
}

input JobUpsertWithWhereUniqueWithoutCompanyInput {
  where: JobWhereUniqueInput!
  update: JobUpdateWithoutCompanyInput!
  create: JobCreateWithoutCompanyInput!
}

input JobUpdateWithoutCompanyInput {
  id: StringFieldUpdateOperationsInput
  type: EnumJobTypeFieldUpdateOperationsInput
  level: EnumJobLevelFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  addressDetail: NullableStringFieldUpdateOperationsInput
  salary: EnumJobSalaryFieldUpdateOperationsInput
  salaryMetadata: JSON
  description: StringFieldUpdateOperationsInput
  isBoot: NullableBoolFieldUpdateOperationsInput
  numberOfRecruits: IntFieldUpdateOperationsInput
  applicationDeadline: DateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  address: CityUpdateOneRequiredWithoutJobsNestedInput
  jobTitle: JobTitleUpdateOneRequiredWithoutJobsNestedInput
  jobCategory: JobCategoryUpdateOneRequiredWithoutJobsNestedInput
  tags: TagUpdateManyWithoutJobsNestedInput
  skills: SkillUpdateManyWithoutJobsNestedInput
  applications: ApplicationUpdateManyWithoutJobNestedInput
  saveJobs: SaveJobUpdateManyWithoutJobNestedInput
}

input SkillUpdateManyWithoutJobsNestedInput {
  create: [SkillCreateWithoutJobsInput!]
  connectOrCreate: [SkillCreateOrConnectWithoutJobsInput!]
  upsert: [SkillUpsertWithWhereUniqueWithoutJobsInput!]
  set: [SkillWhereUniqueInput!]
  disconnect: [SkillWhereUniqueInput!]
  delete: [SkillWhereUniqueInput!]
  connect: [SkillWhereUniqueInput!]
  update: [SkillUpdateWithWhereUniqueWithoutJobsInput!]
  updateMany: [SkillUpdateManyWithWhereWithoutJobsInput!]
  deleteMany: [SkillScalarWhereInput!]
}

input SkillUpsertWithWhereUniqueWithoutJobsInput {
  where: SkillWhereUniqueInput!
  update: SkillUpdateWithoutJobsInput!
  create: SkillCreateWithoutJobsInput!
}

input SkillUpdateWithoutJobsInput {
  id: StringFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  resume: ResumeUpdateOneWithoutSkillsNestedInput
  projects: ProjectUpdateManyWithoutTechStacksNestedInput
}

input ProjectUpdateManyWithoutTechStacksNestedInput {
  create: [ProjectCreateWithoutTechStacksInput!]
  connectOrCreate: [ProjectCreateOrConnectWithoutTechStacksInput!]
  upsert: [ProjectUpsertWithWhereUniqueWithoutTechStacksInput!]
  set: [ProjectWhereUniqueInput!]
  disconnect: [ProjectWhereUniqueInput!]
  delete: [ProjectWhereUniqueInput!]
  connect: [ProjectWhereUniqueInput!]
  update: [ProjectUpdateWithWhereUniqueWithoutTechStacksInput!]
  updateMany: [ProjectUpdateManyWithWhereWithoutTechStacksInput!]
  deleteMany: [ProjectScalarWhereInput!]
}

input ProjectUpsertWithWhereUniqueWithoutTechStacksInput {
  where: ProjectWhereUniqueInput!
  update: ProjectUpdateWithoutTechStacksInput!
  create: ProjectCreateWithoutTechStacksInput!
}

input ProjectUpdateWithoutTechStacksInput {
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  teamSize: IntFieldUpdateOperationsInput
  role: ProjectUpdateroleInput
  startAt: DateTimeFieldUpdateOperationsInput
  endAt: NullableDateTimeFieldUpdateOperationsInput
  refeUrls: ProjectUpdaterefeUrlsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  company: CompanyUpdateOneRequiredWithoutProjectsNestedInput
  thumbnail: FileUpdateOneWithoutProjectsNestedInput
  user: UserUpdateOneRequiredWithoutProjectsNestedInput
  Resume: ResumeUpdateOneWithoutProjectsNestedInput
}

input FileUpdateOneWithoutProjectsNestedInput {
  create: FileCreateWithoutProjectsInput
  connectOrCreate: FileCreateOrConnectWithoutProjectsInput
  upsert: FileUpsertWithoutProjectsInput
  disconnect: FileWhereInput
  delete: FileWhereInput
  connect: FileWhereUniqueInput
  update: FileUpdateToOneWithWhereWithoutProjectsInput
}

input FileUpsertWithoutProjectsInput {
  update: FileUpdateWithoutProjectsInput!
  create: FileCreateWithoutProjectsInput!
  where: FileWhereInput
}

input FileUpdateWithoutProjectsInput {
  id: StringFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
  storageId: StringFieldUpdateOperationsInput
  provider: NullableEnumFileProviderFieldUpdateOperationsInput
  metadata: JSON
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  resumeTemplateId: NullableStringFieldUpdateOperationsInput
  users: UserUpdateManyWithoutAvatarNestedInput
  companies: CompanyUpdateManyWithoutPhotosNestedInput
  resume: ResumeUpdateManyWithoutAvatarNestedInput
  posts: PostUpdateManyWithoutThumbnailNestedInput
  company: CompanyUpdateManyWithoutAvatarNestedInput
  resumeTemplates: ResumeTemplateUpdateManyWithoutFileNestedInput
  certificate: CertificateUpdateOneWithoutFilesNestedInput
}

input PostUpdateManyWithoutThumbnailNestedInput {
  create: [PostCreateWithoutThumbnailInput!]
  connectOrCreate: [PostCreateOrConnectWithoutThumbnailInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutThumbnailInput!]
  createMany: PostCreateManyThumbnailInputEnvelope
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  delete: [PostWhereUniqueInput!]
  connect: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutThumbnailInput!]
  updateMany: [PostUpdateManyWithWhereWithoutThumbnailInput!]
  deleteMany: [PostScalarWhereInput!]
}

input PostUpsertWithWhereUniqueWithoutThumbnailInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutThumbnailInput!
  create: PostCreateWithoutThumbnailInput!
}

input PostUpdateWithoutThumbnailInput {
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  shareUrl: StringFieldUpdateOperationsInput
  metadata: JSON
  slug: StringFieldUpdateOperationsInput
  minRead: NullableIntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  jobCategory: JobCategoryUpdateOneWithoutPostsNestedInput
  author: UserUpdateOneRequiredWithoutPostsNestedInput
  categories: PostCategoryUpdateManyWithoutPostsNestedInput
  tags: TagUpdateManyWithoutPostsNestedInput
  likes: LikePostUpdateManyWithoutPostNestedInput
  dislikes: DislikePostUpdateManyWithoutPostNestedInput
  comments: CommentUpdateManyWithoutPostNestedInput
  bookmarks: BookmarkPostUpdateManyWithoutPostNestedInput
}

input PostCategoryUpdateManyWithoutPostsNestedInput {
  create: [PostCategoryCreateWithoutPostsInput!]
  connectOrCreate: [PostCategoryCreateOrConnectWithoutPostsInput!]
  upsert: [PostCategoryUpsertWithWhereUniqueWithoutPostsInput!]
  set: [PostCategoryWhereUniqueInput!]
  disconnect: [PostCategoryWhereUniqueInput!]
  delete: [PostCategoryWhereUniqueInput!]
  connect: [PostCategoryWhereUniqueInput!]
  update: [PostCategoryUpdateWithWhereUniqueWithoutPostsInput!]
  updateMany: [PostCategoryUpdateManyWithWhereWithoutPostsInput!]
  deleteMany: [PostCategoryScalarWhereInput!]
}

input PostCategoryUpsertWithWhereUniqueWithoutPostsInput {
  where: PostCategoryWhereUniqueInput!
  update: PostCategoryUpdateWithoutPostsInput!
  create: PostCategoryCreateWithoutPostsInput!
}

input PostCategoryUpdateWithoutPostsInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
}

input PostCategoryUpdateWithWhereUniqueWithoutPostsInput {
  where: PostCategoryWhereUniqueInput!
  data: PostCategoryUpdateWithoutPostsInput!
}

input PostCategoryUpdateManyWithWhereWithoutPostsInput {
  where: PostCategoryScalarWhereInput!
  data: PostCategoryUpdateManyMutationInput!
}

input PostCategoryScalarWhereInput {
  AND: [PostCategoryScalarWhereInput!]
  OR: [PostCategoryScalarWhereInput!]
  NOT: [PostCategoryScalarWhereInput!]
  id: StringFilter
  name: StringFilter
  slug: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
}

input PostCategoryUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
}

input TagUpdateManyWithoutPostsNestedInput {
  create: [TagCreateWithoutPostsInput!]
  connectOrCreate: [TagCreateOrConnectWithoutPostsInput!]
  upsert: [TagUpsertWithWhereUniqueWithoutPostsInput!]
  set: [TagWhereUniqueInput!]
  disconnect: [TagWhereUniqueInput!]
  delete: [TagWhereUniqueInput!]
  connect: [TagWhereUniqueInput!]
  update: [TagUpdateWithWhereUniqueWithoutPostsInput!]
  updateMany: [TagUpdateManyWithWhereWithoutPostsInput!]
  deleteMany: [TagScalarWhereInput!]
}

input TagUpsertWithWhereUniqueWithoutPostsInput {
  where: TagWhereUniqueInput!
  update: TagUpdateWithoutPostsInput!
  create: TagCreateWithoutPostsInput!
}

input TagUpdateWithoutPostsInput {
  id: StringFieldUpdateOperationsInput
  type: NullableEnumTagTypeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  color: NullableStringFieldUpdateOperationsInput
  isPostDefault: NullableBoolFieldUpdateOperationsInput
  isJobDefault: NullableBoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  jobs: JobUpdateManyWithoutTagsNestedInput
}

input TagUpdateWithWhereUniqueWithoutPostsInput {
  where: TagWhereUniqueInput!
  data: TagUpdateWithoutPostsInput!
}

input TagUpdateManyWithWhereWithoutPostsInput {
  where: TagScalarWhereInput!
  data: TagUpdateManyMutationInput!
}

input TagScalarWhereInput {
  AND: [TagScalarWhereInput!]
  OR: [TagScalarWhereInput!]
  NOT: [TagScalarWhereInput!]
  id: StringFilter
  type: EnumTagTypeNullableFilter
  name: StringFilter
  color: StringNullableFilter
  isPostDefault: BoolNullableFilter
  isJobDefault: BoolNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
}

input TagUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  type: NullableEnumTagTypeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  color: NullableStringFieldUpdateOperationsInput
  isPostDefault: NullableBoolFieldUpdateOperationsInput
  isJobDefault: NullableBoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
}

input LikePostUpdateManyWithoutPostNestedInput {
  create: [LikePostCreateWithoutPostInput!]
  connectOrCreate: [LikePostCreateOrConnectWithoutPostInput!]
  upsert: [LikePostUpsertWithWhereUniqueWithoutPostInput!]
  createMany: LikePostCreateManyPostInputEnvelope
  set: [LikePostWhereUniqueInput!]
  disconnect: [LikePostWhereUniqueInput!]
  delete: [LikePostWhereUniqueInput!]
  connect: [LikePostWhereUniqueInput!]
  update: [LikePostUpdateWithWhereUniqueWithoutPostInput!]
  updateMany: [LikePostUpdateManyWithWhereWithoutPostInput!]
  deleteMany: [LikePostScalarWhereInput!]
}

input LikePostUpsertWithWhereUniqueWithoutPostInput {
  where: LikePostWhereUniqueInput!
  update: LikePostUpdateWithoutPostInput!
  create: LikePostCreateWithoutPostInput!
}

input LikePostUpdateWithoutPostInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  user: UserUpdateOneWithoutLikesNestedInput
  comment: CommentUpdateOneWithoutLikesNestedInput
}

input UserUpdateOneWithoutLikesNestedInput {
  create: UserCreateWithoutLikesInput
  connectOrCreate: UserCreateOrConnectWithoutLikesInput
  upsert: UserUpsertWithoutLikesInput
  disconnect: UserWhereInput
  delete: UserWhereInput
  connect: UserWhereUniqueInput
  update: UserUpdateToOneWithWhereWithoutLikesInput
}

input UserUpsertWithoutLikesInput {
  update: UserUpdateWithoutLikesInput!
  create: UserCreateWithoutLikesInput!
  where: UserWhereInput
}

input UserUpdateWithoutLikesInput {
  id: StringFieldUpdateOperationsInput
  avatarUrl: NullableStringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  emailVerified: BoolFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  phoneNumber: NullableStringFieldUpdateOperationsInput
  workingPosition: NullableEnumWorkPositionFieldUpdateOperationsInput
  status: EnumUserStatusFieldUpdateOperationsInput
  signInProvider: NullableEnumSignInProviderFieldUpdateOperationsInput
  color: NullableStringFieldUpdateOperationsInput
  role: EnumUserRoleFieldUpdateOperationsInput
  addressDetail: NullableStringFieldUpdateOperationsInput
  verifyCode: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  avatar: FileUpdateOneWithoutUsersNestedInput
  country: CountryUpdateOneWithoutUsersNestedInput
  social: SocialUpdateManyWithoutUserNestedInput
  resumes: ResumeUpdateManyWithoutUserNestedInput
  workExperiences: WorkExperienceUpdateManyWithoutUserNestedInput
  educations: EducationUpdateManyWithoutUserNestedInput
  projects: ProjectUpdateManyWithoutUserNestedInput
  applications: ApplicationUpdateManyWithoutCandidateNestedInput
  posts: PostUpdateManyWithoutAuthorNestedInput
  dislikes: DislikePostUpdateManyWithoutUserNestedInput
  comments: CommentUpdateManyWithoutUserNestedInput
  bookmarks: BookmarkPostUpdateManyWithoutUserNestedInput
  saveJobs: SaveJobUpdateManyWithoutUserNestedInput
  payments: PaymentUpdateManyWithoutUserNestedInput
  address: UsersOnCityUpdateManyWithoutUserNestedInput
  companies: CompanyUpdateManyWithoutUserNestedInput
  authorSettings: SettingUpdateManyWithoutAuthorNestedInput
  updatedBySettings: SettingUpdateManyWithoutUpdatedByNestedInput
}

input ApplicationUpdateManyWithoutCandidateNestedInput {
  create: [ApplicationCreateWithoutCandidateInput!]
  connectOrCreate: [ApplicationCreateOrConnectWithoutCandidateInput!]
  upsert: [ApplicationUpsertWithWhereUniqueWithoutCandidateInput!]
  createMany: ApplicationCreateManyCandidateInputEnvelope
  set: [ApplicationWhereUniqueInput!]
  disconnect: [ApplicationWhereUniqueInput!]
  delete: [ApplicationWhereUniqueInput!]
  connect: [ApplicationWhereUniqueInput!]
  update: [ApplicationUpdateWithWhereUniqueWithoutCandidateInput!]
  updateMany: [ApplicationUpdateManyWithWhereWithoutCandidateInput!]
  deleteMany: [ApplicationScalarWhereInput!]
}

input ApplicationUpsertWithWhereUniqueWithoutCandidateInput {
  where: ApplicationWhereUniqueInput!
  update: ApplicationUpdateWithoutCandidateInput!
  create: ApplicationCreateWithoutCandidateInput!
}

input ApplicationUpdateWithoutCandidateInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  status: NullableEnumApplicationStatusFieldUpdateOperationsInput
  type: EnumApplicationTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  resume: ResumeUpdateOneRequiredWithoutApplicationsNestedInput
  job: JobUpdateOneRequiredWithoutApplicationsNestedInput
}

input ResumeUpdateOneRequiredWithoutApplicationsNestedInput {
  create: ResumeCreateWithoutApplicationsInput
  connectOrCreate: ResumeCreateOrConnectWithoutApplicationsInput
  upsert: ResumeUpsertWithoutApplicationsInput
  connect: ResumeWhereUniqueInput
  update: ResumeUpdateToOneWithWhereWithoutApplicationsInput
}

input ResumeUpsertWithoutApplicationsInput {
  update: ResumeUpdateWithoutApplicationsInput!
  create: ResumeCreateWithoutApplicationsInput!
  where: ResumeWhereInput
}

input ResumeUpdateWithoutApplicationsInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  fullName: NullableStringFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  addressDetail: NullableStringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  isSummary: NullableBoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutResumesNestedInput
  avatar: FileUpdateOneWithoutResumeNestedInput
  address: CityUpdateOneWithoutResumesNestedInput
  language: LanguageUpdateOneWithoutResumesNestedInput
  jobTitle: JobTitleUpdateOneRequiredWithoutResumesNestedInput
  workExperiences: WorkExperienceUpdateManyWithoutResumeNestedInput
  educations: EducationUpdateManyWithoutResumeNestedInput
  skills: SkillUpdateManyWithoutResumeNestedInput
  projects: ProjectUpdateManyWithoutResumeNestedInput
  socials: SocialUpdateManyWithoutResumeNestedInput
  languageSkills: LanguageSkillUpdateManyWithoutResumeNestedInput
  activities: ActivityUpdateManyWithoutResumeNestedInput
}

input WorkExperienceUpdateManyWithoutResumeNestedInput {
  create: [WorkExperienceCreateWithoutResumeInput!]
  connectOrCreate: [WorkExperienceCreateOrConnectWithoutResumeInput!]
  upsert: [WorkExperienceUpsertWithWhereUniqueWithoutResumeInput!]
  createMany: WorkExperienceCreateManyResumeInputEnvelope
  set: [WorkExperienceWhereUniqueInput!]
  disconnect: [WorkExperienceWhereUniqueInput!]
  delete: [WorkExperienceWhereUniqueInput!]
  connect: [WorkExperienceWhereUniqueInput!]
  update: [WorkExperienceUpdateWithWhereUniqueWithoutResumeInput!]
  updateMany: [WorkExperienceUpdateManyWithWhereWithoutResumeInput!]
  deleteMany: [WorkExperienceScalarWhereInput!]
}

input WorkExperienceUpsertWithWhereUniqueWithoutResumeInput {
  where: WorkExperienceWhereUniqueInput!
  update: WorkExperienceUpdateWithoutResumeInput!
  create: WorkExperienceCreateWithoutResumeInput!
}

input WorkExperienceUpdateWithoutResumeInput {
  id: StringFieldUpdateOperationsInput
  isFreelancer: NullableBoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  startAt: DateTimeFieldUpdateOperationsInput
  endAt: NullableDateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  jobTitle: JobTitleUpdateOneRequiredWithoutWorkExperiencesNestedInput
  user: UserUpdateOneRequiredWithoutWorkExperiencesNestedInput
  company: CompanyUpdateOneWithoutWorkExperiencesNestedInput
  address: CityUpdateOneWithoutWorkExperiencesNestedInput
}

input CompanyUpdateOneWithoutWorkExperiencesNestedInput {
  create: CompanyCreateWithoutWorkExperiencesInput
  connectOrCreate: CompanyCreateOrConnectWithoutWorkExperiencesInput
  upsert: CompanyUpsertWithoutWorkExperiencesInput
  disconnect: CompanyWhereInput
  delete: CompanyWhereInput
  connect: CompanyWhereUniqueInput
  update: CompanyUpdateToOneWithWhereWithoutWorkExperiencesInput
}

input CompanyUpsertWithoutWorkExperiencesInput {
  update: CompanyUpdateWithoutWorkExperiencesInput!
  create: CompanyCreateWithoutWorkExperiencesInput!
  where: CompanyWhereInput
}

input CompanyUpdateWithoutWorkExperiencesInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  addressDetail: StringFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  avatar: FileUpdateOneWithoutCompanyNestedInput
  type: CompanyTypeUpdateOneWithoutCompaniesNestedInput
  size: CompanySizeUpdateOneWithoutCompaniesNestedInput
  photos: FileUpdateManyWithoutCompaniesNestedInput
  address: CityUpdateOneRequiredWithoutCompaniesNestedInput
  industries: JobCategoryUpdateManyWithoutCompaniesNestedInput
  social: SocialUpdateManyWithoutCompanyNestedInput
  jobs: JobUpdateManyWithoutCompanyNestedInput
  projects: ProjectUpdateManyWithoutCompanyNestedInput
  references: ReferenceUpdateManyWithoutCompanyNestedInput
  user: UserUpdateOneWithoutCompaniesNestedInput
}

input ProjectUpdateManyWithoutCompanyNestedInput {
  create: [ProjectCreateWithoutCompanyInput!]
  connectOrCreate: [ProjectCreateOrConnectWithoutCompanyInput!]
  upsert: [ProjectUpsertWithWhereUniqueWithoutCompanyInput!]
  createMany: ProjectCreateManyCompanyInputEnvelope
  set: [ProjectWhereUniqueInput!]
  disconnect: [ProjectWhereUniqueInput!]
  delete: [ProjectWhereUniqueInput!]
  connect: [ProjectWhereUniqueInput!]
  update: [ProjectUpdateWithWhereUniqueWithoutCompanyInput!]
  updateMany: [ProjectUpdateManyWithWhereWithoutCompanyInput!]
  deleteMany: [ProjectScalarWhereInput!]
}

input ProjectUpsertWithWhereUniqueWithoutCompanyInput {
  where: ProjectWhereUniqueInput!
  update: ProjectUpdateWithoutCompanyInput!
  create: ProjectCreateWithoutCompanyInput!
}

input ProjectUpdateWithoutCompanyInput {
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  teamSize: IntFieldUpdateOperationsInput
  role: ProjectUpdateroleInput
  startAt: DateTimeFieldUpdateOperationsInput
  endAt: NullableDateTimeFieldUpdateOperationsInput
  refeUrls: ProjectUpdaterefeUrlsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  techStacks: SkillUpdateManyWithoutProjectsNestedInput
  thumbnail: FileUpdateOneWithoutProjectsNestedInput
  user: UserUpdateOneRequiredWithoutProjectsNestedInput
  Resume: ResumeUpdateOneWithoutProjectsNestedInput
}

input UserUpdateOneRequiredWithoutProjectsNestedInput {
  create: UserCreateWithoutProjectsInput
  connectOrCreate: UserCreateOrConnectWithoutProjectsInput
  upsert: UserUpsertWithoutProjectsInput
  connect: UserWhereUniqueInput
  update: UserUpdateToOneWithWhereWithoutProjectsInput
}

input UserUpsertWithoutProjectsInput {
  update: UserUpdateWithoutProjectsInput!
  create: UserCreateWithoutProjectsInput!
  where: UserWhereInput
}

input UserUpdateWithoutProjectsInput {
  id: StringFieldUpdateOperationsInput
  avatarUrl: NullableStringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  emailVerified: BoolFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  phoneNumber: NullableStringFieldUpdateOperationsInput
  workingPosition: NullableEnumWorkPositionFieldUpdateOperationsInput
  status: EnumUserStatusFieldUpdateOperationsInput
  signInProvider: NullableEnumSignInProviderFieldUpdateOperationsInput
  color: NullableStringFieldUpdateOperationsInput
  role: EnumUserRoleFieldUpdateOperationsInput
  addressDetail: NullableStringFieldUpdateOperationsInput
  verifyCode: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  avatar: FileUpdateOneWithoutUsersNestedInput
  country: CountryUpdateOneWithoutUsersNestedInput
  social: SocialUpdateManyWithoutUserNestedInput
  resumes: ResumeUpdateManyWithoutUserNestedInput
  workExperiences: WorkExperienceUpdateManyWithoutUserNestedInput
  educations: EducationUpdateManyWithoutUserNestedInput
  applications: ApplicationUpdateManyWithoutCandidateNestedInput
  posts: PostUpdateManyWithoutAuthorNestedInput
  likes: LikePostUpdateManyWithoutUserNestedInput
  dislikes: DislikePostUpdateManyWithoutUserNestedInput
  comments: CommentUpdateManyWithoutUserNestedInput
  bookmarks: BookmarkPostUpdateManyWithoutUserNestedInput
  saveJobs: SaveJobUpdateManyWithoutUserNestedInput
  payments: PaymentUpdateManyWithoutUserNestedInput
  address: UsersOnCityUpdateManyWithoutUserNestedInput
  companies: CompanyUpdateManyWithoutUserNestedInput
  authorSettings: SettingUpdateManyWithoutAuthorNestedInput
  updatedBySettings: SettingUpdateManyWithoutUpdatedByNestedInput
}

input PostUpdateManyWithoutAuthorNestedInput {
  create: [PostCreateWithoutAuthorInput!]
  connectOrCreate: [PostCreateOrConnectWithoutAuthorInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutAuthorInput!]
  createMany: PostCreateManyAuthorInputEnvelope
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  delete: [PostWhereUniqueInput!]
  connect: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [PostUpdateManyWithWhereWithoutAuthorInput!]
  deleteMany: [PostScalarWhereInput!]
}

input PostUpsertWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutAuthorInput!
  create: PostCreateWithoutAuthorInput!
}

input PostUpdateWithoutAuthorInput {
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  shareUrl: StringFieldUpdateOperationsInput
  metadata: JSON
  slug: StringFieldUpdateOperationsInput
  minRead: NullableIntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  jobCategory: JobCategoryUpdateOneWithoutPostsNestedInput
  thumbnail: FileUpdateOneWithoutPostsNestedInput
  categories: PostCategoryUpdateManyWithoutPostsNestedInput
  tags: TagUpdateManyWithoutPostsNestedInput
  likes: LikePostUpdateManyWithoutPostNestedInput
  dislikes: DislikePostUpdateManyWithoutPostNestedInput
  comments: CommentUpdateManyWithoutPostNestedInput
  bookmarks: BookmarkPostUpdateManyWithoutPostNestedInput
}

input FileUpdateOneWithoutPostsNestedInput {
  create: FileCreateWithoutPostsInput
  connectOrCreate: FileCreateOrConnectWithoutPostsInput
  upsert: FileUpsertWithoutPostsInput
  disconnect: FileWhereInput
  delete: FileWhereInput
  connect: FileWhereUniqueInput
  update: FileUpdateToOneWithWhereWithoutPostsInput
}

input FileUpsertWithoutPostsInput {
  update: FileUpdateWithoutPostsInput!
  create: FileCreateWithoutPostsInput!
  where: FileWhereInput
}

input FileUpdateWithoutPostsInput {
  id: StringFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
  storageId: StringFieldUpdateOperationsInput
  provider: NullableEnumFileProviderFieldUpdateOperationsInput
  metadata: JSON
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  resumeTemplateId: NullableStringFieldUpdateOperationsInput
  users: UserUpdateManyWithoutAvatarNestedInput
  companies: CompanyUpdateManyWithoutPhotosNestedInput
  resume: ResumeUpdateManyWithoutAvatarNestedInput
  projects: ProjectUpdateManyWithoutThumbnailNestedInput
  company: CompanyUpdateManyWithoutAvatarNestedInput
  resumeTemplates: ResumeTemplateUpdateManyWithoutFileNestedInput
  certificate: CertificateUpdateOneWithoutFilesNestedInput
}

input CompanyUpdateManyWithoutAvatarNestedInput {
  create: [CompanyCreateWithoutAvatarInput!]
  connectOrCreate: [CompanyCreateOrConnectWithoutAvatarInput!]
  upsert: [CompanyUpsertWithWhereUniqueWithoutAvatarInput!]
  createMany: CompanyCreateManyAvatarInputEnvelope
  set: [CompanyWhereUniqueInput!]
  disconnect: [CompanyWhereUniqueInput!]
  delete: [CompanyWhereUniqueInput!]
  connect: [CompanyWhereUniqueInput!]
  update: [CompanyUpdateWithWhereUniqueWithoutAvatarInput!]
  updateMany: [CompanyUpdateManyWithWhereWithoutAvatarInput!]
  deleteMany: [CompanyScalarWhereInput!]
}

input CompanyUpsertWithWhereUniqueWithoutAvatarInput {
  where: CompanyWhereUniqueInput!
  update: CompanyUpdateWithoutAvatarInput!
  create: CompanyCreateWithoutAvatarInput!
}

input CompanyUpdateWithoutAvatarInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  addressDetail: StringFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  type: CompanyTypeUpdateOneWithoutCompaniesNestedInput
  size: CompanySizeUpdateOneWithoutCompaniesNestedInput
  photos: FileUpdateManyWithoutCompaniesNestedInput
  address: CityUpdateOneRequiredWithoutCompaniesNestedInput
  industries: JobCategoryUpdateManyWithoutCompaniesNestedInput
  social: SocialUpdateManyWithoutCompanyNestedInput
  jobs: JobUpdateManyWithoutCompanyNestedInput
  workExperiences: WorkExperienceUpdateManyWithoutCompanyNestedInput
  projects: ProjectUpdateManyWithoutCompanyNestedInput
  references: ReferenceUpdateManyWithoutCompanyNestedInput
  user: UserUpdateOneWithoutCompaniesNestedInput
}

input WorkExperienceUpdateManyWithoutCompanyNestedInput {
  create: [WorkExperienceCreateWithoutCompanyInput!]
  connectOrCreate: [WorkExperienceCreateOrConnectWithoutCompanyInput!]
  upsert: [WorkExperienceUpsertWithWhereUniqueWithoutCompanyInput!]
  createMany: WorkExperienceCreateManyCompanyInputEnvelope
  set: [WorkExperienceWhereUniqueInput!]
  disconnect: [WorkExperienceWhereUniqueInput!]
  delete: [WorkExperienceWhereUniqueInput!]
  connect: [WorkExperienceWhereUniqueInput!]
  update: [WorkExperienceUpdateWithWhereUniqueWithoutCompanyInput!]
  updateMany: [WorkExperienceUpdateManyWithWhereWithoutCompanyInput!]
  deleteMany: [WorkExperienceScalarWhereInput!]
}

input WorkExperienceUpsertWithWhereUniqueWithoutCompanyInput {
  where: WorkExperienceWhereUniqueInput!
  update: WorkExperienceUpdateWithoutCompanyInput!
  create: WorkExperienceCreateWithoutCompanyInput!
}

input WorkExperienceUpdateWithoutCompanyInput {
  id: StringFieldUpdateOperationsInput
  isFreelancer: NullableBoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  startAt: DateTimeFieldUpdateOperationsInput
  endAt: NullableDateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  jobTitle: JobTitleUpdateOneRequiredWithoutWorkExperiencesNestedInput
  user: UserUpdateOneRequiredWithoutWorkExperiencesNestedInput
  resume: ResumeUpdateOneWithoutWorkExperiencesNestedInput
  address: CityUpdateOneWithoutWorkExperiencesNestedInput
}

input ResumeUpdateOneWithoutWorkExperiencesNestedInput {
  create: ResumeCreateWithoutWorkExperiencesInput
  connectOrCreate: ResumeCreateOrConnectWithoutWorkExperiencesInput
  upsert: ResumeUpsertWithoutWorkExperiencesInput
  disconnect: ResumeWhereInput
  delete: ResumeWhereInput
  connect: ResumeWhereUniqueInput
  update: ResumeUpdateToOneWithWhereWithoutWorkExperiencesInput
}

input ResumeUpsertWithoutWorkExperiencesInput {
  update: ResumeUpdateWithoutWorkExperiencesInput!
  create: ResumeCreateWithoutWorkExperiencesInput!
  where: ResumeWhereInput
}

input ResumeUpdateWithoutWorkExperiencesInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  fullName: NullableStringFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  addressDetail: NullableStringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  isSummary: NullableBoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutResumesNestedInput
  avatar: FileUpdateOneWithoutResumeNestedInput
  address: CityUpdateOneWithoutResumesNestedInput
  language: LanguageUpdateOneWithoutResumesNestedInput
  jobTitle: JobTitleUpdateOneRequiredWithoutResumesNestedInput
  applications: ApplicationUpdateManyWithoutResumeNestedInput
  educations: EducationUpdateManyWithoutResumeNestedInput
  skills: SkillUpdateManyWithoutResumeNestedInput
  projects: ProjectUpdateManyWithoutResumeNestedInput
  socials: SocialUpdateManyWithoutResumeNestedInput
  languageSkills: LanguageSkillUpdateManyWithoutResumeNestedInput
  activities: ActivityUpdateManyWithoutResumeNestedInput
}

input EducationUpdateManyWithoutResumeNestedInput {
  create: [EducationCreateWithoutResumeInput!]
  connectOrCreate: [EducationCreateOrConnectWithoutResumeInput!]
  upsert: [EducationUpsertWithWhereUniqueWithoutResumeInput!]
  createMany: EducationCreateManyResumeInputEnvelope
  set: [EducationWhereUniqueInput!]
  disconnect: [EducationWhereUniqueInput!]
  delete: [EducationWhereUniqueInput!]
  connect: [EducationWhereUniqueInput!]
  update: [EducationUpdateWithWhereUniqueWithoutResumeInput!]
  updateMany: [EducationUpdateManyWithWhereWithoutResumeInput!]
  deleteMany: [EducationScalarWhereInput!]
}

input EducationUpsertWithWhereUniqueWithoutResumeInput {
  where: EducationWhereUniqueInput!
  update: EducationUpdateWithoutResumeInput!
  create: EducationCreateWithoutResumeInput!
}

input EducationUpdateWithoutResumeInput {
  id: StringFieldUpdateOperationsInput
  type: EnumEducationTypeFieldUpdateOperationsInput
  major: StringFieldUpdateOperationsInput
  degree: EnumDegreeFieldUpdateOperationsInput
  graduationAt: NullableDateTimeFieldUpdateOperationsInput
  gpa: NullableIntFieldUpdateOperationsInput
  awards: EducationUpdateawardsInput
  relevantCourseworks: EducationUpdaterelevantCourseworksInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutEducationsNestedInput
}

input UserUpdateOneRequiredWithoutEducationsNestedInput {
  create: UserCreateWithoutEducationsInput
  connectOrCreate: UserCreateOrConnectWithoutEducationsInput
  upsert: UserUpsertWithoutEducationsInput
  connect: UserWhereUniqueInput
  update: UserUpdateToOneWithWhereWithoutEducationsInput
}

input UserUpsertWithoutEducationsInput {
  update: UserUpdateWithoutEducationsInput!
  create: UserCreateWithoutEducationsInput!
  where: UserWhereInput
}

input UserUpdateWithoutEducationsInput {
  id: StringFieldUpdateOperationsInput
  avatarUrl: NullableStringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  emailVerified: BoolFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  phoneNumber: NullableStringFieldUpdateOperationsInput
  workingPosition: NullableEnumWorkPositionFieldUpdateOperationsInput
  status: EnumUserStatusFieldUpdateOperationsInput
  signInProvider: NullableEnumSignInProviderFieldUpdateOperationsInput
  color: NullableStringFieldUpdateOperationsInput
  role: EnumUserRoleFieldUpdateOperationsInput
  addressDetail: NullableStringFieldUpdateOperationsInput
  verifyCode: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  avatar: FileUpdateOneWithoutUsersNestedInput
  country: CountryUpdateOneWithoutUsersNestedInput
  social: SocialUpdateManyWithoutUserNestedInput
  resumes: ResumeUpdateManyWithoutUserNestedInput
  workExperiences: WorkExperienceUpdateManyWithoutUserNestedInput
  projects: ProjectUpdateManyWithoutUserNestedInput
  applications: ApplicationUpdateManyWithoutCandidateNestedInput
  posts: PostUpdateManyWithoutAuthorNestedInput
  likes: LikePostUpdateManyWithoutUserNestedInput
  dislikes: DislikePostUpdateManyWithoutUserNestedInput
  comments: CommentUpdateManyWithoutUserNestedInput
  bookmarks: BookmarkPostUpdateManyWithoutUserNestedInput
  saveJobs: SaveJobUpdateManyWithoutUserNestedInput
  payments: PaymentUpdateManyWithoutUserNestedInput
  address: UsersOnCityUpdateManyWithoutUserNestedInput
  companies: CompanyUpdateManyWithoutUserNestedInput
  authorSettings: SettingUpdateManyWithoutAuthorNestedInput
  updatedBySettings: SettingUpdateManyWithoutUpdatedByNestedInput
}

input LikePostUpdateManyWithoutUserNestedInput {
  create: [LikePostCreateWithoutUserInput!]
  connectOrCreate: [LikePostCreateOrConnectWithoutUserInput!]
  upsert: [LikePostUpsertWithWhereUniqueWithoutUserInput!]
  createMany: LikePostCreateManyUserInputEnvelope
  set: [LikePostWhereUniqueInput!]
  disconnect: [LikePostWhereUniqueInput!]
  delete: [LikePostWhereUniqueInput!]
  connect: [LikePostWhereUniqueInput!]
  update: [LikePostUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [LikePostUpdateManyWithWhereWithoutUserInput!]
  deleteMany: [LikePostScalarWhereInput!]
}

input LikePostUpsertWithWhereUniqueWithoutUserInput {
  where: LikePostWhereUniqueInput!
  update: LikePostUpdateWithoutUserInput!
  create: LikePostCreateWithoutUserInput!
}

input LikePostUpdateWithoutUserInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  post: PostUpdateOneRequiredWithoutLikesNestedInput
  comment: CommentUpdateOneWithoutLikesNestedInput
}

input PostUpdateOneRequiredWithoutLikesNestedInput {
  create: PostCreateWithoutLikesInput
  connectOrCreate: PostCreateOrConnectWithoutLikesInput
  upsert: PostUpsertWithoutLikesInput
  connect: PostWhereUniqueInput
  update: PostUpdateToOneWithWhereWithoutLikesInput
}

input PostUpsertWithoutLikesInput {
  update: PostUpdateWithoutLikesInput!
  create: PostCreateWithoutLikesInput!
  where: PostWhereInput
}

input PostUpdateWithoutLikesInput {
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  shareUrl: StringFieldUpdateOperationsInput
  metadata: JSON
  slug: StringFieldUpdateOperationsInput
  minRead: NullableIntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  jobCategory: JobCategoryUpdateOneWithoutPostsNestedInput
  author: UserUpdateOneRequiredWithoutPostsNestedInput
  thumbnail: FileUpdateOneWithoutPostsNestedInput
  categories: PostCategoryUpdateManyWithoutPostsNestedInput
  tags: TagUpdateManyWithoutPostsNestedInput
  dislikes: DislikePostUpdateManyWithoutPostNestedInput
  comments: CommentUpdateManyWithoutPostNestedInput
  bookmarks: BookmarkPostUpdateManyWithoutPostNestedInput
}

input DislikePostUpdateManyWithoutPostNestedInput {
  create: [DislikePostCreateWithoutPostInput!]
  connectOrCreate: [DislikePostCreateOrConnectWithoutPostInput!]
  upsert: [DislikePostUpsertWithWhereUniqueWithoutPostInput!]
  createMany: DislikePostCreateManyPostInputEnvelope
  set: [DislikePostWhereUniqueInput!]
  disconnect: [DislikePostWhereUniqueInput!]
  delete: [DislikePostWhereUniqueInput!]
  connect: [DislikePostWhereUniqueInput!]
  update: [DislikePostUpdateWithWhereUniqueWithoutPostInput!]
  updateMany: [DislikePostUpdateManyWithWhereWithoutPostInput!]
  deleteMany: [DislikePostScalarWhereInput!]
}

input DislikePostUpsertWithWhereUniqueWithoutPostInput {
  where: DislikePostWhereUniqueInput!
  update: DislikePostUpdateWithoutPostInput!
  create: DislikePostCreateWithoutPostInput!
}

input DislikePostUpdateWithoutPostInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  user: UserUpdateOneWithoutDislikesNestedInput
  comment: CommentUpdateOneWithoutDislikesNestedInput
}

input UserUpdateOneWithoutDislikesNestedInput {
  create: UserCreateWithoutDislikesInput
  connectOrCreate: UserCreateOrConnectWithoutDislikesInput
  upsert: UserUpsertWithoutDislikesInput
  disconnect: UserWhereInput
  delete: UserWhereInput
  connect: UserWhereUniqueInput
  update: UserUpdateToOneWithWhereWithoutDislikesInput
}

input UserUpsertWithoutDislikesInput {
  update: UserUpdateWithoutDislikesInput!
  create: UserCreateWithoutDislikesInput!
  where: UserWhereInput
}

input UserUpdateWithoutDislikesInput {
  id: StringFieldUpdateOperationsInput
  avatarUrl: NullableStringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  emailVerified: BoolFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  phoneNumber: NullableStringFieldUpdateOperationsInput
  workingPosition: NullableEnumWorkPositionFieldUpdateOperationsInput
  status: EnumUserStatusFieldUpdateOperationsInput
  signInProvider: NullableEnumSignInProviderFieldUpdateOperationsInput
  color: NullableStringFieldUpdateOperationsInput
  role: EnumUserRoleFieldUpdateOperationsInput
  addressDetail: NullableStringFieldUpdateOperationsInput
  verifyCode: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  avatar: FileUpdateOneWithoutUsersNestedInput
  country: CountryUpdateOneWithoutUsersNestedInput
  social: SocialUpdateManyWithoutUserNestedInput
  resumes: ResumeUpdateManyWithoutUserNestedInput
  workExperiences: WorkExperienceUpdateManyWithoutUserNestedInput
  educations: EducationUpdateManyWithoutUserNestedInput
  projects: ProjectUpdateManyWithoutUserNestedInput
  applications: ApplicationUpdateManyWithoutCandidateNestedInput
  posts: PostUpdateManyWithoutAuthorNestedInput
  likes: LikePostUpdateManyWithoutUserNestedInput
  comments: CommentUpdateManyWithoutUserNestedInput
  bookmarks: BookmarkPostUpdateManyWithoutUserNestedInput
  saveJobs: SaveJobUpdateManyWithoutUserNestedInput
  payments: PaymentUpdateManyWithoutUserNestedInput
  address: UsersOnCityUpdateManyWithoutUserNestedInput
  companies: CompanyUpdateManyWithoutUserNestedInput
  authorSettings: SettingUpdateManyWithoutAuthorNestedInput
  updatedBySettings: SettingUpdateManyWithoutUpdatedByNestedInput
}

input CommentUpdateManyWithoutUserNestedInput {
  create: [CommentCreateWithoutUserInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutUserInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutUserInput!]
  createMany: CommentCreateManyUserInputEnvelope
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  delete: [CommentWhereUniqueInput!]
  connect: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [CommentUpdateManyWithWhereWithoutUserInput!]
  deleteMany: [CommentScalarWhereInput!]
}

input CommentUpsertWithWhereUniqueWithoutUserInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutUserInput!
  create: CommentCreateWithoutUserInput!
}

input CommentUpdateWithoutUserInput {
  id: StringFieldUpdateOperationsInput
  conent: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  isAnonymously: NullableBoolFieldUpdateOperationsInput
  post: PostUpdateOneRequiredWithoutCommentsNestedInput
  parent: CommentUpdateOneWithoutRepliesNestedInput
  replies: CommentUpdateManyWithoutParentNestedInput
  likes: LikePostUpdateManyWithoutCommentNestedInput
  dislikes: DislikePostUpdateManyWithoutCommentNestedInput
}

input PostUpdateOneRequiredWithoutCommentsNestedInput {
  create: PostCreateWithoutCommentsInput
  connectOrCreate: PostCreateOrConnectWithoutCommentsInput
  upsert: PostUpsertWithoutCommentsInput
  connect: PostWhereUniqueInput
  update: PostUpdateToOneWithWhereWithoutCommentsInput
}

input PostUpsertWithoutCommentsInput {
  update: PostUpdateWithoutCommentsInput!
  create: PostCreateWithoutCommentsInput!
  where: PostWhereInput
}

input PostUpdateWithoutCommentsInput {
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  shareUrl: StringFieldUpdateOperationsInput
  metadata: JSON
  slug: StringFieldUpdateOperationsInput
  minRead: NullableIntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  jobCategory: JobCategoryUpdateOneWithoutPostsNestedInput
  author: UserUpdateOneRequiredWithoutPostsNestedInput
  thumbnail: FileUpdateOneWithoutPostsNestedInput
  categories: PostCategoryUpdateManyWithoutPostsNestedInput
  tags: TagUpdateManyWithoutPostsNestedInput
  likes: LikePostUpdateManyWithoutPostNestedInput
  dislikes: DislikePostUpdateManyWithoutPostNestedInput
  bookmarks: BookmarkPostUpdateManyWithoutPostNestedInput
}

input BookmarkPostUpdateManyWithoutPostNestedInput {
  create: [BookmarkPostCreateWithoutPostInput!]
  connectOrCreate: [BookmarkPostCreateOrConnectWithoutPostInput!]
  upsert: [BookmarkPostUpsertWithWhereUniqueWithoutPostInput!]
  createMany: BookmarkPostCreateManyPostInputEnvelope
  set: [BookmarkPostWhereUniqueInput!]
  disconnect: [BookmarkPostWhereUniqueInput!]
  delete: [BookmarkPostWhereUniqueInput!]
  connect: [BookmarkPostWhereUniqueInput!]
  update: [BookmarkPostUpdateWithWhereUniqueWithoutPostInput!]
  updateMany: [BookmarkPostUpdateManyWithWhereWithoutPostInput!]
  deleteMany: [BookmarkPostScalarWhereInput!]
}

input BookmarkPostUpsertWithWhereUniqueWithoutPostInput {
  where: BookmarkPostWhereUniqueInput!
  update: BookmarkPostUpdateWithoutPostInput!
  create: BookmarkPostCreateWithoutPostInput!
}

input BookmarkPostUpdateWithoutPostInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutBookmarksNestedInput
}

input UserUpdateOneRequiredWithoutBookmarksNestedInput {
  create: UserCreateWithoutBookmarksInput
  connectOrCreate: UserCreateOrConnectWithoutBookmarksInput
  upsert: UserUpsertWithoutBookmarksInput
  connect: UserWhereUniqueInput
  update: UserUpdateToOneWithWhereWithoutBookmarksInput
}

input UserUpsertWithoutBookmarksInput {
  update: UserUpdateWithoutBookmarksInput!
  create: UserCreateWithoutBookmarksInput!
  where: UserWhereInput
}

input UserUpdateWithoutBookmarksInput {
  id: StringFieldUpdateOperationsInput
  avatarUrl: NullableStringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  emailVerified: BoolFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  phoneNumber: NullableStringFieldUpdateOperationsInput
  workingPosition: NullableEnumWorkPositionFieldUpdateOperationsInput
  status: EnumUserStatusFieldUpdateOperationsInput
  signInProvider: NullableEnumSignInProviderFieldUpdateOperationsInput
  color: NullableStringFieldUpdateOperationsInput
  role: EnumUserRoleFieldUpdateOperationsInput
  addressDetail: NullableStringFieldUpdateOperationsInput
  verifyCode: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  avatar: FileUpdateOneWithoutUsersNestedInput
  country: CountryUpdateOneWithoutUsersNestedInput
  social: SocialUpdateManyWithoutUserNestedInput
  resumes: ResumeUpdateManyWithoutUserNestedInput
  workExperiences: WorkExperienceUpdateManyWithoutUserNestedInput
  educations: EducationUpdateManyWithoutUserNestedInput
  projects: ProjectUpdateManyWithoutUserNestedInput
  applications: ApplicationUpdateManyWithoutCandidateNestedInput
  posts: PostUpdateManyWithoutAuthorNestedInput
  likes: LikePostUpdateManyWithoutUserNestedInput
  dislikes: DislikePostUpdateManyWithoutUserNestedInput
  comments: CommentUpdateManyWithoutUserNestedInput
  saveJobs: SaveJobUpdateManyWithoutUserNestedInput
  payments: PaymentUpdateManyWithoutUserNestedInput
  address: UsersOnCityUpdateManyWithoutUserNestedInput
  companies: CompanyUpdateManyWithoutUserNestedInput
  authorSettings: SettingUpdateManyWithoutAuthorNestedInput
  updatedBySettings: SettingUpdateManyWithoutUpdatedByNestedInput
}

input DislikePostUpdateManyWithoutUserNestedInput {
  create: [DislikePostCreateWithoutUserInput!]
  connectOrCreate: [DislikePostCreateOrConnectWithoutUserInput!]
  upsert: [DislikePostUpsertWithWhereUniqueWithoutUserInput!]
  createMany: DislikePostCreateManyUserInputEnvelope
  set: [DislikePostWhereUniqueInput!]
  disconnect: [DislikePostWhereUniqueInput!]
  delete: [DislikePostWhereUniqueInput!]
  connect: [DislikePostWhereUniqueInput!]
  update: [DislikePostUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [DislikePostUpdateManyWithWhereWithoutUserInput!]
  deleteMany: [DislikePostScalarWhereInput!]
}

input DislikePostUpsertWithWhereUniqueWithoutUserInput {
  where: DislikePostWhereUniqueInput!
  update: DislikePostUpdateWithoutUserInput!
  create: DislikePostCreateWithoutUserInput!
}

input DislikePostUpdateWithoutUserInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  post: PostUpdateOneRequiredWithoutDislikesNestedInput
  comment: CommentUpdateOneWithoutDislikesNestedInput
}

input PostUpdateOneRequiredWithoutDislikesNestedInput {
  create: PostCreateWithoutDislikesInput
  connectOrCreate: PostCreateOrConnectWithoutDislikesInput
  upsert: PostUpsertWithoutDislikesInput
  connect: PostWhereUniqueInput
  update: PostUpdateToOneWithWhereWithoutDislikesInput
}

input PostUpsertWithoutDislikesInput {
  update: PostUpdateWithoutDislikesInput!
  create: PostCreateWithoutDislikesInput!
  where: PostWhereInput
}

input PostUpdateWithoutDislikesInput {
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  shareUrl: StringFieldUpdateOperationsInput
  metadata: JSON
  slug: StringFieldUpdateOperationsInput
  minRead: NullableIntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  jobCategory: JobCategoryUpdateOneWithoutPostsNestedInput
  author: UserUpdateOneRequiredWithoutPostsNestedInput
  thumbnail: FileUpdateOneWithoutPostsNestedInput
  categories: PostCategoryUpdateManyWithoutPostsNestedInput
  tags: TagUpdateManyWithoutPostsNestedInput
  likes: LikePostUpdateManyWithoutPostNestedInput
  comments: CommentUpdateManyWithoutPostNestedInput
  bookmarks: BookmarkPostUpdateManyWithoutPostNestedInput
}

input CommentUpdateManyWithoutPostNestedInput {
  create: [CommentCreateWithoutPostInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutPostInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutPostInput!]
  createMany: CommentCreateManyPostInputEnvelope
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  delete: [CommentWhereUniqueInput!]
  connect: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutPostInput!]
  updateMany: [CommentUpdateManyWithWhereWithoutPostInput!]
  deleteMany: [CommentScalarWhereInput!]
}

input CommentUpsertWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutPostInput!
  create: CommentCreateWithoutPostInput!
}

input CommentUpdateWithoutPostInput {
  id: StringFieldUpdateOperationsInput
  conent: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  isAnonymously: NullableBoolFieldUpdateOperationsInput
  user: UserUpdateOneWithoutCommentsNestedInput
  parent: CommentUpdateOneWithoutRepliesNestedInput
  replies: CommentUpdateManyWithoutParentNestedInput
  likes: LikePostUpdateManyWithoutCommentNestedInput
  dislikes: DislikePostUpdateManyWithoutCommentNestedInput
}

input UserUpdateOneWithoutCommentsNestedInput {
  create: UserCreateWithoutCommentsInput
  connectOrCreate: UserCreateOrConnectWithoutCommentsInput
  upsert: UserUpsertWithoutCommentsInput
  disconnect: UserWhereInput
  delete: UserWhereInput
  connect: UserWhereUniqueInput
  update: UserUpdateToOneWithWhereWithoutCommentsInput
}

input UserUpsertWithoutCommentsInput {
  update: UserUpdateWithoutCommentsInput!
  create: UserCreateWithoutCommentsInput!
  where: UserWhereInput
}

input UserUpdateWithoutCommentsInput {
  id: StringFieldUpdateOperationsInput
  avatarUrl: NullableStringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  emailVerified: BoolFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  phoneNumber: NullableStringFieldUpdateOperationsInput
  workingPosition: NullableEnumWorkPositionFieldUpdateOperationsInput
  status: EnumUserStatusFieldUpdateOperationsInput
  signInProvider: NullableEnumSignInProviderFieldUpdateOperationsInput
  color: NullableStringFieldUpdateOperationsInput
  role: EnumUserRoleFieldUpdateOperationsInput
  addressDetail: NullableStringFieldUpdateOperationsInput
  verifyCode: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  avatar: FileUpdateOneWithoutUsersNestedInput
  country: CountryUpdateOneWithoutUsersNestedInput
  social: SocialUpdateManyWithoutUserNestedInput
  resumes: ResumeUpdateManyWithoutUserNestedInput
  workExperiences: WorkExperienceUpdateManyWithoutUserNestedInput
  educations: EducationUpdateManyWithoutUserNestedInput
  projects: ProjectUpdateManyWithoutUserNestedInput
  applications: ApplicationUpdateManyWithoutCandidateNestedInput
  posts: PostUpdateManyWithoutAuthorNestedInput
  likes: LikePostUpdateManyWithoutUserNestedInput
  dislikes: DislikePostUpdateManyWithoutUserNestedInput
  bookmarks: BookmarkPostUpdateManyWithoutUserNestedInput
  saveJobs: SaveJobUpdateManyWithoutUserNestedInput
  payments: PaymentUpdateManyWithoutUserNestedInput
  address: UsersOnCityUpdateManyWithoutUserNestedInput
  companies: CompanyUpdateManyWithoutUserNestedInput
  authorSettings: SettingUpdateManyWithoutAuthorNestedInput
  updatedBySettings: SettingUpdateManyWithoutUpdatedByNestedInput
}

input BookmarkPostUpdateManyWithoutUserNestedInput {
  create: [BookmarkPostCreateWithoutUserInput!]
  connectOrCreate: [BookmarkPostCreateOrConnectWithoutUserInput!]
  upsert: [BookmarkPostUpsertWithWhereUniqueWithoutUserInput!]
  createMany: BookmarkPostCreateManyUserInputEnvelope
  set: [BookmarkPostWhereUniqueInput!]
  disconnect: [BookmarkPostWhereUniqueInput!]
  delete: [BookmarkPostWhereUniqueInput!]
  connect: [BookmarkPostWhereUniqueInput!]
  update: [BookmarkPostUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [BookmarkPostUpdateManyWithWhereWithoutUserInput!]
  deleteMany: [BookmarkPostScalarWhereInput!]
}

input BookmarkPostUpsertWithWhereUniqueWithoutUserInput {
  where: BookmarkPostWhereUniqueInput!
  update: BookmarkPostUpdateWithoutUserInput!
  create: BookmarkPostCreateWithoutUserInput!
}

input BookmarkPostUpdateWithoutUserInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  post: PostUpdateOneRequiredWithoutBookmarksNestedInput
}

input PostUpdateOneRequiredWithoutBookmarksNestedInput {
  create: PostCreateWithoutBookmarksInput
  connectOrCreate: PostCreateOrConnectWithoutBookmarksInput
  upsert: PostUpsertWithoutBookmarksInput
  connect: PostWhereUniqueInput
  update: PostUpdateToOneWithWhereWithoutBookmarksInput
}

input PostUpsertWithoutBookmarksInput {
  update: PostUpdateWithoutBookmarksInput!
  create: PostCreateWithoutBookmarksInput!
  where: PostWhereInput
}

input PostUpdateWithoutBookmarksInput {
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  shareUrl: StringFieldUpdateOperationsInput
  metadata: JSON
  slug: StringFieldUpdateOperationsInput
  minRead: NullableIntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  jobCategory: JobCategoryUpdateOneWithoutPostsNestedInput
  author: UserUpdateOneRequiredWithoutPostsNestedInput
  thumbnail: FileUpdateOneWithoutPostsNestedInput
  categories: PostCategoryUpdateManyWithoutPostsNestedInput
  tags: TagUpdateManyWithoutPostsNestedInput
  likes: LikePostUpdateManyWithoutPostNestedInput
  dislikes: DislikePostUpdateManyWithoutPostNestedInput
  comments: CommentUpdateManyWithoutPostNestedInput
}

input PostUpdateToOneWithWhereWithoutBookmarksInput {
  where: PostWhereInput
  data: PostUpdateWithoutBookmarksInput!
}

input BookmarkPostUpdateWithWhereUniqueWithoutUserInput {
  where: BookmarkPostWhereUniqueInput!
  data: BookmarkPostUpdateWithoutUserInput!
}

input BookmarkPostUpdateManyWithWhereWithoutUserInput {
  where: BookmarkPostScalarWhereInput!
  data: BookmarkPostUpdateManyMutationInput!
}

input BookmarkPostScalarWhereInput {
  AND: [BookmarkPostScalarWhereInput!]
  OR: [BookmarkPostScalarWhereInput!]
  NOT: [BookmarkPostScalarWhereInput!]
  id: StringFilter
  userId: StringFilter
  postId: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
}

input BookmarkPostUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
}

input SaveJobUpdateManyWithoutUserNestedInput {
  create: [SaveJobCreateWithoutUserInput!]
  connectOrCreate: [SaveJobCreateOrConnectWithoutUserInput!]
  upsert: [SaveJobUpsertWithWhereUniqueWithoutUserInput!]
  createMany: SaveJobCreateManyUserInputEnvelope
  set: [SaveJobWhereUniqueInput!]
  disconnect: [SaveJobWhereUniqueInput!]
  delete: [SaveJobWhereUniqueInput!]
  connect: [SaveJobWhereUniqueInput!]
  update: [SaveJobUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [SaveJobUpdateManyWithWhereWithoutUserInput!]
  deleteMany: [SaveJobScalarWhereInput!]
}

input SaveJobUpsertWithWhereUniqueWithoutUserInput {
  where: SaveJobWhereUniqueInput!
  update: SaveJobUpdateWithoutUserInput!
  create: SaveJobCreateWithoutUserInput!
}

input SaveJobUpdateWithoutUserInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  job: JobUpdateOneRequiredWithoutSaveJobsNestedInput
}

input JobUpdateOneRequiredWithoutSaveJobsNestedInput {
  create: JobCreateWithoutSaveJobsInput
  connectOrCreate: JobCreateOrConnectWithoutSaveJobsInput
  upsert: JobUpsertWithoutSaveJobsInput
  connect: JobWhereUniqueInput
  update: JobUpdateToOneWithWhereWithoutSaveJobsInput
}

input JobUpsertWithoutSaveJobsInput {
  update: JobUpdateWithoutSaveJobsInput!
  create: JobCreateWithoutSaveJobsInput!
  where: JobWhereInput
}

input JobUpdateWithoutSaveJobsInput {
  id: StringFieldUpdateOperationsInput
  type: EnumJobTypeFieldUpdateOperationsInput
  level: EnumJobLevelFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  addressDetail: NullableStringFieldUpdateOperationsInput
  salary: EnumJobSalaryFieldUpdateOperationsInput
  salaryMetadata: JSON
  description: StringFieldUpdateOperationsInput
  isBoot: NullableBoolFieldUpdateOperationsInput
  numberOfRecruits: IntFieldUpdateOperationsInput
  applicationDeadline: DateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  address: CityUpdateOneRequiredWithoutJobsNestedInput
  jobTitle: JobTitleUpdateOneRequiredWithoutJobsNestedInput
  jobCategory: JobCategoryUpdateOneRequiredWithoutJobsNestedInput
  company: CompanyUpdateOneRequiredWithoutJobsNestedInput
  tags: TagUpdateManyWithoutJobsNestedInput
  skills: SkillUpdateManyWithoutJobsNestedInput
  applications: ApplicationUpdateManyWithoutJobNestedInput
}

input ApplicationUpdateManyWithoutJobNestedInput {
  create: [ApplicationCreateWithoutJobInput!]
  connectOrCreate: [ApplicationCreateOrConnectWithoutJobInput!]
  upsert: [ApplicationUpsertWithWhereUniqueWithoutJobInput!]
  createMany: ApplicationCreateManyJobInputEnvelope
  set: [ApplicationWhereUniqueInput!]
  disconnect: [ApplicationWhereUniqueInput!]
  delete: [ApplicationWhereUniqueInput!]
  connect: [ApplicationWhereUniqueInput!]
  update: [ApplicationUpdateWithWhereUniqueWithoutJobInput!]
  updateMany: [ApplicationUpdateManyWithWhereWithoutJobInput!]
  deleteMany: [ApplicationScalarWhereInput!]
}

input ApplicationUpsertWithWhereUniqueWithoutJobInput {
  where: ApplicationWhereUniqueInput!
  update: ApplicationUpdateWithoutJobInput!
  create: ApplicationCreateWithoutJobInput!
}

input ApplicationUpdateWithoutJobInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  status: NullableEnumApplicationStatusFieldUpdateOperationsInput
  type: EnumApplicationTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  resume: ResumeUpdateOneRequiredWithoutApplicationsNestedInput
  candidate: UserUpdateOneRequiredWithoutApplicationsNestedInput
}

input UserUpdateOneRequiredWithoutApplicationsNestedInput {
  create: UserCreateWithoutApplicationsInput
  connectOrCreate: UserCreateOrConnectWithoutApplicationsInput
  upsert: UserUpsertWithoutApplicationsInput
  connect: UserWhereUniqueInput
  update: UserUpdateToOneWithWhereWithoutApplicationsInput
}

input UserUpsertWithoutApplicationsInput {
  update: UserUpdateWithoutApplicationsInput!
  create: UserCreateWithoutApplicationsInput!
  where: UserWhereInput
}

input UserUpdateWithoutApplicationsInput {
  id: StringFieldUpdateOperationsInput
  avatarUrl: NullableStringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  emailVerified: BoolFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  phoneNumber: NullableStringFieldUpdateOperationsInput
  workingPosition: NullableEnumWorkPositionFieldUpdateOperationsInput
  status: EnumUserStatusFieldUpdateOperationsInput
  signInProvider: NullableEnumSignInProviderFieldUpdateOperationsInput
  color: NullableStringFieldUpdateOperationsInput
  role: EnumUserRoleFieldUpdateOperationsInput
  addressDetail: NullableStringFieldUpdateOperationsInput
  verifyCode: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  avatar: FileUpdateOneWithoutUsersNestedInput
  country: CountryUpdateOneWithoutUsersNestedInput
  social: SocialUpdateManyWithoutUserNestedInput
  resumes: ResumeUpdateManyWithoutUserNestedInput
  workExperiences: WorkExperienceUpdateManyWithoutUserNestedInput
  educations: EducationUpdateManyWithoutUserNestedInput
  projects: ProjectUpdateManyWithoutUserNestedInput
  posts: PostUpdateManyWithoutAuthorNestedInput
  likes: LikePostUpdateManyWithoutUserNestedInput
  dislikes: DislikePostUpdateManyWithoutUserNestedInput
  comments: CommentUpdateManyWithoutUserNestedInput
  bookmarks: BookmarkPostUpdateManyWithoutUserNestedInput
  saveJobs: SaveJobUpdateManyWithoutUserNestedInput
  payments: PaymentUpdateManyWithoutUserNestedInput
  address: UsersOnCityUpdateManyWithoutUserNestedInput
  companies: CompanyUpdateManyWithoutUserNestedInput
  authorSettings: SettingUpdateManyWithoutAuthorNestedInput
  updatedBySettings: SettingUpdateManyWithoutUpdatedByNestedInput
}

input PaymentUpdateManyWithoutUserNestedInput {
  create: [PaymentCreateWithoutUserInput!]
  connectOrCreate: [PaymentCreateOrConnectWithoutUserInput!]
  upsert: [PaymentUpsertWithWhereUniqueWithoutUserInput!]
  createMany: PaymentCreateManyUserInputEnvelope
  set: [PaymentWhereUniqueInput!]
  disconnect: [PaymentWhereUniqueInput!]
  delete: [PaymentWhereUniqueInput!]
  connect: [PaymentWhereUniqueInput!]
  update: [PaymentUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [PaymentUpdateManyWithWhereWithoutUserInput!]
  deleteMany: [PaymentScalarWhereInput!]
}

input PaymentUpsertWithWhereUniqueWithoutUserInput {
  where: PaymentWhereUniqueInput!
  update: PaymentUpdateWithoutUserInput!
  create: PaymentCreateWithoutUserInput!
}

input PaymentUpdateWithoutUserInput {
  id: StringFieldUpdateOperationsInput
  amount: IntFieldUpdateOperationsInput
  currency: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  checkouts: CheckoutSessionUpdateManyWithoutPaymentNestedInput
  invoices: InvoiceUpdateManyWithoutPaymentNestedInput
}

input CheckoutSessionUpdateManyWithoutPaymentNestedInput {
  create: [CheckoutSessionCreateWithoutPaymentInput!]
  connectOrCreate: [CheckoutSessionCreateOrConnectWithoutPaymentInput!]
  upsert: [CheckoutSessionUpsertWithWhereUniqueWithoutPaymentInput!]
  createMany: CheckoutSessionCreateManyPaymentInputEnvelope
  set: [CheckoutSessionWhereUniqueInput!]
  disconnect: [CheckoutSessionWhereUniqueInput!]
  delete: [CheckoutSessionWhereUniqueInput!]
  connect: [CheckoutSessionWhereUniqueInput!]
  update: [CheckoutSessionUpdateWithWhereUniqueWithoutPaymentInput!]
  updateMany: [CheckoutSessionUpdateManyWithWhereWithoutPaymentInput!]
  deleteMany: [CheckoutSessionScalarWhereInput!]
}

input CheckoutSessionUpsertWithWhereUniqueWithoutPaymentInput {
  where: CheckoutSessionWhereUniqueInput!
  update: CheckoutSessionUpdateWithoutPaymentInput!
  create: CheckoutSessionCreateWithoutPaymentInput!
}

input CheckoutSessionUpdateWithoutPaymentInput {
  sessionId: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CheckoutSessionUpdateWithWhereUniqueWithoutPaymentInput {
  where: CheckoutSessionWhereUniqueInput!
  data: CheckoutSessionUpdateWithoutPaymentInput!
}

input CheckoutSessionUpdateManyWithWhereWithoutPaymentInput {
  where: CheckoutSessionScalarWhereInput!
  data: CheckoutSessionUpdateManyMutationInput!
}

input CheckoutSessionScalarWhereInput {
  AND: [CheckoutSessionScalarWhereInput!]
  OR: [CheckoutSessionScalarWhereInput!]
  NOT: [CheckoutSessionScalarWhereInput!]
  id: IntFilter
  sessionId: StringFilter
  paymentId: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input CheckoutSessionUpdateManyMutationInput {
  sessionId: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input InvoiceUpdateManyWithoutPaymentNestedInput {
  create: [InvoiceCreateWithoutPaymentInput!]
  connectOrCreate: [InvoiceCreateOrConnectWithoutPaymentInput!]
  upsert: [InvoiceUpsertWithWhereUniqueWithoutPaymentInput!]
  createMany: InvoiceCreateManyPaymentInputEnvelope
  set: [InvoiceWhereUniqueInput!]
  disconnect: [InvoiceWhereUniqueInput!]
  delete: [InvoiceWhereUniqueInput!]
  connect: [InvoiceWhereUniqueInput!]
  update: [InvoiceUpdateWithWhereUniqueWithoutPaymentInput!]
  updateMany: [InvoiceUpdateManyWithWhereWithoutPaymentInput!]
  deleteMany: [InvoiceScalarWhereInput!]
}

input InvoiceUpsertWithWhereUniqueWithoutPaymentInput {
  where: InvoiceWhereUniqueInput!
  update: InvoiceUpdateWithoutPaymentInput!
  create: InvoiceCreateWithoutPaymentInput!
}

input InvoiceUpdateWithoutPaymentInput {
  customerId: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input InvoiceUpdateWithWhereUniqueWithoutPaymentInput {
  where: InvoiceWhereUniqueInput!
  data: InvoiceUpdateWithoutPaymentInput!
}

input InvoiceUpdateManyWithWhereWithoutPaymentInput {
  where: InvoiceScalarWhereInput!
  data: InvoiceUpdateManyMutationInput!
}

input InvoiceScalarWhereInput {
  AND: [InvoiceScalarWhereInput!]
  OR: [InvoiceScalarWhereInput!]
  NOT: [InvoiceScalarWhereInput!]
  id: IntFilter
  customerId: StringFilter
  paymentId: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input InvoiceUpdateManyMutationInput {
  customerId: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PaymentUpdateWithWhereUniqueWithoutUserInput {
  where: PaymentWhereUniqueInput!
  data: PaymentUpdateWithoutUserInput!
}

input PaymentUpdateManyWithWhereWithoutUserInput {
  where: PaymentScalarWhereInput!
  data: PaymentUpdateManyMutationInput!
}

input PaymentScalarWhereInput {
  AND: [PaymentScalarWhereInput!]
  OR: [PaymentScalarWhereInput!]
  NOT: [PaymentScalarWhereInput!]
  id: StringFilter
  amount: IntFilter
  currency: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  userId: StringFilter
}

input PaymentUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  amount: IntFieldUpdateOperationsInput
  currency: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
}

input UsersOnCityUpdateManyWithoutUserNestedInput {
  create: [UsersOnCityCreateWithoutUserInput!]
  connectOrCreate: [UsersOnCityCreateOrConnectWithoutUserInput!]
  upsert: [UsersOnCityUpsertWithWhereUniqueWithoutUserInput!]
  createMany: UsersOnCityCreateManyUserInputEnvelope
  set: [UsersOnCityWhereUniqueInput!]
  disconnect: [UsersOnCityWhereUniqueInput!]
  delete: [UsersOnCityWhereUniqueInput!]
  connect: [UsersOnCityWhereUniqueInput!]
  update: [UsersOnCityUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [UsersOnCityUpdateManyWithWhereWithoutUserInput!]
  deleteMany: [UsersOnCityScalarWhereInput!]
}

input UsersOnCityUpsertWithWhereUniqueWithoutUserInput {
  where: UsersOnCityWhereUniqueInput!
  update: UsersOnCityUpdateWithoutUserInput!
  create: UsersOnCityCreateWithoutUserInput!
}

input UsersOnCityUpdateWithoutUserInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  city: CityUpdateOneRequiredWithoutUsersNestedInput
}

input CityUpdateOneRequiredWithoutUsersNestedInput {
  create: CityCreateWithoutUsersInput
  connectOrCreate: CityCreateOrConnectWithoutUsersInput
  upsert: CityUpsertWithoutUsersInput
  connect: CityWhereUniqueInput
  update: CityUpdateToOneWithWhereWithoutUsersInput
}

input CityUpsertWithoutUsersInput {
  update: CityUpdateWithoutUsersInput!
  create: CityCreateWithoutUsersInput!
  where: CityWhereInput
}

input CityUpdateWithoutUsersInput {
  name: StringFieldUpdateOperationsInput
  stateCode: NullableStringFieldUpdateOperationsInput
  stateName: NullableStringFieldUpdateOperationsInput
  countryCode: NullableStringFieldUpdateOperationsInput
  countryName: NullableStringFieldUpdateOperationsInput
  latitude: NullableStringFieldUpdateOperationsInput
  longitude: NullableStringFieldUpdateOperationsInput
  wikiDataId: StringFieldUpdateOperationsInput
  state: StateUpdateOneWithoutCitiesNestedInput
  country: CountryUpdateOneWithoutCitiesNestedInput
  companies: CompanyUpdateManyWithoutAddressNestedInput
  jobs: JobUpdateManyWithoutAddressNestedInput
  resumes: ResumeUpdateManyWithoutAddressNestedInput
  workExperiences: WorkExperienceUpdateManyWithoutAddressNestedInput
}

input ResumeUpdateManyWithoutAddressNestedInput {
  create: [ResumeCreateWithoutAddressInput!]
  connectOrCreate: [ResumeCreateOrConnectWithoutAddressInput!]
  upsert: [ResumeUpsertWithWhereUniqueWithoutAddressInput!]
  createMany: ResumeCreateManyAddressInputEnvelope
  set: [ResumeWhereUniqueInput!]
  disconnect: [ResumeWhereUniqueInput!]
  delete: [ResumeWhereUniqueInput!]
  connect: [ResumeWhereUniqueInput!]
  update: [ResumeUpdateWithWhereUniqueWithoutAddressInput!]
  updateMany: [ResumeUpdateManyWithWhereWithoutAddressInput!]
  deleteMany: [ResumeScalarWhereInput!]
}

input ResumeUpsertWithWhereUniqueWithoutAddressInput {
  where: ResumeWhereUniqueInput!
  update: ResumeUpdateWithoutAddressInput!
  create: ResumeCreateWithoutAddressInput!
}

input ResumeUpdateWithoutAddressInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  fullName: NullableStringFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  addressDetail: NullableStringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  isSummary: NullableBoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutResumesNestedInput
  avatar: FileUpdateOneWithoutResumeNestedInput
  language: LanguageUpdateOneWithoutResumesNestedInput
  jobTitle: JobTitleUpdateOneRequiredWithoutResumesNestedInput
  applications: ApplicationUpdateManyWithoutResumeNestedInput
  workExperiences: WorkExperienceUpdateManyWithoutResumeNestedInput
  educations: EducationUpdateManyWithoutResumeNestedInput
  skills: SkillUpdateManyWithoutResumeNestedInput
  projects: ProjectUpdateManyWithoutResumeNestedInput
  socials: SocialUpdateManyWithoutResumeNestedInput
  languageSkills: LanguageSkillUpdateManyWithoutResumeNestedInput
  activities: ActivityUpdateManyWithoutResumeNestedInput
}

input SkillUpdateManyWithoutResumeNestedInput {
  create: [SkillCreateWithoutResumeInput!]
  connectOrCreate: [SkillCreateOrConnectWithoutResumeInput!]
  upsert: [SkillUpsertWithWhereUniqueWithoutResumeInput!]
  createMany: SkillCreateManyResumeInputEnvelope
  set: [SkillWhereUniqueInput!]
  disconnect: [SkillWhereUniqueInput!]
  delete: [SkillWhereUniqueInput!]
  connect: [SkillWhereUniqueInput!]
  update: [SkillUpdateWithWhereUniqueWithoutResumeInput!]
  updateMany: [SkillUpdateManyWithWhereWithoutResumeInput!]
  deleteMany: [SkillScalarWhereInput!]
}

input SkillUpsertWithWhereUniqueWithoutResumeInput {
  where: SkillWhereUniqueInput!
  update: SkillUpdateWithoutResumeInput!
  create: SkillCreateWithoutResumeInput!
}

input SkillUpdateWithoutResumeInput {
  id: StringFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  projects: ProjectUpdateManyWithoutTechStacksNestedInput
  jobs: JobUpdateManyWithoutSkillsNestedInput
}

input JobUpdateManyWithoutSkillsNestedInput {
  create: [JobCreateWithoutSkillsInput!]
  connectOrCreate: [JobCreateOrConnectWithoutSkillsInput!]
  upsert: [JobUpsertWithWhereUniqueWithoutSkillsInput!]
  set: [JobWhereUniqueInput!]
  disconnect: [JobWhereUniqueInput!]
  delete: [JobWhereUniqueInput!]
  connect: [JobWhereUniqueInput!]
  update: [JobUpdateWithWhereUniqueWithoutSkillsInput!]
  updateMany: [JobUpdateManyWithWhereWithoutSkillsInput!]
  deleteMany: [JobScalarWhereInput!]
}

input JobUpsertWithWhereUniqueWithoutSkillsInput {
  where: JobWhereUniqueInput!
  update: JobUpdateWithoutSkillsInput!
  create: JobCreateWithoutSkillsInput!
}

input JobUpdateWithoutSkillsInput {
  id: StringFieldUpdateOperationsInput
  type: EnumJobTypeFieldUpdateOperationsInput
  level: EnumJobLevelFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  addressDetail: NullableStringFieldUpdateOperationsInput
  salary: EnumJobSalaryFieldUpdateOperationsInput
  salaryMetadata: JSON
  description: StringFieldUpdateOperationsInput
  isBoot: NullableBoolFieldUpdateOperationsInput
  numberOfRecruits: IntFieldUpdateOperationsInput
  applicationDeadline: DateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  address: CityUpdateOneRequiredWithoutJobsNestedInput
  jobTitle: JobTitleUpdateOneRequiredWithoutJobsNestedInput
  jobCategory: JobCategoryUpdateOneRequiredWithoutJobsNestedInput
  company: CompanyUpdateOneRequiredWithoutJobsNestedInput
  tags: TagUpdateManyWithoutJobsNestedInput
  applications: ApplicationUpdateManyWithoutJobNestedInput
  saveJobs: SaveJobUpdateManyWithoutJobNestedInput
}

input SaveJobUpdateManyWithoutJobNestedInput {
  create: [SaveJobCreateWithoutJobInput!]
  connectOrCreate: [SaveJobCreateOrConnectWithoutJobInput!]
  upsert: [SaveJobUpsertWithWhereUniqueWithoutJobInput!]
  createMany: SaveJobCreateManyJobInputEnvelope
  set: [SaveJobWhereUniqueInput!]
  disconnect: [SaveJobWhereUniqueInput!]
  delete: [SaveJobWhereUniqueInput!]
  connect: [SaveJobWhereUniqueInput!]
  update: [SaveJobUpdateWithWhereUniqueWithoutJobInput!]
  updateMany: [SaveJobUpdateManyWithWhereWithoutJobInput!]
  deleteMany: [SaveJobScalarWhereInput!]
}

input SaveJobUpsertWithWhereUniqueWithoutJobInput {
  where: SaveJobWhereUniqueInput!
  update: SaveJobUpdateWithoutJobInput!
  create: SaveJobCreateWithoutJobInput!
}

input SaveJobUpdateWithoutJobInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutSaveJobsNestedInput
}

input UserUpdateOneRequiredWithoutSaveJobsNestedInput {
  create: UserCreateWithoutSaveJobsInput
  connectOrCreate: UserCreateOrConnectWithoutSaveJobsInput
  upsert: UserUpsertWithoutSaveJobsInput
  connect: UserWhereUniqueInput
  update: UserUpdateToOneWithWhereWithoutSaveJobsInput
}

input UserUpsertWithoutSaveJobsInput {
  update: UserUpdateWithoutSaveJobsInput!
  create: UserCreateWithoutSaveJobsInput!
  where: UserWhereInput
}

input UserUpdateWithoutSaveJobsInput {
  id: StringFieldUpdateOperationsInput
  avatarUrl: NullableStringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  emailVerified: BoolFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  phoneNumber: NullableStringFieldUpdateOperationsInput
  workingPosition: NullableEnumWorkPositionFieldUpdateOperationsInput
  status: EnumUserStatusFieldUpdateOperationsInput
  signInProvider: NullableEnumSignInProviderFieldUpdateOperationsInput
  color: NullableStringFieldUpdateOperationsInput
  role: EnumUserRoleFieldUpdateOperationsInput
  addressDetail: NullableStringFieldUpdateOperationsInput
  verifyCode: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  avatar: FileUpdateOneWithoutUsersNestedInput
  country: CountryUpdateOneWithoutUsersNestedInput
  social: SocialUpdateManyWithoutUserNestedInput
  resumes: ResumeUpdateManyWithoutUserNestedInput
  workExperiences: WorkExperienceUpdateManyWithoutUserNestedInput
  educations: EducationUpdateManyWithoutUserNestedInput
  projects: ProjectUpdateManyWithoutUserNestedInput
  applications: ApplicationUpdateManyWithoutCandidateNestedInput
  posts: PostUpdateManyWithoutAuthorNestedInput
  likes: LikePostUpdateManyWithoutUserNestedInput
  dislikes: DislikePostUpdateManyWithoutUserNestedInput
  comments: CommentUpdateManyWithoutUserNestedInput
  bookmarks: BookmarkPostUpdateManyWithoutUserNestedInput
  payments: PaymentUpdateManyWithoutUserNestedInput
  address: UsersOnCityUpdateManyWithoutUserNestedInput
  companies: CompanyUpdateManyWithoutUserNestedInput
  authorSettings: SettingUpdateManyWithoutAuthorNestedInput
  updatedBySettings: SettingUpdateManyWithoutUpdatedByNestedInput
}

input CompanyUpdateManyWithoutUserNestedInput {
  create: [CompanyCreateWithoutUserInput!]
  connectOrCreate: [CompanyCreateOrConnectWithoutUserInput!]
  upsert: [CompanyUpsertWithWhereUniqueWithoutUserInput!]
  createMany: CompanyCreateManyUserInputEnvelope
  set: [CompanyWhereUniqueInput!]
  disconnect: [CompanyWhereUniqueInput!]
  delete: [CompanyWhereUniqueInput!]
  connect: [CompanyWhereUniqueInput!]
  update: [CompanyUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [CompanyUpdateManyWithWhereWithoutUserInput!]
  deleteMany: [CompanyScalarWhereInput!]
}

input CompanyUpsertWithWhereUniqueWithoutUserInput {
  where: CompanyWhereUniqueInput!
  update: CompanyUpdateWithoutUserInput!
  create: CompanyCreateWithoutUserInput!
}

input CompanyUpdateWithoutUserInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  addressDetail: StringFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  avatar: FileUpdateOneWithoutCompanyNestedInput
  type: CompanyTypeUpdateOneWithoutCompaniesNestedInput
  size: CompanySizeUpdateOneWithoutCompaniesNestedInput
  photos: FileUpdateManyWithoutCompaniesNestedInput
  address: CityUpdateOneRequiredWithoutCompaniesNestedInput
  industries: JobCategoryUpdateManyWithoutCompaniesNestedInput
  social: SocialUpdateManyWithoutCompanyNestedInput
  jobs: JobUpdateManyWithoutCompanyNestedInput
  workExperiences: WorkExperienceUpdateManyWithoutCompanyNestedInput
  projects: ProjectUpdateManyWithoutCompanyNestedInput
  references: ReferenceUpdateManyWithoutCompanyNestedInput
}

input ReferenceUpdateManyWithoutCompanyNestedInput {
  create: [ReferenceCreateWithoutCompanyInput!]
  connectOrCreate: [ReferenceCreateOrConnectWithoutCompanyInput!]
  upsert: [ReferenceUpsertWithWhereUniqueWithoutCompanyInput!]
  createMany: ReferenceCreateManyCompanyInputEnvelope
  set: [ReferenceWhereUniqueInput!]
  disconnect: [ReferenceWhereUniqueInput!]
  delete: [ReferenceWhereUniqueInput!]
  connect: [ReferenceWhereUniqueInput!]
  update: [ReferenceUpdateWithWhereUniqueWithoutCompanyInput!]
  updateMany: [ReferenceUpdateManyWithWhereWithoutCompanyInput!]
  deleteMany: [ReferenceScalarWhereInput!]
}

input ReferenceUpsertWithWhereUniqueWithoutCompanyInput {
  where: ReferenceWhereUniqueInput!
  update: ReferenceUpdateWithoutCompanyInput!
  create: ReferenceCreateWithoutCompanyInput!
}

input ReferenceUpdateWithoutCompanyInput {
  id: StringFieldUpdateOperationsInput
  fullName: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  phoneNumber: NullableStringFieldUpdateOperationsInput
  phoneCode: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
}

input ReferenceUpdateWithWhereUniqueWithoutCompanyInput {
  where: ReferenceWhereUniqueInput!
  data: ReferenceUpdateWithoutCompanyInput!
}

input ReferenceUpdateManyWithWhereWithoutCompanyInput {
  where: ReferenceScalarWhereInput!
  data: ReferenceUpdateManyMutationInput!
}

input ReferenceScalarWhereInput {
  AND: [ReferenceScalarWhereInput!]
  OR: [ReferenceScalarWhereInput!]
  NOT: [ReferenceScalarWhereInput!]
  id: StringFilter
  fullName: StringFilter
  email: StringFilter
  phoneNumber: StringNullableFilter
  phoneCode: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  companyId: StringFilter
}

input ReferenceUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  fullName: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  phoneNumber: NullableStringFieldUpdateOperationsInput
  phoneCode: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
}

input CompanyUpdateWithWhereUniqueWithoutUserInput {
  where: CompanyWhereUniqueInput!
  data: CompanyUpdateWithoutUserInput!
}

input CompanyUpdateManyWithWhereWithoutUserInput {
  where: CompanyScalarWhereInput!
  data: CompanyUpdateManyMutationInput!
}

input CompanyScalarWhereInput {
  AND: [CompanyScalarWhereInput!]
  OR: [CompanyScalarWhereInput!]
  NOT: [CompanyScalarWhereInput!]
  id: StringFilter
  name: StringFilter
  slug: StringFilter
  avatarId: StringNullableFilter
  companyTypeId: StringNullableFilter
  companySizeId: StringNullableFilter
  addressDetail: StringFilter
  cityId: IntFilter
  description: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  userId: StringNullableFilter
}

input CompanyUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  addressDetail: StringFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
}

input SettingUpdateManyWithoutAuthorNestedInput {
  create: [SettingCreateWithoutAuthorInput!]
  connectOrCreate: [SettingCreateOrConnectWithoutAuthorInput!]
  upsert: [SettingUpsertWithWhereUniqueWithoutAuthorInput!]
  createMany: SettingCreateManyAuthorInputEnvelope
  set: [SettingWhereUniqueInput!]
  disconnect: [SettingWhereUniqueInput!]
  delete: [SettingWhereUniqueInput!]
  connect: [SettingWhereUniqueInput!]
  update: [SettingUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [SettingUpdateManyWithWhereWithoutAuthorInput!]
  deleteMany: [SettingScalarWhereInput!]
}

input SettingUpsertWithWhereUniqueWithoutAuthorInput {
  where: SettingWhereUniqueInput!
  update: SettingUpdateWithoutAuthorInput!
  create: SettingCreateWithoutAuthorInput!
}

input SettingUpdateWithoutAuthorInput {
  key: StringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
  value: JSON
  showWith: SettingUpdateshowWithInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  updatedBy: UserUpdateOneWithoutUpdatedBySettingsNestedInput
}

input SettingUpdateshowWithInput {
  set: [UserRole!]
  push: [UserRole!]
}

input UserUpdateOneWithoutUpdatedBySettingsNestedInput {
  create: UserCreateWithoutUpdatedBySettingsInput
  connectOrCreate: UserCreateOrConnectWithoutUpdatedBySettingsInput
  upsert: UserUpsertWithoutUpdatedBySettingsInput
  disconnect: UserWhereInput
  delete: UserWhereInput
  connect: UserWhereUniqueInput
  update: UserUpdateToOneWithWhereWithoutUpdatedBySettingsInput
}

input UserUpsertWithoutUpdatedBySettingsInput {
  update: UserUpdateWithoutUpdatedBySettingsInput!
  create: UserCreateWithoutUpdatedBySettingsInput!
  where: UserWhereInput
}

input UserUpdateWithoutUpdatedBySettingsInput {
  id: StringFieldUpdateOperationsInput
  avatarUrl: NullableStringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  emailVerified: BoolFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  phoneNumber: NullableStringFieldUpdateOperationsInput
  workingPosition: NullableEnumWorkPositionFieldUpdateOperationsInput
  status: EnumUserStatusFieldUpdateOperationsInput
  signInProvider: NullableEnumSignInProviderFieldUpdateOperationsInput
  color: NullableStringFieldUpdateOperationsInput
  role: EnumUserRoleFieldUpdateOperationsInput
  addressDetail: NullableStringFieldUpdateOperationsInput
  verifyCode: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  avatar: FileUpdateOneWithoutUsersNestedInput
  country: CountryUpdateOneWithoutUsersNestedInput
  social: SocialUpdateManyWithoutUserNestedInput
  resumes: ResumeUpdateManyWithoutUserNestedInput
  workExperiences: WorkExperienceUpdateManyWithoutUserNestedInput
  educations: EducationUpdateManyWithoutUserNestedInput
  projects: ProjectUpdateManyWithoutUserNestedInput
  applications: ApplicationUpdateManyWithoutCandidateNestedInput
  posts: PostUpdateManyWithoutAuthorNestedInput
  likes: LikePostUpdateManyWithoutUserNestedInput
  dislikes: DislikePostUpdateManyWithoutUserNestedInput
  comments: CommentUpdateManyWithoutUserNestedInput
  bookmarks: BookmarkPostUpdateManyWithoutUserNestedInput
  saveJobs: SaveJobUpdateManyWithoutUserNestedInput
  payments: PaymentUpdateManyWithoutUserNestedInput
  address: UsersOnCityUpdateManyWithoutUserNestedInput
  companies: CompanyUpdateManyWithoutUserNestedInput
  authorSettings: SettingUpdateManyWithoutAuthorNestedInput
}

input UserUpdateToOneWithWhereWithoutUpdatedBySettingsInput {
  where: UserWhereInput
  data: UserUpdateWithoutUpdatedBySettingsInput!
}

input SettingUpdateWithWhereUniqueWithoutAuthorInput {
  where: SettingWhereUniqueInput!
  data: SettingUpdateWithoutAuthorInput!
}

input SettingUpdateManyWithWhereWithoutAuthorInput {
  where: SettingScalarWhereInput!
  data: SettingUpdateManyMutationInput!
}

input SettingScalarWhereInput {
  AND: [SettingScalarWhereInput!]
  OR: [SettingScalarWhereInput!]
  NOT: [SettingScalarWhereInput!]
  key: StringFilter
  type: StringFilter
  value: JsonFilter
  authorId: StringNullableFilter
  showWith: EnumUserRoleNullableListFilter
  updatedById: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
}

input SettingUpdateManyMutationInput {
  key: StringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
  value: JSON
  showWith: SettingUpdateshowWithInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
}

input SettingUpdateManyWithoutUpdatedByNestedInput {
  create: [SettingCreateWithoutUpdatedByInput!]
  connectOrCreate: [SettingCreateOrConnectWithoutUpdatedByInput!]
  upsert: [SettingUpsertWithWhereUniqueWithoutUpdatedByInput!]
  createMany: SettingCreateManyUpdatedByInputEnvelope
  set: [SettingWhereUniqueInput!]
  disconnect: [SettingWhereUniqueInput!]
  delete: [SettingWhereUniqueInput!]
  connect: [SettingWhereUniqueInput!]
  update: [SettingUpdateWithWhereUniqueWithoutUpdatedByInput!]
  updateMany: [SettingUpdateManyWithWhereWithoutUpdatedByInput!]
  deleteMany: [SettingScalarWhereInput!]
}

input SettingUpsertWithWhereUniqueWithoutUpdatedByInput {
  where: SettingWhereUniqueInput!
  update: SettingUpdateWithoutUpdatedByInput!
  create: SettingCreateWithoutUpdatedByInput!
}

input SettingUpdateWithoutUpdatedByInput {
  key: StringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
  value: JSON
  showWith: SettingUpdateshowWithInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  author: UserUpdateOneWithoutAuthorSettingsNestedInput
}

input UserUpdateOneWithoutAuthorSettingsNestedInput {
  create: UserCreateWithoutAuthorSettingsInput
  connectOrCreate: UserCreateOrConnectWithoutAuthorSettingsInput
  upsert: UserUpsertWithoutAuthorSettingsInput
  disconnect: UserWhereInput
  delete: UserWhereInput
  connect: UserWhereUniqueInput
  update: UserUpdateToOneWithWhereWithoutAuthorSettingsInput
}

input UserUpsertWithoutAuthorSettingsInput {
  update: UserUpdateWithoutAuthorSettingsInput!
  create: UserCreateWithoutAuthorSettingsInput!
  where: UserWhereInput
}

input UserUpdateWithoutAuthorSettingsInput {
  id: StringFieldUpdateOperationsInput
  avatarUrl: NullableStringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  emailVerified: BoolFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  phoneNumber: NullableStringFieldUpdateOperationsInput
  workingPosition: NullableEnumWorkPositionFieldUpdateOperationsInput
  status: EnumUserStatusFieldUpdateOperationsInput
  signInProvider: NullableEnumSignInProviderFieldUpdateOperationsInput
  color: NullableStringFieldUpdateOperationsInput
  role: EnumUserRoleFieldUpdateOperationsInput
  addressDetail: NullableStringFieldUpdateOperationsInput
  verifyCode: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  avatar: FileUpdateOneWithoutUsersNestedInput
  country: CountryUpdateOneWithoutUsersNestedInput
  social: SocialUpdateManyWithoutUserNestedInput
  resumes: ResumeUpdateManyWithoutUserNestedInput
  workExperiences: WorkExperienceUpdateManyWithoutUserNestedInput
  educations: EducationUpdateManyWithoutUserNestedInput
  projects: ProjectUpdateManyWithoutUserNestedInput
  applications: ApplicationUpdateManyWithoutCandidateNestedInput
  posts: PostUpdateManyWithoutAuthorNestedInput
  likes: LikePostUpdateManyWithoutUserNestedInput
  dislikes: DislikePostUpdateManyWithoutUserNestedInput
  comments: CommentUpdateManyWithoutUserNestedInput
  bookmarks: BookmarkPostUpdateManyWithoutUserNestedInput
  saveJobs: SaveJobUpdateManyWithoutUserNestedInput
  payments: PaymentUpdateManyWithoutUserNestedInput
  address: UsersOnCityUpdateManyWithoutUserNestedInput
  companies: CompanyUpdateManyWithoutUserNestedInput
  updatedBySettings: SettingUpdateManyWithoutUpdatedByNestedInput
}

input UserUpdateToOneWithWhereWithoutAuthorSettingsInput {
  where: UserWhereInput
  data: UserUpdateWithoutAuthorSettingsInput!
}

input SettingUpdateWithWhereUniqueWithoutUpdatedByInput {
  where: SettingWhereUniqueInput!
  data: SettingUpdateWithoutUpdatedByInput!
}

input SettingUpdateManyWithWhereWithoutUpdatedByInput {
  where: SettingScalarWhereInput!
  data: SettingUpdateManyMutationInput!
}

input UserUpdateToOneWithWhereWithoutSaveJobsInput {
  where: UserWhereInput
  data: UserUpdateWithoutSaveJobsInput!
}

input SaveJobUpdateWithWhereUniqueWithoutJobInput {
  where: SaveJobWhereUniqueInput!
  data: SaveJobUpdateWithoutJobInput!
}

input SaveJobUpdateManyWithWhereWithoutJobInput {
  where: SaveJobScalarWhereInput!
  data: SaveJobUpdateManyMutationInput!
}

input SaveJobScalarWhereInput {
  AND: [SaveJobScalarWhereInput!]
  OR: [SaveJobScalarWhereInput!]
  NOT: [SaveJobScalarWhereInput!]
  id: StringFilter
  userId: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  jobId: StringFilter
}

input SaveJobUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
}

input JobUpdateWithWhereUniqueWithoutSkillsInput {
  where: JobWhereUniqueInput!
  data: JobUpdateWithoutSkillsInput!
}

input JobUpdateManyWithWhereWithoutSkillsInput {
  where: JobScalarWhereInput!
  data: JobUpdateManyMutationInput!
}

input JobScalarWhereInput {
  AND: [JobScalarWhereInput!]
  OR: [JobScalarWhereInput!]
  NOT: [JobScalarWhereInput!]
  id: StringFilter
  type: EnumJobTypeFilter
  level: EnumJobLevelFilter
  slug: StringFilter
  addressDetail: StringNullableFilter
  jobTitleId: StringFilter
  jobCategoryId: StringFilter
  companyId: StringFilter
  cityId: IntFilter
  salary: EnumJobSalaryFilter
  salaryMetadata: JsonNullableFilter
  description: StringFilter
  isBoot: BoolNullableFilter
  numberOfRecruits: IntFilter
  applicationDeadline: DateTimeFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
}

input JobUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  type: EnumJobTypeFieldUpdateOperationsInput
  level: EnumJobLevelFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  addressDetail: NullableStringFieldUpdateOperationsInput
  salary: EnumJobSalaryFieldUpdateOperationsInput
  salaryMetadata: JSON
  description: StringFieldUpdateOperationsInput
  isBoot: NullableBoolFieldUpdateOperationsInput
  numberOfRecruits: IntFieldUpdateOperationsInput
  applicationDeadline: DateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
}

input SkillUpdateWithWhereUniqueWithoutResumeInput {
  where: SkillWhereUniqueInput!
  data: SkillUpdateWithoutResumeInput!
}

input SkillUpdateManyWithWhereWithoutResumeInput {
  where: SkillScalarWhereInput!
  data: SkillUpdateManyMutationInput!
}

input SkillScalarWhereInput {
  AND: [SkillScalarWhereInput!]
  OR: [SkillScalarWhereInput!]
  NOT: [SkillScalarWhereInput!]
  id: StringFilter
  content: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  resumeId: StringNullableFilter
}

input SkillUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
}

input ProjectUpdateManyWithoutResumeNestedInput {
  create: [ProjectCreateWithoutResumeInput!]
  connectOrCreate: [ProjectCreateOrConnectWithoutResumeInput!]
  upsert: [ProjectUpsertWithWhereUniqueWithoutResumeInput!]
  createMany: ProjectCreateManyResumeInputEnvelope
  set: [ProjectWhereUniqueInput!]
  disconnect: [ProjectWhereUniqueInput!]
  delete: [ProjectWhereUniqueInput!]
  connect: [ProjectWhereUniqueInput!]
  update: [ProjectUpdateWithWhereUniqueWithoutResumeInput!]
  updateMany: [ProjectUpdateManyWithWhereWithoutResumeInput!]
  deleteMany: [ProjectScalarWhereInput!]
}

input ProjectUpsertWithWhereUniqueWithoutResumeInput {
  where: ProjectWhereUniqueInput!
  update: ProjectUpdateWithoutResumeInput!
  create: ProjectCreateWithoutResumeInput!
}

input ProjectUpdateWithoutResumeInput {
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  teamSize: IntFieldUpdateOperationsInput
  role: ProjectUpdateroleInput
  startAt: DateTimeFieldUpdateOperationsInput
  endAt: NullableDateTimeFieldUpdateOperationsInput
  refeUrls: ProjectUpdaterefeUrlsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  techStacks: SkillUpdateManyWithoutProjectsNestedInput
  company: CompanyUpdateOneRequiredWithoutProjectsNestedInput
  thumbnail: FileUpdateOneWithoutProjectsNestedInput
  user: UserUpdateOneRequiredWithoutProjectsNestedInput
}

input ProjectUpdateWithWhereUniqueWithoutResumeInput {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateWithoutResumeInput!
}

input ProjectUpdateManyWithWhereWithoutResumeInput {
  where: ProjectScalarWhereInput!
  data: ProjectUpdateManyMutationInput!
}

input ProjectScalarWhereInput {
  AND: [ProjectScalarWhereInput!]
  OR: [ProjectScalarWhereInput!]
  NOT: [ProjectScalarWhereInput!]
  id: StringFilter
  title: StringFilter
  description: StringFilter
  teamSize: IntFilter
  role: StringNullableListFilter
  startAt: DateTimeFilter
  endAt: DateTimeNullableFilter
  refeUrls: StringNullableListFilter
  thumbnailId: StringNullableFilter
  companyId: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  userId: StringFilter
  resumeId: StringNullableFilter
}

input ProjectUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  teamSize: IntFieldUpdateOperationsInput
  role: ProjectUpdateroleInput
  startAt: DateTimeFieldUpdateOperationsInput
  endAt: NullableDateTimeFieldUpdateOperationsInput
  refeUrls: ProjectUpdaterefeUrlsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
}

input SocialUpdateManyWithoutResumeNestedInput {
  create: [SocialCreateWithoutResumeInput!]
  connectOrCreate: [SocialCreateOrConnectWithoutResumeInput!]
  upsert: [SocialUpsertWithWhereUniqueWithoutResumeInput!]
  createMany: SocialCreateManyResumeInputEnvelope
  set: [SocialWhereUniqueInput!]
  disconnect: [SocialWhereUniqueInput!]
  delete: [SocialWhereUniqueInput!]
  connect: [SocialWhereUniqueInput!]
  update: [SocialUpdateWithWhereUniqueWithoutResumeInput!]
  updateMany: [SocialUpdateManyWithWhereWithoutResumeInput!]
  deleteMany: [SocialScalarWhereInput!]
}

input SocialUpsertWithWhereUniqueWithoutResumeInput {
  where: SocialWhereUniqueInput!
  update: SocialUpdateWithoutResumeInput!
  create: SocialCreateWithoutResumeInput!
}

input SocialUpdateWithoutResumeInput {
  id: StringFieldUpdateOperationsInput
  type: NullableEnumSocialTypeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  company: CompanyUpdateOneWithoutSocialNestedInput
  user: UserUpdateOneWithoutSocialNestedInput
}

input SocialUpdateWithWhereUniqueWithoutResumeInput {
  where: SocialWhereUniqueInput!
  data: SocialUpdateWithoutResumeInput!
}

input SocialUpdateManyWithWhereWithoutResumeInput {
  where: SocialScalarWhereInput!
  data: SocialUpdateManyMutationInput!
}

input SocialScalarWhereInput {
  AND: [SocialScalarWhereInput!]
  OR: [SocialScalarWhereInput!]
  NOT: [SocialScalarWhereInput!]
  id: StringFilter
  type: EnumSocialTypeNullableFilter
  url: StringFilter
  companyId: StringNullableFilter
  userId: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  resumeId: StringNullableFilter
}

input SocialUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  type: NullableEnumSocialTypeFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
}

input LanguageSkillUpdateManyWithoutResumeNestedInput {
  create: [LanguageSkillCreateWithoutResumeInput!]
  connectOrCreate: [LanguageSkillCreateOrConnectWithoutResumeInput!]
  upsert: [LanguageSkillUpsertWithWhereUniqueWithoutResumeInput!]
  createMany: LanguageSkillCreateManyResumeInputEnvelope
  set: [LanguageSkillWhereUniqueInput!]
  disconnect: [LanguageSkillWhereUniqueInput!]
  delete: [LanguageSkillWhereUniqueInput!]
  connect: [LanguageSkillWhereUniqueInput!]
  update: [LanguageSkillUpdateWithWhereUniqueWithoutResumeInput!]
  updateMany: [LanguageSkillUpdateManyWithWhereWithoutResumeInput!]
  deleteMany: [LanguageSkillScalarWhereInput!]
}

input LanguageSkillUpsertWithWhereUniqueWithoutResumeInput {
  where: LanguageSkillWhereUniqueInput!
  update: LanguageSkillUpdateWithoutResumeInput!
  create: LanguageSkillCreateWithoutResumeInput!
}

input LanguageSkillUpdateWithoutResumeInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  locale: StringFieldUpdateOperationsInput
  proficiencyLevel: EnumProficiencyLevelFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  language: LanguageUpdateOneRequiredWithoutLanguageSkillNestedInput
}

input LanguageUpdateOneRequiredWithoutLanguageSkillNestedInput {
  create: LanguageCreateWithoutLanguageSkillInput
  connectOrCreate: LanguageCreateOrConnectWithoutLanguageSkillInput
  upsert: LanguageUpsertWithoutLanguageSkillInput
  connect: LanguageWhereUniqueInput
  update: LanguageUpdateToOneWithWhereWithoutLanguageSkillInput
}

input LanguageUpsertWithoutLanguageSkillInput {
  update: LanguageUpdateWithoutLanguageSkillInput!
  create: LanguageCreateWithoutLanguageSkillInput!
  where: LanguageWhereInput
}

input LanguageUpdateWithoutLanguageSkillInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  locale: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  resumes: ResumeUpdateManyWithoutLanguageNestedInput
}

input ResumeUpdateManyWithoutLanguageNestedInput {
  create: [ResumeCreateWithoutLanguageInput!]
  connectOrCreate: [ResumeCreateOrConnectWithoutLanguageInput!]
  upsert: [ResumeUpsertWithWhereUniqueWithoutLanguageInput!]
  createMany: ResumeCreateManyLanguageInputEnvelope
  set: [ResumeWhereUniqueInput!]
  disconnect: [ResumeWhereUniqueInput!]
  delete: [ResumeWhereUniqueInput!]
  connect: [ResumeWhereUniqueInput!]
  update: [ResumeUpdateWithWhereUniqueWithoutLanguageInput!]
  updateMany: [ResumeUpdateManyWithWhereWithoutLanguageInput!]
  deleteMany: [ResumeScalarWhereInput!]
}

input ResumeUpsertWithWhereUniqueWithoutLanguageInput {
  where: ResumeWhereUniqueInput!
  update: ResumeUpdateWithoutLanguageInput!
  create: ResumeCreateWithoutLanguageInput!
}

input ResumeUpdateWithoutLanguageInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  fullName: NullableStringFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  addressDetail: NullableStringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  isSummary: NullableBoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutResumesNestedInput
  avatar: FileUpdateOneWithoutResumeNestedInput
  address: CityUpdateOneWithoutResumesNestedInput
  jobTitle: JobTitleUpdateOneRequiredWithoutResumesNestedInput
  applications: ApplicationUpdateManyWithoutResumeNestedInput
  workExperiences: WorkExperienceUpdateManyWithoutResumeNestedInput
  educations: EducationUpdateManyWithoutResumeNestedInput
  skills: SkillUpdateManyWithoutResumeNestedInput
  projects: ProjectUpdateManyWithoutResumeNestedInput
  socials: SocialUpdateManyWithoutResumeNestedInput
  languageSkills: LanguageSkillUpdateManyWithoutResumeNestedInput
  activities: ActivityUpdateManyWithoutResumeNestedInput
}

input ActivityUpdateManyWithoutResumeNestedInput {
  create: [ActivityCreateWithoutResumeInput!]
  connectOrCreate: [ActivityCreateOrConnectWithoutResumeInput!]
  upsert: [ActivityUpsertWithWhereUniqueWithoutResumeInput!]
  createMany: ActivityCreateManyResumeInputEnvelope
  set: [ActivityWhereUniqueInput!]
  disconnect: [ActivityWhereUniqueInput!]
  delete: [ActivityWhereUniqueInput!]
  connect: [ActivityWhereUniqueInput!]
  update: [ActivityUpdateWithWhereUniqueWithoutResumeInput!]
  updateMany: [ActivityUpdateManyWithWhereWithoutResumeInput!]
  deleteMany: [ActivityScalarWhereInput!]
}

input ActivityUpsertWithWhereUniqueWithoutResumeInput {
  where: ActivityWhereUniqueInput!
  update: ActivityUpdateWithoutResumeInput!
  create: ActivityCreateWithoutResumeInput!
}

input ActivityUpdateWithoutResumeInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  startAt: DateTimeFieldUpdateOperationsInput
  endAt: NullableDateTimeFieldUpdateOperationsInput
  descriotion: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
}

input ActivityUpdateWithWhereUniqueWithoutResumeInput {
  where: ActivityWhereUniqueInput!
  data: ActivityUpdateWithoutResumeInput!
}

input ActivityUpdateManyWithWhereWithoutResumeInput {
  where: ActivityScalarWhereInput!
  data: ActivityUpdateManyMutationInput!
}

input ActivityScalarWhereInput {
  AND: [ActivityScalarWhereInput!]
  OR: [ActivityScalarWhereInput!]
  NOT: [ActivityScalarWhereInput!]
  id: StringFilter
  name: StringFilter
  startAt: DateTimeFilter
  endAt: DateTimeNullableFilter
  descriotion: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  resumeId: StringNullableFilter
}

input ActivityUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  startAt: DateTimeFieldUpdateOperationsInput
  endAt: NullableDateTimeFieldUpdateOperationsInput
  descriotion: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
}

input ResumeUpdateWithWhereUniqueWithoutLanguageInput {
  where: ResumeWhereUniqueInput!
  data: ResumeUpdateWithoutLanguageInput!
}

input ResumeUpdateManyWithWhereWithoutLanguageInput {
  where: ResumeScalarWhereInput!
  data: ResumeUpdateManyMutationInput!
}

input ResumeScalarWhereInput {
  AND: [ResumeScalarWhereInput!]
  OR: [ResumeScalarWhereInput!]
  NOT: [ResumeScalarWhereInput!]
  id: StringFilter
  name: StringFilter
  fullName: StringNullableFilter
  email: StringNullableFilter
  addressDetail: StringNullableFilter
  description: StringFilter
  isSummary: BoolNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  languageId: StringFilter
  jobTitleId: StringFilter
  userId: StringFilter
  fileId: StringNullableFilter
  cityId: IntNullableFilter
}

input ResumeUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  fullName: NullableStringFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  addressDetail: NullableStringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  isSummary: NullableBoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
}

input LanguageUpdateToOneWithWhereWithoutLanguageSkillInput {
  where: LanguageWhereInput
  data: LanguageUpdateWithoutLanguageSkillInput!
}

input LanguageSkillUpdateWithWhereUniqueWithoutResumeInput {
  where: LanguageSkillWhereUniqueInput!
  data: LanguageSkillUpdateWithoutResumeInput!
}

input LanguageSkillUpdateManyWithWhereWithoutResumeInput {
  where: LanguageSkillScalarWhereInput!
  data: LanguageSkillUpdateManyMutationInput!
}

input LanguageSkillScalarWhereInput {
  AND: [LanguageSkillScalarWhereInput!]
  OR: [LanguageSkillScalarWhereInput!]
  NOT: [LanguageSkillScalarWhereInput!]
  id: StringFilter
  name: StringFilter
  locale: StringFilter
  proficiencyLevel: EnumProficiencyLevelFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  languageId: StringFilter
  resumeId: StringNullableFilter
}

input LanguageSkillUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  locale: StringFieldUpdateOperationsInput
  proficiencyLevel: EnumProficiencyLevelFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
}

input ResumeUpdateWithWhereUniqueWithoutAddressInput {
  where: ResumeWhereUniqueInput!
  data: ResumeUpdateWithoutAddressInput!
}

input ResumeUpdateManyWithWhereWithoutAddressInput {
  where: ResumeScalarWhereInput!
  data: ResumeUpdateManyMutationInput!
}

input WorkExperienceUpdateManyWithoutAddressNestedInput {
  create: [WorkExperienceCreateWithoutAddressInput!]
  connectOrCreate: [WorkExperienceCreateOrConnectWithoutAddressInput!]
  upsert: [WorkExperienceUpsertWithWhereUniqueWithoutAddressInput!]
  createMany: WorkExperienceCreateManyAddressInputEnvelope
  set: [WorkExperienceWhereUniqueInput!]
  disconnect: [WorkExperienceWhereUniqueInput!]
  delete: [WorkExperienceWhereUniqueInput!]
  connect: [WorkExperienceWhereUniqueInput!]
  update: [WorkExperienceUpdateWithWhereUniqueWithoutAddressInput!]
  updateMany: [WorkExperienceUpdateManyWithWhereWithoutAddressInput!]
  deleteMany: [WorkExperienceScalarWhereInput!]
}

input WorkExperienceUpsertWithWhereUniqueWithoutAddressInput {
  where: WorkExperienceWhereUniqueInput!
  update: WorkExperienceUpdateWithoutAddressInput!
  create: WorkExperienceCreateWithoutAddressInput!
}

input WorkExperienceUpdateWithoutAddressInput {
  id: StringFieldUpdateOperationsInput
  isFreelancer: NullableBoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  startAt: DateTimeFieldUpdateOperationsInput
  endAt: NullableDateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  jobTitle: JobTitleUpdateOneRequiredWithoutWorkExperiencesNestedInput
  user: UserUpdateOneRequiredWithoutWorkExperiencesNestedInput
  company: CompanyUpdateOneWithoutWorkExperiencesNestedInput
  resume: ResumeUpdateOneWithoutWorkExperiencesNestedInput
}

input WorkExperienceUpdateWithWhereUniqueWithoutAddressInput {
  where: WorkExperienceWhereUniqueInput!
  data: WorkExperienceUpdateWithoutAddressInput!
}

input WorkExperienceUpdateManyWithWhereWithoutAddressInput {
  where: WorkExperienceScalarWhereInput!
  data: WorkExperienceUpdateManyMutationInput!
}

input WorkExperienceScalarWhereInput {
  AND: [WorkExperienceScalarWhereInput!]
  OR: [WorkExperienceScalarWhereInput!]
  NOT: [WorkExperienceScalarWhereInput!]
  id: StringFilter
  isFreelancer: BoolNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  jobTitleId: StringFilter
  userId: StringFilter
  resumeId: StringNullableFilter
  companyId: StringNullableFilter
  cityId: IntNullableFilter
  startAt: DateTimeFilter
  endAt: DateTimeNullableFilter
  description: StringFilter
}

input WorkExperienceUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  isFreelancer: NullableBoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  startAt: DateTimeFieldUpdateOperationsInput
  endAt: NullableDateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
}

input CityUpdateToOneWithWhereWithoutUsersInput {
  where: CityWhereInput
  data: CityUpdateWithoutUsersInput!
}

input UsersOnCityUpdateWithWhereUniqueWithoutUserInput {
  where: UsersOnCityWhereUniqueInput!
  data: UsersOnCityUpdateWithoutUserInput!
}

input UsersOnCityUpdateManyWithWhereWithoutUserInput {
  where: UsersOnCityScalarWhereInput!
  data: UsersOnCityUpdateManyMutationInput!
}

input UsersOnCityScalarWhereInput {
  AND: [UsersOnCityScalarWhereInput!]
  OR: [UsersOnCityScalarWhereInput!]
  NOT: [UsersOnCityScalarWhereInput!]
  userId: StringFilter
  cityId: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
}

input UsersOnCityUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
}

input UserUpdateToOneWithWhereWithoutApplicationsInput {
  where: UserWhereInput
  data: UserUpdateWithoutApplicationsInput!
}

input ApplicationUpdateWithWhereUniqueWithoutJobInput {
  where: ApplicationWhereUniqueInput!
  data: ApplicationUpdateWithoutJobInput!
}

input ApplicationUpdateManyWithWhereWithoutJobInput {
  where: ApplicationScalarWhereInput!
  data: ApplicationUpdateManyMutationInput!
}

input ApplicationScalarWhereInput {
  AND: [ApplicationScalarWhereInput!]
  OR: [ApplicationScalarWhereInput!]
  NOT: [ApplicationScalarWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  status: EnumApplicationStatusNullableFilter
  type: EnumApplicationTypeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  resumeId: StringFilter
  jobId: StringFilter
  userId: StringFilter
}

input ApplicationUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  status: NullableEnumApplicationStatusFieldUpdateOperationsInput
  type: EnumApplicationTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
}

input JobUpdateToOneWithWhereWithoutSaveJobsInput {
  where: JobWhereInput
  data: JobUpdateWithoutSaveJobsInput!
}

input SaveJobUpdateWithWhereUniqueWithoutUserInput {
  where: SaveJobWhereUniqueInput!
  data: SaveJobUpdateWithoutUserInput!
}

input SaveJobUpdateManyWithWhereWithoutUserInput {
  where: SaveJobScalarWhereInput!
  data: SaveJobUpdateManyMutationInput!
}

input UserUpdateToOneWithWhereWithoutCommentsInput {
  where: UserWhereInput
  data: UserUpdateWithoutCommentsInput!
}

input CommentUpdateOneWithoutRepliesNestedInput {
  create: CommentCreateWithoutRepliesInput
  connectOrCreate: CommentCreateOrConnectWithoutRepliesInput
  upsert: CommentUpsertWithoutRepliesInput
  disconnect: CommentWhereInput
  delete: CommentWhereInput
  connect: CommentWhereUniqueInput
  update: CommentUpdateToOneWithWhereWithoutRepliesInput
}

input CommentUpsertWithoutRepliesInput {
  update: CommentUpdateWithoutRepliesInput!
  create: CommentCreateWithoutRepliesInput!
  where: CommentWhereInput
}

input CommentUpdateWithoutRepliesInput {
  id: StringFieldUpdateOperationsInput
  conent: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  isAnonymously: NullableBoolFieldUpdateOperationsInput
  post: PostUpdateOneRequiredWithoutCommentsNestedInput
  user: UserUpdateOneWithoutCommentsNestedInput
  parent: CommentUpdateOneWithoutRepliesNestedInput
  likes: LikePostUpdateManyWithoutCommentNestedInput
  dislikes: DislikePostUpdateManyWithoutCommentNestedInput
}

input LikePostUpdateManyWithoutCommentNestedInput {
  create: [LikePostCreateWithoutCommentInput!]
  connectOrCreate: [LikePostCreateOrConnectWithoutCommentInput!]
  upsert: [LikePostUpsertWithWhereUniqueWithoutCommentInput!]
  createMany: LikePostCreateManyCommentInputEnvelope
  set: [LikePostWhereUniqueInput!]
  disconnect: [LikePostWhereUniqueInput!]
  delete: [LikePostWhereUniqueInput!]
  connect: [LikePostWhereUniqueInput!]
  update: [LikePostUpdateWithWhereUniqueWithoutCommentInput!]
  updateMany: [LikePostUpdateManyWithWhereWithoutCommentInput!]
  deleteMany: [LikePostScalarWhereInput!]
}

input LikePostUpsertWithWhereUniqueWithoutCommentInput {
  where: LikePostWhereUniqueInput!
  update: LikePostUpdateWithoutCommentInput!
  create: LikePostCreateWithoutCommentInput!
}

input LikePostUpdateWithoutCommentInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  user: UserUpdateOneWithoutLikesNestedInput
  post: PostUpdateOneRequiredWithoutLikesNestedInput
}

input LikePostUpdateWithWhereUniqueWithoutCommentInput {
  where: LikePostWhereUniqueInput!
  data: LikePostUpdateWithoutCommentInput!
}

input LikePostUpdateManyWithWhereWithoutCommentInput {
  where: LikePostScalarWhereInput!
  data: LikePostUpdateManyMutationInput!
}

input LikePostScalarWhereInput {
  AND: [LikePostScalarWhereInput!]
  OR: [LikePostScalarWhereInput!]
  NOT: [LikePostScalarWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  userId: StringNullableFilter
  postId: StringFilter
  commentId: StringNullableFilter
}

input LikePostUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
}

input DislikePostUpdateManyWithoutCommentNestedInput {
  create: [DislikePostCreateWithoutCommentInput!]
  connectOrCreate: [DislikePostCreateOrConnectWithoutCommentInput!]
  upsert: [DislikePostUpsertWithWhereUniqueWithoutCommentInput!]
  createMany: DislikePostCreateManyCommentInputEnvelope
  set: [DislikePostWhereUniqueInput!]
  disconnect: [DislikePostWhereUniqueInput!]
  delete: [DislikePostWhereUniqueInput!]
  connect: [DislikePostWhereUniqueInput!]
  update: [DislikePostUpdateWithWhereUniqueWithoutCommentInput!]
  updateMany: [DislikePostUpdateManyWithWhereWithoutCommentInput!]
  deleteMany: [DislikePostScalarWhereInput!]
}

input DislikePostUpsertWithWhereUniqueWithoutCommentInput {
  where: DislikePostWhereUniqueInput!
  update: DislikePostUpdateWithoutCommentInput!
  create: DislikePostCreateWithoutCommentInput!
}

input DislikePostUpdateWithoutCommentInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  user: UserUpdateOneWithoutDislikesNestedInput
  post: PostUpdateOneRequiredWithoutDislikesNestedInput
}

input DislikePostUpdateWithWhereUniqueWithoutCommentInput {
  where: DislikePostWhereUniqueInput!
  data: DislikePostUpdateWithoutCommentInput!
}

input DislikePostUpdateManyWithWhereWithoutCommentInput {
  where: DislikePostScalarWhereInput!
  data: DislikePostUpdateManyMutationInput!
}

input DislikePostScalarWhereInput {
  AND: [DislikePostScalarWhereInput!]
  OR: [DislikePostScalarWhereInput!]
  NOT: [DislikePostScalarWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  userId: StringNullableFilter
  postId: StringFilter
  commentId: StringNullableFilter
}

input DislikePostUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
}

input CommentUpdateToOneWithWhereWithoutRepliesInput {
  where: CommentWhereInput
  data: CommentUpdateWithoutRepliesInput!
}

input CommentUpdateManyWithoutParentNestedInput {
  create: [CommentCreateWithoutParentInput!]
  connectOrCreate: [CommentCreateOrConnectWithoutParentInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutParentInput!]
  createMany: CommentCreateManyParentInputEnvelope
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  delete: [CommentWhereUniqueInput!]
  connect: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutParentInput!]
  updateMany: [CommentUpdateManyWithWhereWithoutParentInput!]
  deleteMany: [CommentScalarWhereInput!]
}

input CommentUpsertWithWhereUniqueWithoutParentInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutParentInput!
  create: CommentCreateWithoutParentInput!
}

input CommentUpdateWithoutParentInput {
  id: StringFieldUpdateOperationsInput
  conent: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  isAnonymously: NullableBoolFieldUpdateOperationsInput
  post: PostUpdateOneRequiredWithoutCommentsNestedInput
  user: UserUpdateOneWithoutCommentsNestedInput
  replies: CommentUpdateManyWithoutParentNestedInput
  likes: LikePostUpdateManyWithoutCommentNestedInput
  dislikes: DislikePostUpdateManyWithoutCommentNestedInput
}

input CommentUpdateWithWhereUniqueWithoutParentInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutParentInput!
}

input CommentUpdateManyWithWhereWithoutParentInput {
  where: CommentScalarWhereInput!
  data: CommentUpdateManyMutationInput!
}

input CommentScalarWhereInput {
  AND: [CommentScalarWhereInput!]
  OR: [CommentScalarWhereInput!]
  NOT: [CommentScalarWhereInput!]
  id: StringFilter
  userId: StringNullableFilter
  conent: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  postId: StringFilter
  isAnonymously: BoolNullableFilter
  parentId: StringNullableFilter
}

input CommentUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  conent: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  isAnonymously: NullableBoolFieldUpdateOperationsInput
}

input CommentUpdateWithWhereUniqueWithoutPostInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutPostInput!
}

input CommentUpdateManyWithWhereWithoutPostInput {
  where: CommentScalarWhereInput!
  data: CommentUpdateManyMutationInput!
}

input PostUpdateToOneWithWhereWithoutDislikesInput {
  where: PostWhereInput
  data: PostUpdateWithoutDislikesInput!
}

input CommentUpdateOneWithoutDislikesNestedInput {
  create: CommentCreateWithoutDislikesInput
  connectOrCreate: CommentCreateOrConnectWithoutDislikesInput
  upsert: CommentUpsertWithoutDislikesInput
  disconnect: CommentWhereInput
  delete: CommentWhereInput
  connect: CommentWhereUniqueInput
  update: CommentUpdateToOneWithWhereWithoutDislikesInput
}

input CommentUpsertWithoutDislikesInput {
  update: CommentUpdateWithoutDislikesInput!
  create: CommentCreateWithoutDislikesInput!
  where: CommentWhereInput
}

input CommentUpdateWithoutDislikesInput {
  id: StringFieldUpdateOperationsInput
  conent: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  isAnonymously: NullableBoolFieldUpdateOperationsInput
  post: PostUpdateOneRequiredWithoutCommentsNestedInput
  user: UserUpdateOneWithoutCommentsNestedInput
  parent: CommentUpdateOneWithoutRepliesNestedInput
  replies: CommentUpdateManyWithoutParentNestedInput
  likes: LikePostUpdateManyWithoutCommentNestedInput
}

input CommentUpdateToOneWithWhereWithoutDislikesInput {
  where: CommentWhereInput
  data: CommentUpdateWithoutDislikesInput!
}

input DislikePostUpdateWithWhereUniqueWithoutUserInput {
  where: DislikePostWhereUniqueInput!
  data: DislikePostUpdateWithoutUserInput!
}

input DislikePostUpdateManyWithWhereWithoutUserInput {
  where: DislikePostScalarWhereInput!
  data: DislikePostUpdateManyMutationInput!
}

input UserUpdateToOneWithWhereWithoutBookmarksInput {
  where: UserWhereInput
  data: UserUpdateWithoutBookmarksInput!
}

input BookmarkPostUpdateWithWhereUniqueWithoutPostInput {
  where: BookmarkPostWhereUniqueInput!
  data: BookmarkPostUpdateWithoutPostInput!
}

input BookmarkPostUpdateManyWithWhereWithoutPostInput {
  where: BookmarkPostScalarWhereInput!
  data: BookmarkPostUpdateManyMutationInput!
}

input PostUpdateToOneWithWhereWithoutCommentsInput {
  where: PostWhereInput
  data: PostUpdateWithoutCommentsInput!
}

input CommentUpdateWithWhereUniqueWithoutUserInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutUserInput!
}

input CommentUpdateManyWithWhereWithoutUserInput {
  where: CommentScalarWhereInput!
  data: CommentUpdateManyMutationInput!
}

input UserUpdateToOneWithWhereWithoutDislikesInput {
  where: UserWhereInput
  data: UserUpdateWithoutDislikesInput!
}

input DislikePostUpdateWithWhereUniqueWithoutPostInput {
  where: DislikePostWhereUniqueInput!
  data: DislikePostUpdateWithoutPostInput!
}

input DislikePostUpdateManyWithWhereWithoutPostInput {
  where: DislikePostScalarWhereInput!
  data: DislikePostUpdateManyMutationInput!
}

input PostUpdateToOneWithWhereWithoutLikesInput {
  where: PostWhereInput
  data: PostUpdateWithoutLikesInput!
}

input CommentUpdateOneWithoutLikesNestedInput {
  create: CommentCreateWithoutLikesInput
  connectOrCreate: CommentCreateOrConnectWithoutLikesInput
  upsert: CommentUpsertWithoutLikesInput
  disconnect: CommentWhereInput
  delete: CommentWhereInput
  connect: CommentWhereUniqueInput
  update: CommentUpdateToOneWithWhereWithoutLikesInput
}

input CommentUpsertWithoutLikesInput {
  update: CommentUpdateWithoutLikesInput!
  create: CommentCreateWithoutLikesInput!
  where: CommentWhereInput
}

input CommentUpdateWithoutLikesInput {
  id: StringFieldUpdateOperationsInput
  conent: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  isAnonymously: NullableBoolFieldUpdateOperationsInput
  post: PostUpdateOneRequiredWithoutCommentsNestedInput
  user: UserUpdateOneWithoutCommentsNestedInput
  parent: CommentUpdateOneWithoutRepliesNestedInput
  replies: CommentUpdateManyWithoutParentNestedInput
  dislikes: DislikePostUpdateManyWithoutCommentNestedInput
}

input CommentUpdateToOneWithWhereWithoutLikesInput {
  where: CommentWhereInput
  data: CommentUpdateWithoutLikesInput!
}

input LikePostUpdateWithWhereUniqueWithoutUserInput {
  where: LikePostWhereUniqueInput!
  data: LikePostUpdateWithoutUserInput!
}

input LikePostUpdateManyWithWhereWithoutUserInput {
  where: LikePostScalarWhereInput!
  data: LikePostUpdateManyMutationInput!
}

input UserUpdateToOneWithWhereWithoutEducationsInput {
  where: UserWhereInput
  data: UserUpdateWithoutEducationsInput!
}

input EducationUpdateWithWhereUniqueWithoutResumeInput {
  where: EducationWhereUniqueInput!
  data: EducationUpdateWithoutResumeInput!
}

input EducationUpdateManyWithWhereWithoutResumeInput {
  where: EducationScalarWhereInput!
  data: EducationUpdateManyMutationInput!
}

input EducationScalarWhereInput {
  AND: [EducationScalarWhereInput!]
  OR: [EducationScalarWhereInput!]
  NOT: [EducationScalarWhereInput!]
  id: StringFilter
  type: EnumEducationTypeFilter
  major: StringFilter
  degree: EnumDegreeFilter
  graduationAt: DateTimeNullableFilter
  gpa: IntNullableFilter
  awards: StringNullableListFilter
  relevantCourseworks: StringNullableListFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  resumeId: StringNullableFilter
  userId: StringFilter
}

input EducationUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  type: EnumEducationTypeFieldUpdateOperationsInput
  major: StringFieldUpdateOperationsInput
  degree: EnumDegreeFieldUpdateOperationsInput
  graduationAt: NullableDateTimeFieldUpdateOperationsInput
  gpa: NullableIntFieldUpdateOperationsInput
  awards: EducationUpdateawardsInput
  relevantCourseworks: EducationUpdaterelevantCourseworksInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
}

input ResumeUpdateToOneWithWhereWithoutWorkExperiencesInput {
  where: ResumeWhereInput
  data: ResumeUpdateWithoutWorkExperiencesInput!
}

input CityUpdateOneWithoutWorkExperiencesNestedInput {
  create: CityCreateWithoutWorkExperiencesInput
  connectOrCreate: CityCreateOrConnectWithoutWorkExperiencesInput
  upsert: CityUpsertWithoutWorkExperiencesInput
  disconnect: CityWhereInput
  delete: CityWhereInput
  connect: CityWhereUniqueInput
  update: CityUpdateToOneWithWhereWithoutWorkExperiencesInput
}

input CityUpsertWithoutWorkExperiencesInput {
  update: CityUpdateWithoutWorkExperiencesInput!
  create: CityCreateWithoutWorkExperiencesInput!
  where: CityWhereInput
}

input CityUpdateWithoutWorkExperiencesInput {
  name: StringFieldUpdateOperationsInput
  stateCode: NullableStringFieldUpdateOperationsInput
  stateName: NullableStringFieldUpdateOperationsInput
  countryCode: NullableStringFieldUpdateOperationsInput
  countryName: NullableStringFieldUpdateOperationsInput
  latitude: NullableStringFieldUpdateOperationsInput
  longitude: NullableStringFieldUpdateOperationsInput
  wikiDataId: StringFieldUpdateOperationsInput
  state: StateUpdateOneWithoutCitiesNestedInput
  country: CountryUpdateOneWithoutCitiesNestedInput
  users: UsersOnCityUpdateManyWithoutCityNestedInput
  companies: CompanyUpdateManyWithoutAddressNestedInput
  jobs: JobUpdateManyWithoutAddressNestedInput
  resumes: ResumeUpdateManyWithoutAddressNestedInput
}

input CityUpdateToOneWithWhereWithoutWorkExperiencesInput {
  where: CityWhereInput
  data: CityUpdateWithoutWorkExperiencesInput!
}

input WorkExperienceUpdateWithWhereUniqueWithoutCompanyInput {
  where: WorkExperienceWhereUniqueInput!
  data: WorkExperienceUpdateWithoutCompanyInput!
}

input WorkExperienceUpdateManyWithWhereWithoutCompanyInput {
  where: WorkExperienceScalarWhereInput!
  data: WorkExperienceUpdateManyMutationInput!
}

input UserUpdateOneWithoutCompaniesNestedInput {
  create: UserCreateWithoutCompaniesInput
  connectOrCreate: UserCreateOrConnectWithoutCompaniesInput
  upsert: UserUpsertWithoutCompaniesInput
  disconnect: UserWhereInput
  delete: UserWhereInput
  connect: UserWhereUniqueInput
  update: UserUpdateToOneWithWhereWithoutCompaniesInput
}

input UserUpsertWithoutCompaniesInput {
  update: UserUpdateWithoutCompaniesInput!
  create: UserCreateWithoutCompaniesInput!
  where: UserWhereInput
}

input UserUpdateWithoutCompaniesInput {
  id: StringFieldUpdateOperationsInput
  avatarUrl: NullableStringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  emailVerified: BoolFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  phoneNumber: NullableStringFieldUpdateOperationsInput
  workingPosition: NullableEnumWorkPositionFieldUpdateOperationsInput
  status: EnumUserStatusFieldUpdateOperationsInput
  signInProvider: NullableEnumSignInProviderFieldUpdateOperationsInput
  color: NullableStringFieldUpdateOperationsInput
  role: EnumUserRoleFieldUpdateOperationsInput
  addressDetail: NullableStringFieldUpdateOperationsInput
  verifyCode: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  avatar: FileUpdateOneWithoutUsersNestedInput
  country: CountryUpdateOneWithoutUsersNestedInput
  social: SocialUpdateManyWithoutUserNestedInput
  resumes: ResumeUpdateManyWithoutUserNestedInput
  workExperiences: WorkExperienceUpdateManyWithoutUserNestedInput
  educations: EducationUpdateManyWithoutUserNestedInput
  projects: ProjectUpdateManyWithoutUserNestedInput
  applications: ApplicationUpdateManyWithoutCandidateNestedInput
  posts: PostUpdateManyWithoutAuthorNestedInput
  likes: LikePostUpdateManyWithoutUserNestedInput
  dislikes: DislikePostUpdateManyWithoutUserNestedInput
  comments: CommentUpdateManyWithoutUserNestedInput
  bookmarks: BookmarkPostUpdateManyWithoutUserNestedInput
  saveJobs: SaveJobUpdateManyWithoutUserNestedInput
  payments: PaymentUpdateManyWithoutUserNestedInput
  address: UsersOnCityUpdateManyWithoutUserNestedInput
  authorSettings: SettingUpdateManyWithoutAuthorNestedInput
  updatedBySettings: SettingUpdateManyWithoutUpdatedByNestedInput
}

input UserUpdateToOneWithWhereWithoutCompaniesInput {
  where: UserWhereInput
  data: UserUpdateWithoutCompaniesInput!
}

input CompanyUpdateWithWhereUniqueWithoutAvatarInput {
  where: CompanyWhereUniqueInput!
  data: CompanyUpdateWithoutAvatarInput!
}

input CompanyUpdateManyWithWhereWithoutAvatarInput {
  where: CompanyScalarWhereInput!
  data: CompanyUpdateManyMutationInput!
}

input ResumeTemplateUpdateManyWithoutFileNestedInput {
  create: [ResumeTemplateCreateWithoutFileInput!]
  connectOrCreate: [ResumeTemplateCreateOrConnectWithoutFileInput!]
  upsert: [ResumeTemplateUpsertWithWhereUniqueWithoutFileInput!]
  createMany: ResumeTemplateCreateManyFileInputEnvelope
  set: [ResumeTemplateWhereUniqueInput!]
  disconnect: [ResumeTemplateWhereUniqueInput!]
  delete: [ResumeTemplateWhereUniqueInput!]
  connect: [ResumeTemplateWhereUniqueInput!]
  update: [ResumeTemplateUpdateWithWhereUniqueWithoutFileInput!]
  updateMany: [ResumeTemplateUpdateManyWithWhereWithoutFileInput!]
  deleteMany: [ResumeTemplateScalarWhereInput!]
}

input ResumeTemplateUpsertWithWhereUniqueWithoutFileInput {
  where: ResumeTemplateWhereUniqueInput!
  update: ResumeTemplateUpdateWithoutFileInput!
  create: ResumeTemplateCreateWithoutFileInput!
}

input ResumeTemplateUpdateWithoutFileInput {
  id: StringFieldUpdateOperationsInput
  raw: StringFieldUpdateOperationsInput
  status: NullableEnumUserStatusFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
}

input NullableEnumUserStatusFieldUpdateOperationsInput {
  set: UserStatus
}

input ResumeTemplateUpdateWithWhereUniqueWithoutFileInput {
  where: ResumeTemplateWhereUniqueInput!
  data: ResumeTemplateUpdateWithoutFileInput!
}

input ResumeTemplateUpdateManyWithWhereWithoutFileInput {
  where: ResumeTemplateScalarWhereInput!
  data: ResumeTemplateUpdateManyMutationInput!
}

input ResumeTemplateScalarWhereInput {
  AND: [ResumeTemplateScalarWhereInput!]
  OR: [ResumeTemplateScalarWhereInput!]
  NOT: [ResumeTemplateScalarWhereInput!]
  id: StringFilter
  raw: StringFilter
  status: EnumUserStatusNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  fileId: StringNullableFilter
}

input ResumeTemplateUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  raw: StringFieldUpdateOperationsInput
  status: NullableEnumUserStatusFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
}

input CertificateUpdateOneWithoutFilesNestedInput {
  create: CertificateCreateWithoutFilesInput
  connectOrCreate: CertificateCreateOrConnectWithoutFilesInput
  upsert: CertificateUpsertWithoutFilesInput
  disconnect: CertificateWhereInput
  delete: CertificateWhereInput
  connect: CertificateWhereUniqueInput
  update: CertificateUpdateToOneWithWhereWithoutFilesInput
}

input CertificateUpsertWithoutFilesInput {
  update: CertificateUpdateWithoutFilesInput!
  create: CertificateCreateWithoutFilesInput!
  where: CertificateWhereInput
}

input CertificateUpdateWithoutFilesInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
}

input CertificateUpdateToOneWithWhereWithoutFilesInput {
  where: CertificateWhereInput
  data: CertificateUpdateWithoutFilesInput!
}

input FileUpdateToOneWithWhereWithoutPostsInput {
  where: FileWhereInput
  data: FileUpdateWithoutPostsInput!
}

input PostUpdateWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutAuthorInput!
}

input PostUpdateManyWithWhereWithoutAuthorInput {
  where: PostScalarWhereInput!
  data: PostUpdateManyMutationInput!
}

input PostScalarWhereInput {
  AND: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  NOT: [PostScalarWhereInput!]
  id: StringFilter
  title: StringFilter
  content: StringFilter
  shareUrl: StringFilter
  metadata: JsonNullableFilter
  slug: StringFilter
  minRead: IntNullableFilter
  jobCategoryId: StringNullableFilter
  authorId: StringFilter
  thumbnailId: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
}

input PostUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  shareUrl: StringFieldUpdateOperationsInput
  metadata: JSON
  slug: StringFieldUpdateOperationsInput
  minRead: NullableIntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
}

input UserUpdateToOneWithWhereWithoutProjectsInput {
  where: UserWhereInput
  data: UserUpdateWithoutProjectsInput!
}

input ResumeUpdateOneWithoutProjectsNestedInput {
  create: ResumeCreateWithoutProjectsInput
  connectOrCreate: ResumeCreateOrConnectWithoutProjectsInput
  upsert: ResumeUpsertWithoutProjectsInput
  disconnect: ResumeWhereInput
  delete: ResumeWhereInput
  connect: ResumeWhereUniqueInput
  update: ResumeUpdateToOneWithWhereWithoutProjectsInput
}

input ResumeUpsertWithoutProjectsInput {
  update: ResumeUpdateWithoutProjectsInput!
  create: ResumeCreateWithoutProjectsInput!
  where: ResumeWhereInput
}

input ResumeUpdateWithoutProjectsInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  fullName: NullableStringFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  addressDetail: NullableStringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  isSummary: NullableBoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutResumesNestedInput
  avatar: FileUpdateOneWithoutResumeNestedInput
  address: CityUpdateOneWithoutResumesNestedInput
  language: LanguageUpdateOneWithoutResumesNestedInput
  jobTitle: JobTitleUpdateOneRequiredWithoutResumesNestedInput
  applications: ApplicationUpdateManyWithoutResumeNestedInput
  workExperiences: WorkExperienceUpdateManyWithoutResumeNestedInput
  educations: EducationUpdateManyWithoutResumeNestedInput
  skills: SkillUpdateManyWithoutResumeNestedInput
  socials: SocialUpdateManyWithoutResumeNestedInput
  languageSkills: LanguageSkillUpdateManyWithoutResumeNestedInput
  activities: ActivityUpdateManyWithoutResumeNestedInput
}

input ResumeUpdateToOneWithWhereWithoutProjectsInput {
  where: ResumeWhereInput
  data: ResumeUpdateWithoutProjectsInput!
}

input ProjectUpdateWithWhereUniqueWithoutCompanyInput {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateWithoutCompanyInput!
}

input ProjectUpdateManyWithWhereWithoutCompanyInput {
  where: ProjectScalarWhereInput!
  data: ProjectUpdateManyMutationInput!
}

input CompanyUpdateToOneWithWhereWithoutWorkExperiencesInput {
  where: CompanyWhereInput
  data: CompanyUpdateWithoutWorkExperiencesInput!
}

input WorkExperienceUpdateWithWhereUniqueWithoutResumeInput {
  where: WorkExperienceWhereUniqueInput!
  data: WorkExperienceUpdateWithoutResumeInput!
}

input WorkExperienceUpdateManyWithWhereWithoutResumeInput {
  where: WorkExperienceScalarWhereInput!
  data: WorkExperienceUpdateManyMutationInput!
}

input ResumeUpdateToOneWithWhereWithoutApplicationsInput {
  where: ResumeWhereInput
  data: ResumeUpdateWithoutApplicationsInput!
}

input ApplicationUpdateWithWhereUniqueWithoutCandidateInput {
  where: ApplicationWhereUniqueInput!
  data: ApplicationUpdateWithoutCandidateInput!
}

input ApplicationUpdateManyWithWhereWithoutCandidateInput {
  where: ApplicationScalarWhereInput!
  data: ApplicationUpdateManyMutationInput!
}

input UserUpdateToOneWithWhereWithoutLikesInput {
  where: UserWhereInput
  data: UserUpdateWithoutLikesInput!
}

input LikePostUpdateWithWhereUniqueWithoutPostInput {
  where: LikePostWhereUniqueInput!
  data: LikePostUpdateWithoutPostInput!
}

input LikePostUpdateManyWithWhereWithoutPostInput {
  where: LikePostScalarWhereInput!
  data: LikePostUpdateManyMutationInput!
}

input PostUpdateWithWhereUniqueWithoutThumbnailInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutThumbnailInput!
}

input PostUpdateManyWithWhereWithoutThumbnailInput {
  where: PostScalarWhereInput!
  data: PostUpdateManyMutationInput!
}

input FileUpdateToOneWithWhereWithoutProjectsInput {
  where: FileWhereInput
  data: FileUpdateWithoutProjectsInput!
}

input ProjectUpdateWithWhereUniqueWithoutTechStacksInput {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateWithoutTechStacksInput!
}

input ProjectUpdateManyWithWhereWithoutTechStacksInput {
  where: ProjectScalarWhereInput!
  data: ProjectUpdateManyMutationInput!
}

input SkillUpdateWithWhereUniqueWithoutJobsInput {
  where: SkillWhereUniqueInput!
  data: SkillUpdateWithoutJobsInput!
}

input SkillUpdateManyWithWhereWithoutJobsInput {
  where: SkillScalarWhereInput!
  data: SkillUpdateManyMutationInput!
}

input JobUpdateWithWhereUniqueWithoutCompanyInput {
  where: JobWhereUniqueInput!
  data: JobUpdateWithoutCompanyInput!
}

input JobUpdateManyWithWhereWithoutCompanyInput {
  where: JobScalarWhereInput!
  data: JobUpdateManyMutationInput!
}

input CompanyUpdateToOneWithWhereWithoutProjectsInput {
  where: CompanyWhereInput
  data: CompanyUpdateWithoutProjectsInput!
}

input ProjectUpdateWithWhereUniqueWithoutUserInput {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateWithoutUserInput!
}

input ProjectUpdateManyWithWhereWithoutUserInput {
  where: ProjectScalarWhereInput!
  data: ProjectUpdateManyMutationInput!
}

input UserUpdateToOneWithWhereWithoutPostsInput {
  where: UserWhereInput
  data: UserUpdateWithoutPostsInput!
}

input PostUpdateWithWhereUniqueWithoutTagsInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutTagsInput!
}

input PostUpdateManyWithWhereWithoutTagsInput {
  where: PostScalarWhereInput!
  data: PostUpdateManyMutationInput!
}

input TagUpdateWithWhereUniqueWithoutJobsInput {
  where: TagWhereUniqueInput!
  data: TagUpdateWithoutJobsInput!
}

input TagUpdateManyWithWhereWithoutJobsInput {
  where: TagScalarWhereInput!
  data: TagUpdateManyMutationInput!
}

input JobUpdateToOneWithWhereWithoutApplicationsInput {
  where: JobWhereInput
  data: JobUpdateWithoutApplicationsInput!
}

input ApplicationUpdateWithWhereUniqueWithoutResumeInput {
  where: ApplicationWhereUniqueInput!
  data: ApplicationUpdateWithoutResumeInput!
}

input ApplicationUpdateManyWithWhereWithoutResumeInput {
  where: ApplicationScalarWhereInput!
  data: ApplicationUpdateManyMutationInput!
}

input ResumeUpdateToOneWithWhereWithoutEducationsInput {
  where: ResumeWhereInput
  data: ResumeUpdateWithoutEducationsInput!
}

input EducationUpdateWithWhereUniqueWithoutUserInput {
  where: EducationWhereUniqueInput!
  data: EducationUpdateWithoutUserInput!
}

input EducationUpdateManyWithWhereWithoutUserInput {
  where: EducationScalarWhereInput!
  data: EducationUpdateManyMutationInput!
}

input UserUpdateToOneWithWhereWithoutWorkExperiencesInput {
  where: UserWhereInput
  data: UserUpdateWithoutWorkExperiencesInput!
}

input WorkExperienceUpdateWithWhereUniqueWithoutJobTitleInput {
  where: WorkExperienceWhereUniqueInput!
  data: WorkExperienceUpdateWithoutJobTitleInput!
}

input WorkExperienceUpdateManyWithWhereWithoutJobTitleInput {
  where: WorkExperienceScalarWhereInput!
  data: WorkExperienceUpdateManyMutationInput!
}

input JobTitleUpdateToOneWithWhereWithoutResumesInput {
  where: JobTitleWhereInput
  data: JobTitleUpdateWithoutResumesInput!
}

input ResumeUpdateToOneWithWhereWithoutLanguageSkillsInput {
  where: ResumeWhereInput
  data: ResumeUpdateWithoutLanguageSkillsInput!
}

input LanguageSkillUpdateWithWhereUniqueWithoutLanguageInput {
  where: LanguageSkillWhereUniqueInput!
  data: LanguageSkillUpdateWithoutLanguageInput!
}

input LanguageSkillUpdateManyWithWhereWithoutLanguageInput {
  where: LanguageSkillScalarWhereInput!
  data: LanguageSkillUpdateManyMutationInput!
}

input LanguageUpdateToOneWithWhereWithoutResumesInput {
  where: LanguageWhereInput
  data: LanguageUpdateWithoutResumesInput!
}

input ResumeUpdateWithWhereUniqueWithoutUserInput {
  where: ResumeWhereUniqueInput!
  data: ResumeUpdateWithoutUserInput!
}

input ResumeUpdateManyWithWhereWithoutUserInput {
  where: ResumeScalarWhereInput!
  data: ResumeUpdateManyMutationInput!
}

input UserUpdateToOneWithWhereWithoutSocialInput {
  where: UserWhereInput
  data: UserUpdateWithoutSocialInput!
}

input ResumeUpdateOneWithoutSocialsNestedInput {
  create: ResumeCreateWithoutSocialsInput
  connectOrCreate: ResumeCreateOrConnectWithoutSocialsInput
  upsert: ResumeUpsertWithoutSocialsInput
  disconnect: ResumeWhereInput
  delete: ResumeWhereInput
  connect: ResumeWhereUniqueInput
  update: ResumeUpdateToOneWithWhereWithoutSocialsInput
}

input ResumeUpsertWithoutSocialsInput {
  update: ResumeUpdateWithoutSocialsInput!
  create: ResumeCreateWithoutSocialsInput!
  where: ResumeWhereInput
}

input ResumeUpdateWithoutSocialsInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  fullName: NullableStringFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  addressDetail: NullableStringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  isSummary: NullableBoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutResumesNestedInput
  avatar: FileUpdateOneWithoutResumeNestedInput
  address: CityUpdateOneWithoutResumesNestedInput
  language: LanguageUpdateOneWithoutResumesNestedInput
  jobTitle: JobTitleUpdateOneRequiredWithoutResumesNestedInput
  applications: ApplicationUpdateManyWithoutResumeNestedInput
  workExperiences: WorkExperienceUpdateManyWithoutResumeNestedInput
  educations: EducationUpdateManyWithoutResumeNestedInput
  skills: SkillUpdateManyWithoutResumeNestedInput
  projects: ProjectUpdateManyWithoutResumeNestedInput
  languageSkills: LanguageSkillUpdateManyWithoutResumeNestedInput
  activities: ActivityUpdateManyWithoutResumeNestedInput
}

input ResumeUpdateToOneWithWhereWithoutSocialsInput {
  where: ResumeWhereInput
  data: ResumeUpdateWithoutSocialsInput!
}

input SocialUpdateWithWhereUniqueWithoutCompanyInput {
  where: SocialWhereUniqueInput!
  data: SocialUpdateWithoutCompanyInput!
}

input SocialUpdateManyWithWhereWithoutCompanyInput {
  where: SocialScalarWhereInput!
  data: SocialUpdateManyMutationInput!
}

input CompanyUpdateToOneWithWhereWithoutJobsInput {
  where: CompanyWhereInput
  data: CompanyUpdateWithoutJobsInput!
}

input JobUpdateWithWhereUniqueWithoutJobCategoryInput {
  where: JobWhereUniqueInput!
  data: JobUpdateWithoutJobCategoryInput!
}

input JobUpdateManyWithWhereWithoutJobCategoryInput {
  where: JobScalarWhereInput!
  data: JobUpdateManyMutationInput!
}

input PostUpdateManyWithoutJobCategoryNestedInput {
  create: [PostCreateWithoutJobCategoryInput!]
  connectOrCreate: [PostCreateOrConnectWithoutJobCategoryInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutJobCategoryInput!]
  createMany: PostCreateManyJobCategoryInputEnvelope
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  delete: [PostWhereUniqueInput!]
  connect: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutJobCategoryInput!]
  updateMany: [PostUpdateManyWithWhereWithoutJobCategoryInput!]
  deleteMany: [PostScalarWhereInput!]
}

input PostUpsertWithWhereUniqueWithoutJobCategoryInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutJobCategoryInput!
  create: PostCreateWithoutJobCategoryInput!
}

input PostUpdateWithoutJobCategoryInput {
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  shareUrl: StringFieldUpdateOperationsInput
  metadata: JSON
  slug: StringFieldUpdateOperationsInput
  minRead: NullableIntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  author: UserUpdateOneRequiredWithoutPostsNestedInput
  thumbnail: FileUpdateOneWithoutPostsNestedInput
  categories: PostCategoryUpdateManyWithoutPostsNestedInput
  tags: TagUpdateManyWithoutPostsNestedInput
  likes: LikePostUpdateManyWithoutPostNestedInput
  dislikes: DislikePostUpdateManyWithoutPostNestedInput
  comments: CommentUpdateManyWithoutPostNestedInput
  bookmarks: BookmarkPostUpdateManyWithoutPostNestedInput
}

input PostUpdateWithWhereUniqueWithoutJobCategoryInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutJobCategoryInput!
}

input PostUpdateManyWithWhereWithoutJobCategoryInput {
  where: PostScalarWhereInput!
  data: PostUpdateManyMutationInput!
}

input JobCategoryUpdateWithWhereUniqueWithoutCompaniesInput {
  where: JobCategoryWhereUniqueInput!
  data: JobCategoryUpdateWithoutCompaniesInput!
}

input JobCategoryUpdateManyWithWhereWithoutCompaniesInput {
  where: JobCategoryScalarWhereInput!
  data: JobCategoryUpdateManyMutationInput!
}

input JobCategoryScalarWhereInput {
  AND: [JobCategoryScalarWhereInput!]
  OR: [JobCategoryScalarWhereInput!]
  NOT: [JobCategoryScalarWhereInput!]
  id: StringFilter
  name: StringFilter
  slug: StringFilter
  isFeature: BoolNullableFilter
  isTheFive: BoolNullableFilter
  isDefault: BoolNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
}

input JobCategoryUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  isFeature: NullableBoolFieldUpdateOperationsInput
  isTheFive: NullableBoolFieldUpdateOperationsInput
  isDefault: NullableBoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
}

input CompanyUpdateWithWhereUniqueWithoutAddressInput {
  where: CompanyWhereUniqueInput!
  data: CompanyUpdateWithoutAddressInput!
}

input CompanyUpdateManyWithWhereWithoutAddressInput {
  where: CompanyScalarWhereInput!
  data: CompanyUpdateManyMutationInput!
}

input CityUpdateToOneWithWhereWithoutResumesInput {
  where: CityWhereInput
  data: CityUpdateWithoutResumesInput!
}

input ResumeUpdateToOneWithWhereWithoutSkillsInput {
  where: ResumeWhereInput
  data: ResumeUpdateWithoutSkillsInput!
}

input SkillUpdateWithWhereUniqueWithoutProjectsInput {
  where: SkillWhereUniqueInput!
  data: SkillUpdateWithoutProjectsInput!
}

input SkillUpdateManyWithWhereWithoutProjectsInput {
  where: SkillScalarWhereInput!
  data: SkillUpdateManyMutationInput!
}

input ProjectUpdateWithWhereUniqueWithoutThumbnailInput {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateWithoutThumbnailInput!
}

input ProjectUpdateManyWithWhereWithoutThumbnailInput {
  where: ProjectScalarWhereInput!
  data: ProjectUpdateManyMutationInput!
}

input FileUpdateToOneWithWhereWithoutResumeInput {
  where: FileWhereInput
  data: FileUpdateWithoutResumeInput!
}

input ResumeUpdateWithWhereUniqueWithoutJobTitleInput {
  where: ResumeWhereUniqueInput!
  data: ResumeUpdateWithoutJobTitleInput!
}

input ResumeUpdateManyWithWhereWithoutJobTitleInput {
  where: ResumeScalarWhereInput!
  data: ResumeUpdateManyMutationInput!
}

input JobTitleUpdateToOneWithWhereWithoutJobsInput {
  where: JobTitleWhereInput
  data: JobTitleUpdateWithoutJobsInput!
}

input JobUpdateWithWhereUniqueWithoutAddressInput {
  where: JobWhereUniqueInput!
  data: JobUpdateWithoutAddressInput!
}

input JobUpdateManyWithWhereWithoutAddressInput {
  where: JobScalarWhereInput!
  data: JobUpdateManyMutationInput!
}

input CityUpdateToOneWithWhereWithoutCompaniesInput {
  where: CityWhereInput
  data: CityUpdateWithoutCompaniesInput!
}

input CompanyUpdateWithWhereUniqueWithoutIndustriesInput {
  where: CompanyWhereUniqueInput!
  data: CompanyUpdateWithoutIndustriesInput!
}

input CompanyUpdateManyWithWhereWithoutIndustriesInput {
  where: CompanyScalarWhereInput!
  data: CompanyUpdateManyMutationInput!
}

input JobCategoryUpdateToOneWithWhereWithoutJobsInput {
  where: JobCategoryWhereInput
  data: JobCategoryUpdateWithoutJobsInput!
}

input JobUpdateWithWhereUniqueWithoutJobTitleInput {
  where: JobWhereUniqueInput!
  data: JobUpdateWithoutJobTitleInput!
}

input JobUpdateManyWithWhereWithoutJobTitleInput {
  where: JobScalarWhereInput!
  data: JobUpdateManyMutationInput!
}

input JobTitleUpdateToOneWithWhereWithoutWorkExperiencesInput {
  where: JobTitleWhereInput
  data: JobTitleUpdateWithoutWorkExperiencesInput!
}

input WorkExperienceUpdateWithWhereUniqueWithoutUserInput {
  where: WorkExperienceWhereUniqueInput!
  data: WorkExperienceUpdateWithoutUserInput!
}

input WorkExperienceUpdateManyWithWhereWithoutUserInput {
  where: WorkExperienceScalarWhereInput!
  data: WorkExperienceUpdateManyMutationInput!
}

input UserUpdateToOneWithWhereWithoutResumesInput {
  where: UserWhereInput
  data: UserUpdateWithoutResumesInput!
}

input ResumeUpdateWithWhereUniqueWithoutAvatarInput {
  where: ResumeWhereUniqueInput!
  data: ResumeUpdateWithoutAvatarInput!
}

input ResumeUpdateManyWithWhereWithoutAvatarInput {
  where: ResumeScalarWhereInput!
  data: ResumeUpdateManyMutationInput!
}

input FileUpdateWithWhereUniqueWithoutCompaniesInput {
  where: FileWhereUniqueInput!
  data: FileUpdateWithoutCompaniesInput!
}

input FileUpdateManyWithWhereWithoutCompaniesInput {
  where: FileScalarWhereInput!
  data: FileUpdateManyMutationInput!
}

input FileScalarWhereInput {
  AND: [FileScalarWhereInput!]
  OR: [FileScalarWhereInput!]
  NOT: [FileScalarWhereInput!]
  id: StringFilter
  url: StringFilter
  storageId: StringFilter
  provider: EnumFileProviderNullableFilter
  metadata: JsonNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  resumeTemplateId: StringNullableFilter
  certificateId: StringNullableFilter
}

input FileUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  url: StringFieldUpdateOperationsInput
  storageId: StringFieldUpdateOperationsInput
  provider: NullableEnumFileProviderFieldUpdateOperationsInput
  metadata: JSON
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  resumeTemplateId: NullableStringFieldUpdateOperationsInput
}

input CompanyUpdateToOneWithWhereWithoutSocialInput {
  where: CompanyWhereInput
  data: CompanyUpdateWithoutSocialInput!
}

input SocialUpdateWithWhereUniqueWithoutUserInput {
  where: SocialWhereUniqueInput!
  data: SocialUpdateWithoutUserInput!
}

input SocialUpdateManyWithWhereWithoutUserInput {
  where: SocialScalarWhereInput!
  data: SocialUpdateManyMutationInput!
}

input UserUpdateWithWhereUniqueWithoutCountryInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutCountryInput!
}

input UserUpdateManyWithWhereWithoutCountryInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyMutationInput!
}

input UserScalarWhereInput {
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
  id: StringFilter
  avatarUrl: StringNullableFilter
  avatarId: StringNullableFilter
  firstName: StringFilter
  lastName: StringFilter
  email: StringFilter
  emailVerified: BoolFilter
  password: StringFilter
  phoneNumber: StringNullableFilter
  countryId: IntNullableFilter
  workingPosition: EnumWorkPositionNullableFilter
  status: EnumUserStatusFilter
  signInProvider: EnumSignInProviderNullableFilter
  color: StringNullableFilter
  role: EnumUserRoleFilter
  addressDetail: StringNullableFilter
  verifyCode: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
}

input UserUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  avatarUrl: NullableStringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  emailVerified: BoolFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  phoneNumber: NullableStringFieldUpdateOperationsInput
  workingPosition: NullableEnumWorkPositionFieldUpdateOperationsInput
  status: EnumUserStatusFieldUpdateOperationsInput
  signInProvider: NullableEnumSignInProviderFieldUpdateOperationsInput
  color: NullableStringFieldUpdateOperationsInput
  role: EnumUserRoleFieldUpdateOperationsInput
  addressDetail: NullableStringFieldUpdateOperationsInput
  verifyCode: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
}

input CountryUpdateToOneWithWhereWithoutCitiesInput {
  where: CountryWhereInput
  data: CountryUpdateWithoutCitiesInput!
}

input CityUpdateWithWhereUniqueWithoutStateInput {
  where: CityWhereUniqueInput!
  data: CityUpdateWithoutStateInput!
}

input CityUpdateManyWithWhereWithoutStateInput {
  where: CityScalarWhereInput!
  data: CityUpdateManyMutationInput!
}

input CityScalarWhereInput {
  AND: [CityScalarWhereInput!]
  OR: [CityScalarWhereInput!]
  NOT: [CityScalarWhereInput!]
  id: IntFilter
  name: StringFilter
  stateCode: StringNullableFilter
  stateName: StringNullableFilter
  countryCode: StringNullableFilter
  countryName: StringNullableFilter
  latitude: StringNullableFilter
  longitude: StringNullableFilter
  wikiDataId: StringFilter
  stateId: IntNullableFilter
  countryId: IntNullableFilter
}

input CityUpdateManyMutationInput {
  name: StringFieldUpdateOperationsInput
  stateCode: NullableStringFieldUpdateOperationsInput
  stateName: NullableStringFieldUpdateOperationsInput
  countryCode: NullableStringFieldUpdateOperationsInput
  countryName: NullableStringFieldUpdateOperationsInput
  latitude: NullableStringFieldUpdateOperationsInput
  longitude: NullableStringFieldUpdateOperationsInput
  wikiDataId: StringFieldUpdateOperationsInput
}

input StateUpdateWithWhereUniqueWithoutCountryInput {
  where: StateWhereUniqueInput!
  data: StateUpdateWithoutCountryInput!
}

input StateUpdateManyWithWhereWithoutCountryInput {
  where: StateScalarWhereInput!
  data: StateUpdateManyMutationInput!
}

input StateScalarWhereInput {
  AND: [StateScalarWhereInput!]
  OR: [StateScalarWhereInput!]
  NOT: [StateScalarWhereInput!]
  id: IntFilter
  name: StringFilter
  countryCode: StringNullableFilter
  countryName: StringNullableFilter
  stateCode: StringNullableFilter
  type: StringNullableFilter
  latitude: StringNullableFilter
  longitude: StringNullableFilter
  countryId: IntNullableFilter
}

input StateUpdateManyMutationInput {
  name: StringFieldUpdateOperationsInput
  countryCode: NullableStringFieldUpdateOperationsInput
  countryName: NullableStringFieldUpdateOperationsInput
  stateCode: NullableStringFieldUpdateOperationsInput
  type: NullableStringFieldUpdateOperationsInput
  latitude: NullableStringFieldUpdateOperationsInput
  longitude: NullableStringFieldUpdateOperationsInput
}

input CountryUpdateToOneWithWhereWithoutUsersInput {
  where: CountryWhereInput
  data: CountryUpdateWithoutUsersInput!
}

input UserUpdateWithWhereUniqueWithoutAvatarInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutAvatarInput!
}

input UserUpdateManyWithWhereWithoutAvatarInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyMutationInput!
}

input FileUpdateToOneWithWhereWithoutCompanyInput {
  where: FileWhereInput
  data: FileUpdateWithoutCompanyInput!
}

input CompanyUpdateWithWhereUniqueWithoutPhotosInput {
  where: CompanyWhereUniqueInput!
  data: CompanyUpdateWithoutPhotosInput!
}

input CompanyUpdateManyWithWhereWithoutPhotosInput {
  where: CompanyScalarWhereInput!
  data: CompanyUpdateManyMutationInput!
}

input FileUpdateToOneWithWhereWithoutUsersInput {
  where: FileWhereInput
  data: FileUpdateWithoutUsersInput!
}

input UserUpdateToOneWithWhereWithoutAddressInput {
  where: UserWhereInput
  data: UserUpdateWithoutAddressInput!
}

input UsersOnCityUpdateWithWhereUniqueWithoutCityInput {
  where: UsersOnCityWhereUniqueInput!
  data: UsersOnCityUpdateWithoutCityInput!
}

input UsersOnCityUpdateManyWithWhereWithoutCityInput {
  where: UsersOnCityScalarWhereInput!
  data: UsersOnCityUpdateManyMutationInput!
}

input CityUpdateWithWhereUniqueWithoutCountryInput {
  where: CityWhereUniqueInput!
  data: CityUpdateWithoutCountryInput!
}

input CityUpdateManyWithWhereWithoutCountryInput {
  where: CityScalarWhereInput!
  data: CityUpdateManyMutationInput!
}

input CountryUpdateToOneWithWhereWithoutStatesInput {
  where: CountryWhereInput
  data: CountryUpdateWithoutStatesInput!
}

input StateUpdateToOneWithWhereWithoutCitiesInput {
  where: StateWhereInput
  data: StateUpdateWithoutCitiesInput!
}

input CityUpdateToOneWithWhereWithoutJobsInput {
  where: CityWhereInput
  data: CityUpdateWithoutJobsInput!
}

input JobUpdateWithWhereUniqueWithoutTagsInput {
  where: JobWhereUniqueInput!
  data: JobUpdateWithoutTagsInput!
}

input JobUpdateManyWithWhereWithoutTagsInput {
  where: JobScalarWhereInput!
  data: JobUpdateManyMutationInput!
}

input PostCategoryCreateInput {
  id: String
  name: String!
  slug: String!
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  posts: PostCreateNestedManyWithoutCategoriesInput
}

input PostCreateNestedManyWithoutCategoriesInput {
  create: [PostCreateWithoutCategoriesInput!]
  connectOrCreate: [PostCreateOrConnectWithoutCategoriesInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateWithoutCategoriesInput {
  id: String
  title: String!
  content: String!
  shareUrl: String!
  metadata: JSON
  slug: String!
  minRead: Int
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  jobCategory: JobCategoryCreateNestedOneWithoutPostsInput
  author: UserCreateNestedOneWithoutPostsInput!
  thumbnail: FileCreateNestedOneWithoutPostsInput
  tags: TagCreateNestedManyWithoutPostsInput
  likes: LikePostCreateNestedManyWithoutPostInput
  dislikes: DislikePostCreateNestedManyWithoutPostInput
  comments: CommentCreateNestedManyWithoutPostInput
  bookmarks: BookmarkPostCreateNestedManyWithoutPostInput
}

input PostCreateOrConnectWithoutCategoriesInput {
  where: PostWhereUniqueInput!
  create: PostCreateWithoutCategoriesInput!
}

input PostCategoryUpdateInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutCategoriesNestedInput
}

input PostUpdateManyWithoutCategoriesNestedInput {
  create: [PostCreateWithoutCategoriesInput!]
  connectOrCreate: [PostCreateOrConnectWithoutCategoriesInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutCategoriesInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  delete: [PostWhereUniqueInput!]
  connect: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutCategoriesInput!]
  updateMany: [PostUpdateManyWithWhereWithoutCategoriesInput!]
  deleteMany: [PostScalarWhereInput!]
}

input PostUpsertWithWhereUniqueWithoutCategoriesInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutCategoriesInput!
  create: PostCreateWithoutCategoriesInput!
}

input PostUpdateWithoutCategoriesInput {
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  shareUrl: StringFieldUpdateOperationsInput
  metadata: JSON
  slug: StringFieldUpdateOperationsInput
  minRead: NullableIntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  jobCategory: JobCategoryUpdateOneWithoutPostsNestedInput
  author: UserUpdateOneRequiredWithoutPostsNestedInput
  thumbnail: FileUpdateOneWithoutPostsNestedInput
  tags: TagUpdateManyWithoutPostsNestedInput
  likes: LikePostUpdateManyWithoutPostNestedInput
  dislikes: DislikePostUpdateManyWithoutPostNestedInput
  comments: CommentUpdateManyWithoutPostNestedInput
  bookmarks: BookmarkPostUpdateManyWithoutPostNestedInput
}

input PostUpdateWithWhereUniqueWithoutCategoriesInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutCategoriesInput!
}

input PostUpdateManyWithWhereWithoutCategoriesInput {
  where: PostScalarWhereInput!
  data: PostUpdateManyMutationInput!
}

input JobTitleCreateInput {
  id: String
  name: String!
  isFeature: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  jobs: JobCreateNestedManyWithoutJobTitleInput
  resumes: ResumeCreateNestedManyWithoutJobTitleInput
  workExperiences: WorkExperienceCreateNestedManyWithoutJobTitleInput
}

input JobTitleUpdateInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  isFeature: NullableBoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  jobs: JobUpdateManyWithoutJobTitleNestedInput
  resumes: ResumeUpdateManyWithoutJobTitleNestedInput
  workExperiences: WorkExperienceUpdateManyWithoutJobTitleNestedInput
}

input JobCategoryCreateInput {
  id: String
  name: String!
  slug: String!
  isFeature: Boolean
  isTheFive: Boolean
  isDefault: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  jobs: JobCreateNestedManyWithoutJobCategoryInput
  companies: CompanyCreateNestedManyWithoutIndustriesInput
  posts: PostCreateNestedManyWithoutJobCategoryInput
}

input JobCategoryUpdateInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  isFeature: NullableBoolFieldUpdateOperationsInput
  isTheFive: NullableBoolFieldUpdateOperationsInput
  isDefault: NullableBoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  jobs: JobUpdateManyWithoutJobCategoryNestedInput
  companies: CompanyUpdateManyWithoutIndustriesNestedInput
  posts: PostUpdateManyWithoutJobCategoryNestedInput
}

input SettingCreateInput {
  key: String!
  type: String!
  value: JSON!
  showWith: SettingCreateshowWithInput
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  author: UserCreateNestedOneWithoutAuthorSettingsInput
  updatedBy: UserCreateNestedOneWithoutUpdatedBySettingsInput
}

input SettingUpdateInput {
  key: StringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
  value: JSON
  showWith: SettingUpdateshowWithInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  author: UserUpdateOneWithoutAuthorSettingsNestedInput
  updatedBy: UserUpdateOneWithoutUpdatedBySettingsNestedInput
}

enum UserRoleWithoutAdmin {
  employee
  employer
}

input CompanyCreateInput {
  id: String
  name: String!
  slug: String!
  addressDetail: String!
  description: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  avatar: FileCreateNestedOneWithoutCompanyInput
  type: CompanyTypeCreateNestedOneWithoutCompaniesInput
  size: CompanySizeCreateNestedOneWithoutCompaniesInput
  photos: FileCreateNestedManyWithoutCompaniesInput
  address: CityCreateNestedOneWithoutCompaniesInput!
  industries: JobCategoryCreateNestedManyWithoutCompaniesInput
  social: SocialCreateNestedManyWithoutCompanyInput
  jobs: JobCreateNestedManyWithoutCompanyInput
  workExperiences: WorkExperienceCreateNestedManyWithoutCompanyInput
  projects: ProjectCreateNestedManyWithoutCompanyInput
  references: ReferenceCreateNestedManyWithoutCompanyInput
  user: UserCreateNestedOneWithoutCompaniesInput
}

input CompanyUpdateInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  addressDetail: StringFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  avatar: FileUpdateOneWithoutCompanyNestedInput
  type: CompanyTypeUpdateOneWithoutCompaniesNestedInput
  size: CompanySizeUpdateOneWithoutCompaniesNestedInput
  photos: FileUpdateManyWithoutCompaniesNestedInput
  address: CityUpdateOneRequiredWithoutCompaniesNestedInput
  industries: JobCategoryUpdateManyWithoutCompaniesNestedInput
  social: SocialUpdateManyWithoutCompanyNestedInput
  jobs: JobUpdateManyWithoutCompanyNestedInput
  workExperiences: WorkExperienceUpdateManyWithoutCompanyNestedInput
  projects: ProjectUpdateManyWithoutCompanyNestedInput
  references: ReferenceUpdateManyWithoutCompanyNestedInput
  user: UserUpdateOneWithoutCompaniesNestedInput
}

input PostCreateInput {
  id: String
  title: String!
  content: String!
  shareUrl: String!
  metadata: JSON
  slug: String!
  minRead: Int
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  jobCategory: JobCategoryCreateNestedOneWithoutPostsInput
  author: UserCreateNestedOneWithoutPostsInput!
  thumbnail: FileCreateNestedOneWithoutPostsInput
  categories: PostCategoryCreateNestedManyWithoutPostsInput
  tags: TagCreateNestedManyWithoutPostsInput
  likes: LikePostCreateNestedManyWithoutPostInput
  dislikes: DislikePostCreateNestedManyWithoutPostInput
  comments: CommentCreateNestedManyWithoutPostInput
  bookmarks: BookmarkPostCreateNestedManyWithoutPostInput
}

input PostUpdateInput {
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  shareUrl: StringFieldUpdateOperationsInput
  metadata: JSON
  slug: StringFieldUpdateOperationsInput
  minRead: NullableIntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  jobCategory: JobCategoryUpdateOneWithoutPostsNestedInput
  author: UserUpdateOneRequiredWithoutPostsNestedInput
  thumbnail: FileUpdateOneWithoutPostsNestedInput
  categories: PostCategoryUpdateManyWithoutPostsNestedInput
  tags: TagUpdateManyWithoutPostsNestedInput
  likes: LikePostUpdateManyWithoutPostNestedInput
  dislikes: DislikePostUpdateManyWithoutPostNestedInput
  comments: CommentUpdateManyWithoutPostNestedInput
  bookmarks: BookmarkPostUpdateManyWithoutPostNestedInput
}

input JobCreateInput {
  id: String
  type: JobType!
  level: JobLevel!
  slug: String!
  addressDetail: String
  salary: JobSalary
  salaryMetadata: JSON
  description: String!
  isBoot: Boolean
  numberOfRecruits: Int
  applicationDeadline: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  address: CityCreateNestedOneWithoutJobsInput!
  jobTitle: JobTitleCreateNestedOneWithoutJobsInput!
  jobCategory: JobCategoryCreateNestedOneWithoutJobsInput!
  company: CompanyCreateNestedOneWithoutJobsInput!
  tags: TagCreateNestedManyWithoutJobsInput
  skills: SkillCreateNestedManyWithoutJobsInput
  applications: ApplicationCreateNestedManyWithoutJobInput
  saveJobs: SaveJobCreateNestedManyWithoutJobInput
}

input JobUpdateInput {
  id: StringFieldUpdateOperationsInput
  type: EnumJobTypeFieldUpdateOperationsInput
  level: EnumJobLevelFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  addressDetail: NullableStringFieldUpdateOperationsInput
  salary: EnumJobSalaryFieldUpdateOperationsInput
  salaryMetadata: JSON
  description: StringFieldUpdateOperationsInput
  isBoot: NullableBoolFieldUpdateOperationsInput
  numberOfRecruits: IntFieldUpdateOperationsInput
  applicationDeadline: DateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  address: CityUpdateOneRequiredWithoutJobsNestedInput
  jobTitle: JobTitleUpdateOneRequiredWithoutJobsNestedInput
  jobCategory: JobCategoryUpdateOneRequiredWithoutJobsNestedInput
  company: CompanyUpdateOneRequiredWithoutJobsNestedInput
  tags: TagUpdateManyWithoutJobsNestedInput
  skills: SkillUpdateManyWithoutJobsNestedInput
  applications: ApplicationUpdateManyWithoutJobNestedInput
  saveJobs: SaveJobUpdateManyWithoutJobNestedInput
}

input SkillCreateInput {
  id: String
  content: String!
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  resume: ResumeCreateNestedOneWithoutSkillsInput
  projects: ProjectCreateNestedManyWithoutTechStacksInput
  jobs: JobCreateNestedManyWithoutSkillsInput
}

input SkillUpdateInput {
  id: StringFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  resume: ResumeUpdateOneWithoutSkillsNestedInput
  projects: ProjectUpdateManyWithoutTechStacksNestedInput
  jobs: JobUpdateManyWithoutSkillsNestedInput
}

input CompanyTypeCreateInput {
  id: String
  key: String!
  value: String!
  isDefault: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  companies: CompanyCreateNestedManyWithoutTypeInput
}

input CompanyCreateNestedManyWithoutTypeInput {
  create: [CompanyCreateWithoutTypeInput!]
  connectOrCreate: [CompanyCreateOrConnectWithoutTypeInput!]
  createMany: CompanyCreateManyTypeInputEnvelope
  connect: [CompanyWhereUniqueInput!]
}

input CompanyCreateWithoutTypeInput {
  id: String
  name: String!
  slug: String!
  addressDetail: String!
  description: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  avatar: FileCreateNestedOneWithoutCompanyInput
  size: CompanySizeCreateNestedOneWithoutCompaniesInput
  photos: FileCreateNestedManyWithoutCompaniesInput
  address: CityCreateNestedOneWithoutCompaniesInput!
  industries: JobCategoryCreateNestedManyWithoutCompaniesInput
  social: SocialCreateNestedManyWithoutCompanyInput
  jobs: JobCreateNestedManyWithoutCompanyInput
  workExperiences: WorkExperienceCreateNestedManyWithoutCompanyInput
  projects: ProjectCreateNestedManyWithoutCompanyInput
  references: ReferenceCreateNestedManyWithoutCompanyInput
  user: UserCreateNestedOneWithoutCompaniesInput
}

input CompanyCreateOrConnectWithoutTypeInput {
  where: CompanyWhereUniqueInput!
  create: CompanyCreateWithoutTypeInput!
}

input CompanyCreateManyTypeInputEnvelope {
  data: [CompanyCreateManyTypeInput!]!
  skipDuplicates: Boolean
}

input CompanyCreateManyTypeInput {
  id: String
  name: String!
  slug: String!
  avatarId: String
  companySizeId: String
  addressDetail: String!
  cityId: Int!
  description: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  userId: String
}

input CompanyTypeUpdateInput {
  id: StringFieldUpdateOperationsInput
  key: StringFieldUpdateOperationsInput
  value: StringFieldUpdateOperationsInput
  isDefault: NullableBoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  companies: CompanyUpdateManyWithoutTypeNestedInput
}

input CompanyUpdateManyWithoutTypeNestedInput {
  create: [CompanyCreateWithoutTypeInput!]
  connectOrCreate: [CompanyCreateOrConnectWithoutTypeInput!]
  upsert: [CompanyUpsertWithWhereUniqueWithoutTypeInput!]
  createMany: CompanyCreateManyTypeInputEnvelope
  set: [CompanyWhereUniqueInput!]
  disconnect: [CompanyWhereUniqueInput!]
  delete: [CompanyWhereUniqueInput!]
  connect: [CompanyWhereUniqueInput!]
  update: [CompanyUpdateWithWhereUniqueWithoutTypeInput!]
  updateMany: [CompanyUpdateManyWithWhereWithoutTypeInput!]
  deleteMany: [CompanyScalarWhereInput!]
}

input CompanyUpsertWithWhereUniqueWithoutTypeInput {
  where: CompanyWhereUniqueInput!
  update: CompanyUpdateWithoutTypeInput!
  create: CompanyCreateWithoutTypeInput!
}

input CompanyUpdateWithoutTypeInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  addressDetail: StringFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  avatar: FileUpdateOneWithoutCompanyNestedInput
  size: CompanySizeUpdateOneWithoutCompaniesNestedInput
  photos: FileUpdateManyWithoutCompaniesNestedInput
  address: CityUpdateOneRequiredWithoutCompaniesNestedInput
  industries: JobCategoryUpdateManyWithoutCompaniesNestedInput
  social: SocialUpdateManyWithoutCompanyNestedInput
  jobs: JobUpdateManyWithoutCompanyNestedInput
  workExperiences: WorkExperienceUpdateManyWithoutCompanyNestedInput
  projects: ProjectUpdateManyWithoutCompanyNestedInput
  references: ReferenceUpdateManyWithoutCompanyNestedInput
  user: UserUpdateOneWithoutCompaniesNestedInput
}

input CompanyUpdateWithWhereUniqueWithoutTypeInput {
  where: CompanyWhereUniqueInput!
  data: CompanyUpdateWithoutTypeInput!
}

input CompanyUpdateManyWithWhereWithoutTypeInput {
  where: CompanyScalarWhereInput!
  data: CompanyUpdateManyMutationInput!
}

input CompanySizeCreateInput {
  id: String
  key: String!
  value: String!
  isDefault: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  companies: CompanyCreateNestedManyWithoutSizeInput
}

input CompanyCreateNestedManyWithoutSizeInput {
  create: [CompanyCreateWithoutSizeInput!]
  connectOrCreate: [CompanyCreateOrConnectWithoutSizeInput!]
  createMany: CompanyCreateManySizeInputEnvelope
  connect: [CompanyWhereUniqueInput!]
}

input CompanyCreateWithoutSizeInput {
  id: String
  name: String!
  slug: String!
  addressDetail: String!
  description: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  avatar: FileCreateNestedOneWithoutCompanyInput
  type: CompanyTypeCreateNestedOneWithoutCompaniesInput
  photos: FileCreateNestedManyWithoutCompaniesInput
  address: CityCreateNestedOneWithoutCompaniesInput!
  industries: JobCategoryCreateNestedManyWithoutCompaniesInput
  social: SocialCreateNestedManyWithoutCompanyInput
  jobs: JobCreateNestedManyWithoutCompanyInput
  workExperiences: WorkExperienceCreateNestedManyWithoutCompanyInput
  projects: ProjectCreateNestedManyWithoutCompanyInput
  references: ReferenceCreateNestedManyWithoutCompanyInput
  user: UserCreateNestedOneWithoutCompaniesInput
}

input CompanyCreateOrConnectWithoutSizeInput {
  where: CompanyWhereUniqueInput!
  create: CompanyCreateWithoutSizeInput!
}

input CompanyCreateManySizeInputEnvelope {
  data: [CompanyCreateManySizeInput!]!
  skipDuplicates: Boolean
}

input CompanyCreateManySizeInput {
  id: String
  name: String!
  slug: String!
  avatarId: String
  companyTypeId: String
  addressDetail: String!
  cityId: Int!
  description: String
  createdAt: DateTime
  updatedAt: DateTime
  deletedAt: DateTime
  userId: String
}

input CompanySizeUpdateInput {
  id: StringFieldUpdateOperationsInput
  key: StringFieldUpdateOperationsInput
  value: StringFieldUpdateOperationsInput
  isDefault: NullableBoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  companies: CompanyUpdateManyWithoutSizeNestedInput
}

input CompanyUpdateManyWithoutSizeNestedInput {
  create: [CompanyCreateWithoutSizeInput!]
  connectOrCreate: [CompanyCreateOrConnectWithoutSizeInput!]
  upsert: [CompanyUpsertWithWhereUniqueWithoutSizeInput!]
  createMany: CompanyCreateManySizeInputEnvelope
  set: [CompanyWhereUniqueInput!]
  disconnect: [CompanyWhereUniqueInput!]
  delete: [CompanyWhereUniqueInput!]
  connect: [CompanyWhereUniqueInput!]
  update: [CompanyUpdateWithWhereUniqueWithoutSizeInput!]
  updateMany: [CompanyUpdateManyWithWhereWithoutSizeInput!]
  deleteMany: [CompanyScalarWhereInput!]
}

input CompanyUpsertWithWhereUniqueWithoutSizeInput {
  where: CompanyWhereUniqueInput!
  update: CompanyUpdateWithoutSizeInput!
  create: CompanyCreateWithoutSizeInput!
}

input CompanyUpdateWithoutSizeInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  slug: StringFieldUpdateOperationsInput
  addressDetail: StringFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  deletedAt: NullableDateTimeFieldUpdateOperationsInput
  avatar: FileUpdateOneWithoutCompanyNestedInput
  type: CompanyTypeUpdateOneWithoutCompaniesNestedInput
  photos: FileUpdateManyWithoutCompaniesNestedInput
  address: CityUpdateOneRequiredWithoutCompaniesNestedInput
  industries: JobCategoryUpdateManyWithoutCompaniesNestedInput
  social: SocialUpdateManyWithoutCompanyNestedInput
  jobs: JobUpdateManyWithoutCompanyNestedInput
  workExperiences: WorkExperienceUpdateManyWithoutCompanyNestedInput
  projects: ProjectUpdateManyWithoutCompanyNestedInput
  references: ReferenceUpdateManyWithoutCompanyNestedInput
  user: UserUpdateOneWithoutCompaniesNestedInput
}

input CompanyUpdateWithWhereUniqueWithoutSizeInput {
  where: CompanyWhereUniqueInput!
  data: CompanyUpdateWithoutSizeInput!
}

input CompanyUpdateManyWithWhereWithoutSizeInput {
  where: CompanyScalarWhereInput!
  data: CompanyUpdateManyMutationInput!
}